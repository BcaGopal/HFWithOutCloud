@model Model.ViewModels.CarpetMasterViewModel

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Carpet Master</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("EditSizePost", "CarpetMaster", FormMethod.Post, new { @class = "modal-form",id="modform"}))
        {

            @Html.HiddenFor(m => m.ProductCategoryId)
            @Html.HiddenFor(m => m.ProductCollectionId)
            @Html.HiddenFor(m => m.ProductQualityId)
            @Html.HiddenFor(m => m.ProductDesignId)
            @Html.HiddenFor(m => m.ProductInvoiceGroupId)
            @Html.HiddenFor(m => m.ProductStyleId)
            @Html.HiddenFor(m => m.ProductManufacturerId)
            @Html.HiddenFor(m => m.ProcessSequenceHeaderId)
            @Html.HiddenFor(m => m.ProductionRemark)
            @Html.HiddenFor(m => m.DrawBackTariffHeadId)
            @Html.HiddenFor(m => m.ProductGroupId)
            @Html.HiddenFor(m => m.ProductGroupName)
            @Html.HiddenFor(m=>m.ContentId)
            @Html.HiddenFor(m=>m.FaceContentId)
            @Html.HiddenFor(m=>m.DescriptionOfGoodsId)
            @Html.HiddenFor(m=>m.SampleId)
            @Html.HiddenFor(m=>m.StandardCost)
            @Html.HiddenFor(m=>m.StandardWeight)
            @Html.HiddenFor(m=>m.GrossWeight)
            @Html.HiddenFor(m=>m.Tags)
            @Html.HiddenFor(m => m.SiteId)
            @Html.HiddenFor(m => m.DivisionId)
            @Html.HiddenFor(m=>m.ProductId)
            @Html.HiddenFor(m=>m.ProductDesignPatternId)
            @Html.HiddenFor(m=>m.CounterNo)
            @Html.HiddenFor(m=>m.OriginCountryId)
            @Html.HiddenFor(m=>m.ImageFolderName)
            @Html.HiddenFor(m=>m.ImageFileName)
            @Html.HiddenFor(m=>m.ProductSupplierId)
            @Html.HiddenFor(m=>m.SupplierId)
            @Html.HiddenFor(m=>m.LeadTime)
            @Html.HiddenFor(m=>m.MinimumOrderQty)
            @Html.HiddenFor(m=>m.MaximumOrderQty)
            @Html.HiddenFor(m=>m.Cost)            
            @Html.HiddenFor(m=>m.IsSample)
            @Html.HiddenFor(m=>m.TraceType)
            @Html.HiddenFor(m=>m.MapType)
            @Html.HiddenFor(m => m.CarpetSkuSettings.UnitConversions)
            @Html.HiddenFor(m => m.CarpetSkuSettings.PerimeterSizeTypeId)

            @Html.AntiForgeryToken()

            <div class="form-horizontal  modal-body">
                @Html.ValidationSummary(false, "", new { @class = "text-danger" })

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductShapeId, "Shape", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.DropDownListFor(model => model.ProductShapeId, new SelectList(ViewBag.ProductShapeList as System.Collections.IEnumerable, "ProductShapeId", "ProductShapeName"),string.Empty, new { @class = "form-control col-xs-7 height required" })
                                @Html.ValidationMessageFor(m => m.ProductShapeId)
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.StandardSizeId, "Standard Size", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.StandardSizeId, null, new { @class = "form-control col-xs-7 height required" })
                                @*@Html.ValidationMessageFor(model => model.StandardSizeId, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ManufacturingSizeId, "Manufacturing Size", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ManufacturingSizeId, null, new { @class = "form-control col-xs-7 height required" })
                                @*@Html.ValidationMessageFor(model => model.ManufacturingSizeId, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.FinishingSizeId, "Finishing Size", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.FinishingSizeId, null, new { @class = "form-control col-xs-7 height required" })
                                @*@Html.ValidationMessageFor(model => model.FinishingSizeId, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.CarpetSkuSettings.isVisibleStencilSize ? "" : "none")">
                        @Html.HiddenFor(m => m.CarpetSkuSettings.isVisibleStencilSize)
                        <div class="form-group">
                            @Html.LabelFor(model => model.StencilSizeId, "Stencil Size", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.StencilSizeId, null, new { @class = "form-control col-xs-7 height required" })
                                @*@Html.ValidationMessageFor(model => model.StencilSizeId, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.MapSizeId, "Map Size", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.MapSizeId, null, new { @class = "form-control col-xs-7 height required" })
                                @*@Html.ValidationMessageFor(model => model.MapSizeId, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductCode, "Product Code", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductCode, null, new { @class = "form-control col-xs-7 height required" })
                                @*@Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductName, "Product Name", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductName, null, new { @class = "form-control col-xs-7 height required" })
                                @*@Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductDescription, "Product Description", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductDescription, null, new { @class = "form-control col-xs-7 height required" })
                                @*@Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.CarpetSkuSettings.isVisibleMapScale ? "" : "none")">
                        @Html.HiddenFor(m => m.CarpetSkuSettings.isVisibleMapScale)
                        <div class="form-group">
                            @Html.LabelFor(model => model.MapScale, "Map Scale", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.MapScale, null, new { @class = "form-control col-xs-7 height required" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.CarpetSkuSettings.isVisibleColour ? "none" : "")">
                        @Html.HiddenFor(m => m.CarpetSkuSettings.isVisibleColour)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ColourId, "Colour", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                
                                @if (Model.ProductId == 0 && Model.CarpetSkuSettings.isVisibleColour == false)
                                {
                                    @Html.HiddenFor(m => m.ColourId)
                                    @Html.TextBoxFor(model => model.ColourIdList, new { @class = "form-control col-xs-7 height required" })
                                }
                                else
                                {
                                    if (Model.IsBomCreated == true)
                                    { @Html.TextBoxFor(model => model.ColourId, new { @class = "form-control col-xs-7 height required", @readonly = true }) }
                                    else
                                    { @Html.TextBoxFor(model => model.ColourId, new { @class = "form-control col-xs-7 height required" })}
                                }

                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.CarpetSkuSettings.isVisibleCBM ? "" : "none")">
                        @Html.HiddenFor(m => m.CarpetSkuSettings.isVisibleCBM)
                        <div class="form-group">
                            @Html.LabelFor(model => model.CBM, "CBM", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.CBM, new { @class = "form-control col-xs-7 height required" })
                            </div>
                        </div>
                    </div>
                </div>

                @*<div class="row">                   
                    <div>
                        <div class="row" style=" padding-right: 30px; margin-right: 15px;">
                            <div class="col-md-12">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.StandardSizeId, "Standard Size", new { @class = "control-label col-xs-5" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(model => model.StandardSizeId, null, new { @class = "form-control col-xs-7 height required" })
                                        @Html.ValidationMessageFor(model => model.StandardSizeId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style=" padding-right: 30px; margin-right: 15px;">
                            <div class="col-md-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ManufacturingSizeId, "Manufacturing Size", new { @class = "control-label col-xs-5" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(model => model.ManufacturingSizeId, null, new { @class = "form-control col-xs-7 height required" })
                                        @Html.ValidationMessageFor(model => model.ManufacturingSizeId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style=" padding-right: 30px; margin-right: 15px;">
                            <div class="col-md-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.FinishingSizeId, "Finishing Size", new { @class = "control-label col-xs-5" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(model => model.FinishingSizeId, null, new { @class = "form-control col-xs-7 height required" })
                                        @Html.ValidationMessageFor(model => model.FinishingSizeId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style=" padding-right: 30px; margin-right: 15px;">
                            <div class="col-md-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.StencilSizeId, "Stencil Size", new { @class = "control-label col-xs-5" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(model => model.StencilSizeId, null, new { @class = "form-control col-xs-7 height required" })
                                        @Html.ValidationMessageFor(model => model.StencilSizeId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style=" padding-right: 30px; margin-right: 15px;">
                            <div class="col-md-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.MapSizeId, "Map Size", new { @class = "control-label col-xs-5" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(model => model.MapSizeId, null, new { @class = "form-control col-xs-7 height required" })
                                        @Html.ValidationMessageFor(model => model.MapSizeId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style=" padding-right: 30px; margin-right: 15px;">
                            <div class="col-md-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductCode, "Product Code", new { @class = "control-label col-xs-5" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(model => model.ProductCode, null, new { @class = "form-control col-xs-7 height required" })
                                        @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style=" padding-right: 30px; margin-right: 15px;">
                            <div class="col-md-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductName, "Product Name", new { @class = "control-label col-xs-5" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(model => model.ProductName, null, new { @class = "form-control col-xs-7 height required" })
                                        @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" style=" padding-right: 30px; margin-right: 15px;">
                            <div class="col-md-12">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductDescription, "Product Description", new { @class = "control-label col-xs-5" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(model => model.ProductDescription, null, new { @class = "form-control col-xs-7 height required" })
                                        @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>*@
                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom left" name="Command:Edit" type="submit"><h2 style="margin:0px" id="submit"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>

                    <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>


                </div>


            </div>
        }
    </div>
</div>

<script type="text/javascript">
    $(function()
    {
        var TitleCase= '@Session["TitleCase"]';
        //alert(TitleCase);
        $('#ProductName').focusout(function() {
            if (TitleCase=="UpperCase")
            this.value = this.value.toUpperCase() ;
    });
    });
</script>

<script type="text/javascript">

    var ProductShapeShortName = "";

    GetStandardSizeList($("#StandardSizeId"), '/CarpetMaster/GetSize', '/ComboHelpList/SetSingleSize', ' ', false, 0);
    CustomSelectFunction($("#ManufacturingSizeId"), '/ComboHelpList/GetSize', '/ComboHelpList/SetSingleSize', ' ', false, 0);
    CustomSelectFunction($("#FinishingSizeId"), '/ComboHelpList/GetSize', '/ComboHelpList/SetSingleSize', ' ', false, 0);
    CustomSelectFunction($("#StencilSizeId"), '/ComboHelpList/GetSize', '/ComboHelpList/SetSingleSize', ' ', false, 0);
    CustomSelectFunction($("#MapSizeId"), '/ComboHelpList/GetSize', '/ComboHelpList/SetSingleSize', ' ', false, 0);


    var id=@Model.ProductId;
    var IsVisibleColour= '@Model.CarpetSkuSettings.isVisibleColour';
    if (id == 0 && IsVisibleColour == "False")
    {
        CustomSelectFunction($("#ColourIdList"), '/ComboHelpList/GetColours', '/ComboHelpList/SetSingleColour', ' ', true, 0);
    }
    else{
        CustomSelectFunction($("#ColourId"), '/ComboHelpList/GetColours', '/ComboHelpList/SetSingleColour', ' ', false, 0);
    }


    //GetProductShapeShortName();

    $("#ProductShapeId").change(function(){
        GetStandardSizeList($("#StandardSizeId"), '/CarpetMaster/GetSize', '/ComboHelpList/SetSingleSize', ' ', false, 0);
        $("#StandardSizeId").select2("data", { id: "", text: "" });

        
        //GetProductShapeShortName();
    
    });


    $("#ColourIdList").change(function(){
        var url = '/CarpetMaster/EditSizePostWithMultipleColours';
        $('form#modform').attr('action',url);
    });

    var IsSaved=false;
    var ValidationCount=0;

    $('#modform').bind('submit',function(){
        if(!IsSaved)
        {
            IsSaved=true;
            return IsSaved;
        }
        else
        {

            return false;
        }
    });


    $("#StandardSizeId").select2('focus');

    var id=@Model.ProductId;
    $('#delete','.modal-content').click(function (e) {
        if(id>0)
        {
            var url = '/CarpetMaster/DeleteConfirmedLine';
            $('form#modform').attr('action',url);
            return;
        }
        else
        {
            return false;
        }
    })

    



    function CreateCustomProductName()
    {
        var ProductGroupNameText = $("#ProductGroupName").val();

        var StandardSizeData = $("#StandardSizeId").select2("data"); 
        var StandardSizeNameText = StandardSizeData.text;

        var ManufacturingSizeNameText="";

        if($("#ManufacturingSizeId").select2("data")!=null )
        {
            var ManufacturingSizeData = $("#ManufacturingSizeId").select2("data"); 
            ManufacturingSizeNameText= ManufacturingSizeData.text;
        }

        var ColourData = $("#ColourId").select2("data"); 
        var ColourNameText = ColourData.text;

        //alert(StandardSizeNameText);
        //alert(ManufacturingSizeNameText);

        $.ajax({
            url: "/CarpetMaster/GetCustomProductName",
            type: "POST",
            data: {ProductGroupName : ProductGroupNameText, StandardSizeName : StandardSizeNameText, ManufacturingSizeName : ManufacturingSizeNameText, ColourName: ColourNameText },
            dataType: "json",
            success: function (data) {
                $("#ProductCode").val(data.ProductName);
                $("#ProductName").val(data.ProductName);
            },
            error: function (result) {
                alert("No Records Found");
            },
            results: function (data, page) {
                return { results: data };
            }
        });
    }


    $("#ColourId").change(function () {
        //CreateProductName();
        CreateCustomProductName();
    });


    $("#StandardSizeId").change(function () {
        if ($("#StandardSizeId").val() == null || $("#StandardSizeId").val() == 0)
        {
            $("#ProductCode").val('');
        }
        else
        {
            //var GroupName = $("#ProductGroupName").val();
            //var data = $("#StandardSizeId").select2("data"); delete data.element;
            //var Size2 = data.text;
            ////var code = GroupName.replace(/\-/g, '').replace(/\ /g, '') + "-" + Size2.replace(/\ /g, '').replace(/\./g, '').replace(/\X/g, '').replace(/\`/g, '').replace(/\"/g, '');
            //var code = GroupName.replace(/\-/g, '').replace(/\ /g, '') + "-" + Size2.replace(/\ /g, '').replace(/\./g, '').replace(/\X/g, '').replace(/\`/g, '').replace(/\"/g, '').replace(/\'/g, '')  ;

            //$("#ProductCode").val(code);
            //$("#ProductName").val(code);
            //CreateProductName();
            //CreateCustomProductName();
        }

        var data = $("#StandardSizeId").select2("data"); delete data.element;
        var getsize = $("#StandardSizeId").val();
        var prodcategory=$('#ProductCategoryId').val();
        $.ajax({
            url: "/ProductSize/GetCommonSizes",
            type: "GET",
            data: { size: getsize,productcategoryid:prodcategory },
            dataType: "json",
            success: function (data) {

                $("#ManufacturingSizeId").select2('data', { id: data.ProductManufacturingSizeId, text: (data.ProductManufacturingSizeName == null ? "" : data.ProductManufacturingSizeName) });
                $("#FinishingSizeId").select2('data', { id: data.FinishingSizeId, text: (data.FinishingSizeName == null ? "" : data.FinishingSizeName) });
                if (data.ProductStencilId != null && data.ProductStencilId != 0)
                {
                    $('#StencilSizeId').select2('data',{id:data.ProductStencilId,text:(data.ProductStencilSizeName ==null?"" :data.ProductStencilSizeName)});
                }
                $('#MapSizeId').select2('data',{id:data.ProductMapSizeId,text:(data.ProductMapSizeName ==null?"" :data.ProductMapSizeName)})

                //$("#FinishingSizeId").select2('data', "/ComboHelpList/SetSingleSize/2");
                CreateCustomProductName();
            },
            error: function (result) {
                alert("No Records Found");
            },
            results: function (data, page) {
                return { results: data };
            }
        });

        $('#ManufacturingSizeId').change(function () {
            var parr = [];
            if ($('#FinishingSizeId').text() == "" || $('#FinishingSizeId').val() == null || $('#FinishingSizeId').val() == 0) {

                var cid = $("#ManufacturingSizeId").val();
                var selections = (JSON.stringify($('#ManufacturingSizeId').select2('data')));
                cdata = $('#ManufacturingSizeId').select2('data').text;
                $("#FinishingSizeId").select2('data', { id: cid, text: cdata });
            }
            
        });

        //CreateCustomProductName();

    })


    $('#ManufacturingSizeId').change(function () {
        var parr = [];
        if ($('#FinishingSizeId').text() == "" || $('#FinishingSizeId').val() == null || $('#FinishingSizeId').val() == 0) {

            var cid = $("#ManufacturingSizeId").val();
            var selections = (JSON.stringify($('#ManufacturingSizeId').select2('data')));
            cdata = $('#ManufacturingSizeId').select2('data').text;
            $("#FinishingSizeId").select2('data', { id: cid, text: cdata });
        }

        CreateCustomProductName();
    });


    function GetStandardSizeList(Id, GetAction, SetAction, placehold, multiple, length) {
        var geturl = GetAction;
        //The url we will send our get request to
        var attendeeUrl = GetAction;
        var pageSize = 20;
        var ProductShapeId = $("#ProductShapeId").val();
        Id.select2(
        {

            placeholder: placehold,
            //Does the user have to enter any data before sending the ajax request
            minimumInputLength: length,
            allowClear: true,
            multiple: multiple,
            ajax: {
                //How long the user has to pause their typing before sending the next request
                quietMillis: 150,
                //The url of the json service
                url: attendeeUrl,
                dataType: 'jsonp',
                //Our search term and what page we are on
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term,
                        ProductShapeId: ProductShapeId
                    };
                },
                results: function (data, page) {
                    //Used to determine whether or not there are more results available,
                    //and if requests for more data should be sent in the infinite scrolling
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            },
            initSelection: function (element, callback) {

                var xval = element.val();
                if (xval != 0) {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: SetAction,
                        data: { Ids: element.val() },
                        success: function (data) {
                            callback(data);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to Retrive Qty' + thrownError);
                        }
                    })
                }
                //callback([{ id: "1", text: "arpit" }, { id: "2", text: "akash" }]);
            }
        });
    }

    
    function GetProductShapeShortName(){
        $.ajax({
            cache:false,
            type: "POST",
            url:"@(Url.Action("GetProductShapeShortName"))",
            data:{ProductShapeId : $('#ProductShapeId').val()},
        success:function(data){
            //$("#PendingToPrint").text(data);
            ProductShapeShortName = data
        },
        error:function(xhr,ajaxOptions,thrownError){
            alert('Failed to Retrive Product Shape short name.'+thrownError);
        }
    })
    }
</script>
