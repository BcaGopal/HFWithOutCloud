
@model Model.ViewModels.ProductConsumptionLineViewModel
@using Core.Common

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Product : @Model.ProductName /  Quality : @Model.QualityName </span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "ProductConsumptionLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
            @Html.AntiForgeryToken()

            @Html.HiddenFor(model => model.BaseProductId)
            @Html.HiddenFor(m => m.BomDetailId)            
            @Html.HiddenFor(m => m.ProductName)
            @Html.HiddenFor(m => m.QualityName)
            @Html.HiddenFor(m => m.Weight)

            <div class="form-horizontal modal-body">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, "Product", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                <span id="status" class="text-danger"></span>
                            </div>                            
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductGroupName, "Product Group", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductGroupName, new { @class = "form-control col-xs-7 ", @readonly = true })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, "Shade", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7 " })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ConsumptionPer, "Percentage", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ConsumptionPer, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ConsumptionPer, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Qty, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                                <span id="Qtystatus" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.UnitName, "Unit", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.UnitName, new { @class = "form-control col-xs-7 ", @readonly = true })
                                @Html.ValidationMessageFor(model => model.UnitName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>




                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom left" name="Command:Edit" type="submit"><h2 style="margin:0px" id="submit"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>
                    <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>
                </div>
            </div>
        }
    </div>
</div>


<script type="text/javascript">
    CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetBomMaterial', '/ComboHelpList/SetSingleProducts', ' ', false, 3);
    CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', ' ', false, 0);
</script>


<script type="text/javascript">
    $(document).ready(function () {
        

        $("#ProductId").select2('focus');



        var id=@Model.BomDetailId;

        $('#delete','.modal-content').click(function (e) {

            if(id>0)
            {

                var url = '/ProductConsumptionLine/DeletePost';

                $('form#modform').attr('action',url);
                return;
            }
            else
            {

                return false;
            }
        })
    });

     

    $(function () {
        $("#ProductId").change(GetProductDetail);
        $("#ConsumptionPer").keyup(Calculation);
    })

    //$("#ProductId").change(function(){
            
    //    if($('#BomDetailId').val()!=0)
    //        CheckForValidationInEdit.call();
    //    else
    //        CheckForValidation.call();
    //});

    $(":submit").on("click", function () {
        var check;
        if($('#BomDetailId').val()!=0)
           check=  CheckForValidationInEdit.call();
        else
            check=  CheckForValidation.call();


        if($('#Qty').val()==0) 
        {
            $("#Qtystatus").text("Qty can't be 0");
            return false;
        }
            
        
        
        return check;
    });


    function GetProductDetail() {
        var ProcessProgress = $("#Product detail loading progress");
        ProcessProgress.show();
        if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
            $.ajax({
                async:false,
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetProductDetailJson"))",
                data: { ProductId: $("#ProductId").val() },
                success: function (data) {
                    $("#ProductGroupName").val(data[0].ProductGroupName);
                    $("#UnitName").val(data[0].UnitName);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Product details.' + thrownError);
                    ProcessProgress.hide();
                }
            });
        }
    }


        function CheckForValidation() {
            if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
                var bol;
                $.ajax({
                    async:false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("CheckForValidation"))",
                    data: { ProductId: $("#ProductId").val(), Dimension1Id: $("#Dimension1Id").val(), BaseProductId: $("#BaseProductId").val() },
                success: function (data) {
                    var status = data;
                    if (data.returnvalue) {
                        $("#status").text("Product And Shade combination already exists");
                        bol=false;
                    }
                    else{
                        $("#status").text(" ");
                        bol=true;
                    }
                        
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to Check Validation.' + thrownError);
                }
                });
                return bol;
        }

        }


        function CheckForValidationInEdit() {
            if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
                var bol;
                $.ajax({
                    async:false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("CheckForValidationinEdit"))",
                    data: { ProductId: $("#ProductId").val(), Dimension1Id: $("#Dimension1Id").val(), BaseProductId: $("#BaseProductId").val(), BomDetailId: $("#BomDetailId").val() },
                success: function (data) {
                    var status = data;
                    if (data.returnvalue){
                        $("#status").text("Product And Shade combination already exists");
                        bol=false;
                    }
                    else{
                        $("#status").text(" ");
                        bol=true;
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to Check Validation.' + thrownError);
                }
                });
                return bol;
        }

        }


        function Calculation(){
            var weight = @Model.Weight;


            if ($("#ConsumptionPer").val() != 0 && $("#ConsumptionPer").val() != null && $("#ConsumptionPer").val() != '')
            {
                var Qty = +(Math.round((weight * $("#ConsumptionPer").val() / 100) + "e+3")  + "e-3")
                $("#Qty").val(Qty);
            }
        }

    
    </script>

   