
@model Model.ViewModels.DesignConsumptionLineViewModel
@using Core.Common

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Design : @Model.DesignName /  Quality : @Model.QualityName / @Model.ContentType </span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "DesignConsumptionLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.BaseProductId)
                @Html.HiddenFor(m => m.BomDetailId)
                @Html.HiddenFor(m => m.DesignName)
                @Html.HiddenFor(m => m.DesignId)
                @Html.HiddenFor(m => m.QualityName)
                @Html.HiddenFor(m => m.ColourName)
                @Html.HiddenFor(m => m.Weight)
                @Html.HiddenFor(m => m.ContentType)
                @Html.HiddenFor(m => m.BaseProcessId)

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, "Product", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                <span id="status" class="text-danger"></span>
                            </div>                            
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductGroupName, "Product Group", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductGroupName, new { @class = "form-control col-xs-7 ", @readonly = true })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, "Shade", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7 " })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ConsumptionPer, "Percentage", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ConsumptionPer, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ConsumptionPer, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Qty, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                                <span id="Qtystatus" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.UnitName, "Unit", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.UnitName, new { @class = "form-control col-xs-7 ", @readonly = true })
                                @Html.ValidationMessageFor(model => model.UnitName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom left" name="Command:Edit" type="submit"><h2 style="margin:0px" id="submit"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>
                    <small style="text-align:center;font-weight:bold">@ViewBag.LastTransaction</small>
                    @*@if (Model.ContentType == "Main Contents")
                    { 
                        <small style="text-align:center;font-weight:bold">@ViewBag.LastTransaction</small>
                    }*@
                    <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>
                </div>
            </div>
        }
    </div>
</div>


<script type="text/javascript">
    var ContentType = $("#ContentType").val();

    if (ContentType == "Main Contents")
    {
        CustomSelectFunction($("#ProductId"), '/DesignConsumptionLine/GetFaceContentProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0,$("#DesignId",'.modal-body').val());
    }
    else if (ContentType == "Other Contents")
    {
        CustomSelectFunction($("#ProductId"), '/DesignConsumptionLine/GetOtherContentProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0,$("#DesignId",'.modal-body').val());
    }
    else
    {
        CustomSelectFunction($("#ProductId"), '/DesignConsumptionLine/GetOverTuftContentProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0,$("#DesignId",'.modal-body').val());
    }
    //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetBomMaterial', '/ComboHelpList/SetSingleProducts', ' ', false, 3);
    CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', ' ', false, 0);
</script>


<script type="text/javascript">
    $(document).ready(function () {
        
        if ($("#ProductId").val() != 0 && $("#ProductId").val() != null)
        {
            $("#ProductId").select2('focus');
        }
        else{
            $("#Dimension1Id").select2('focus');
        }
        Calculation();


        var id=@Model.BomDetailId;

        $('#delete','.modal-content').click(function (e) {

            if(id>0)
            {

                var url = '/DesignConsumptionLine/DeletePost';

                $('form#modform').attr('action',url);
                return;
            }
            else
            {

                return false;
            }
        })
    });

     

    $(function () {
        $("#ProductId").change(GetProductDetail);
        $("#ConsumptionPer").keyup(Calculation);
    })

    //$("#ProductId").change(function(){
            
    //    if($('#BomDetailId').val()!=0)
    //        CheckForValidationInEdit.call();
    //    else
    //        CheckForValidation.call();
    //});

    $(":submit").on("click", function () {




        var check;
        if($('#BomDetailId','.modal-body').val()!=0)
           check=  CheckForValidationInEdit.call();
        else
            check=  CheckForValidation.call();

        if (check != false)
        {
            if($('#Qty','.modal-body').val()==0) 
            {
                $("#Qtystatus").text("Qty can't be 0");
                return false;
            }
            if (IsProductContent() == true)
            {
                check=  CheckForConsumptionValidation.call();
            }
        }
        return check;
    });


    function GetProductDetail() {
        var ProcessProgress = $("#Product detail loading progress");
        ProcessProgress.show();
        if ($("#ProductId",'.modal-body').val() != 0 && $("#ProductId",'.modal-body').val() != null) {
            $.ajax({
                async:false,
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetProductDetailJson"))",
                data: { ProductId: $("#ProductId",'.modal-body').val() },
                success: function (data) {
                    $("#ProductGroupName",'.modal-body').val(data[0].ProductGroupName);
                    $("#UnitName",'.modal-body').val(data[0].UnitName);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Product details.' + thrownError);
                    ProcessProgress.hide();
                }
            });
        }
    }


        function CheckForValidation() {
            if ($("#ProductId",'.modal-body').val() != 0 && $("#ProductId",'.modal-body').val() != null) {
                var bol;
                $.ajax({
                    async:false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("CheckForValidation"))",
                    data: { ProductId: $("#ProductId",'.modal-body').val(), Dimension1Id: $("#Dimension1Id",'.modal-body').val(), BaseProductId: $("#BaseProductId",'.modal-body').val(), BaseProcessId: $("#BaseProcessId",'.modal-body').val() },
                success: function (data) {
                    var status = data;
                    if (data.returnvalue) {
                        $("#status").text("Product And Shade combination already exists");
                        bol=false;
                    }
                    else{
                        $("#status").text(" ");
                        bol=true;
                    }
                        
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to Check Validation.' + thrownError);
                }
                });
                return bol;
        }

        }


        function CheckForValidationInEdit() {
            if ($("#ProductId",'.modal-body').val() != 0 && $("#ProductId",'.modal-body').val() != null) {
                var bol;
                $.ajax({
                    async:false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("CheckForValidationinEdit"))",
                    data: { ProductId: $("#ProductId",'.modal-body').val(), Dimension1Id: $("#Dimension1Id",'.modal-body').val(), BaseProductId: $("#BaseProductId",'.modal-body').val(), BomDetailId: $("#BomDetailId",'.modal-body').val() , BaseProcessId: $("#BaseProcessId",'.modal-body').val()},
                success: function (data) {
                    var status = data;
                    if (data.returnvalue){
                        $("#status").text("Product And Shade combination already exists");
                        bol=false;
                    }
                    else{
                        $("#status").text(" ");
                        bol=true;
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to Check Validation.' + thrownError);
                }
                });
                return bol;
        }

        }


        function Calculation(){
            var weight = @Model.Weight;

            if ($("#ConsumptionPer",'.modal-body').val() != 0 && $("#ConsumptionPer",'.modal-body').val() != null && $("#ConsumptionPer",'.modal-body').val() != '')
            {
                var Qty = +(Math.round((weight * $("#ConsumptionPer",'.modal-body').val() / 100) + "e+3")  + "e-3")
                $("#Qty",'.modal-body').val(Qty);
            }
        }



    function CheckForConsumptionValidation() {
        var TotalQty = 0
        var TotalQtyPer = 0
        if ($("#ProductId",'.modal-body').val() != 0 && $("#ProductId",'.modal-body').val() != null && $("#Weight",'.modal-body').val() != 0 && $("#Weight",'.modal-body').val() != null ) {
            var bol;
            $.ajax({
                async:false,
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetConsumptionTotalQty"))",
                data: { BaseProductId: $("#BaseProductId",'.modal-body').val(), TotalWeight: $("#Weight",'.modal-body').val(), BomQty: $("#Qty",'.modal-body').val(), BomDetailId: $("#BomDetailId",'.modal-body').val(), BaseProcessId: $("#BaseProcessId",'.modal-body').val() },
            success: function (data) {
                TotalQty = data;
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to Check Validation.' + thrownError);
            }
            });

            TotalQtyPer = (parseFloat(TotalQty) + parseFloat($("#Qty",'.modal-body').val())) * 100 / parseFloat($("#Weight",'.modal-body').val());
            if (TotalQtyPer > 100)
            {
                    $("#Qtystatus").text("Consumption is Exceeding 100%.");
                    bol=false;
            }
            else{
                $("#Qtystatus").text(" ");
                bol=true;
            }
        return bol;
        }}


    function IsProductContent() {
        var bol;
        if ($("#ProductId",'.modal-body').val() != 0 && $("#ProductId",'.modal-body').val() != null ) {
            var bol;
            $.ajax({
                async:false,
                cache: false,
                type: "POST",
                url: "@(Url.Action("IsProductContent"))",
                data: { BaseProductId: $("#BaseProductId",'.modal-body').val(), ProductId: $("#ProductId",'.modal-body').val()},
            success: function (data) {
                bol = data;
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to Check Validation.' + thrownError);
            }
        });

        return bol;
    }}
</script>

   