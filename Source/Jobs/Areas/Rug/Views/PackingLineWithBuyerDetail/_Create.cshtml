@model Model.ViewModels.PackingLineViewModel
@using Core.Common


<style type="text/css">
    #image background-image {
        max-width: 100%;
        max-height: 100%;
    }


    #Print, #PrintOnlyQR {
        color: black;
        display: inline-block;
        text-decoration: none;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Packing No : @ViewBag.DocNo</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "PackingLineWithBuyerDetail", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
            @Html.ValidationLog((string)TempData["CSEXCL"])
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.PackingLineId)
            @Html.HiddenFor(model => model.PackingHeaderId)
            @Html.HiddenFor(model => model.DealUnitId)
            @Html.HiddenFor(model => model.DealUnitName)
            @Html.HiddenFor(model => model.FromProcessId)
            @Html.HiddenFor(m => m.UnitId)
            @Html.HiddenFor(m => m.UnitConversionMultiplier)
            @Html.HiddenFor(m => m.ProductUidId)
            @Html.HiddenFor(m => m.SaleOrderNo)
            @Html.HiddenFor(m => m.ProductName)
            @Html.HiddenFor(m => m.GodownId)
            @Html.HiddenFor(m => m.DivisionId)
            @Html.HiddenFor(m => m.DocTypeId)
            @Html.HiddenFor(m => m.GodownName)
            @Html.HiddenFor(m => m.ImageFolderName)
            @Html.HiddenFor(m => m.ImageFileName)
            @Html.HiddenFor(m => m.IsSample)
            @Html.HiddenFor(m => m.CreatedBy)
            @Html.HiddenFor(m => m.CreatedDate)
            @Html.HiddenFor(m => m.CreateExtraSaleOrder)
            @Html.HiddenFor(m => m.PackingShipMethodId)
            @Html.HiddenFor(m => m.DeliveryOrderShipMethodId)
            @Html.HiddenFor(m => m.OtherBuyerDeliveryOrders)
            @Html.HiddenFor(m => m.PartyProductUid)
            @Html.HiddenFor(m => m.DimensionUnitDecimalPlaces)
            @Html.HiddenFor(m => m.DimensionUnitDecimalPlaces)


            <div class="form-horizontal modal-body">

                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                <div>
                    <div class="row">
                        <div class="col-md-9">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.StockInId, "Stock In", new { @class = "control-label col-xs-4" })
                                        <div class="col-xs-7">
                                            @Html.TextBoxFor(model => model.StockInId, new { @class = "form-control col-xs-7 scannerIP" })
                                            @Html.ValidationMessageFor(model => model.StockInId)
                                            <span id="ProductUidValidation"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>


                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ProductUidName, "Barcode", new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.ProductUidName, new { @class = "form-control col-xs-7 scannerIP" })
                                                @Html.ValidationMessageFor(model => model.ProductUidName)
                                                <span id="ProductUidValidation"></span>
                                            </div>
                                        </div>
                                    </div>


                                    @Html.LabelFor(model => model.IsShowAllProducts, "Is Show All Products ?")
                                    <div>
                                        @Html.CheckBoxFor(m => m.IsShowAllProducts, new { id= "FlagIsShowAllProducts", @class = "checkbox col-xs-1" })
                                        @Html.ValidationMessageFor(model => model.IsShowAllProducts)
                                    </div>


                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ProductId, new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(a => a.ProductId, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.ProductId)
                                                <a style="display:none;cursor:pointer" id="ExtraPO"> Click Here</a>

                                                @*<a data-modal href='/PackingLineWithBuyerDetail/SetFlagForExtraSaleOrder/@Model.PackingHeaderId' style="display:none" id="AddToExisting"> Click Here</a>*@
                                                @*<a data-modal href='/PackingLineWithBuyerDetail/SetFlagForExtraSaleOrder/345' id="AddToExisting"> Click</a>*@
                                                @*<a data-modal="" data-toggle="tooltip" href="/PackingLineWithBuyerDetail/SetFlagForExtraSaleOrder/345" >Click </a>*@
                                                @*<a class="toolbar" data-modal="" data-toggle="tooltip" href="/PackingLineWithBuyerDetail/CreateLine/3811" id="AddToExisting" title="Add New">Add New Row </a>*@
                                                <span id="ProductValidation"></span>
                                            </div>

                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BuyerSku, "Buyer Sku", new { @class = "control-label col-xs-4 " })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.BuyerSku, new { @class = "form-control col-xs-7 required" })
                                                @Html.ValidationMessageFor(model => model.BuyerSku, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BuyerSpecification, (Model.ProductBuyerSettings.BuyerSpecificationDisplayName != "" ? Model.ProductBuyerSettings.BuyerSpecificationDisplayName : "Specification"), new { @class = "control-label col-xs-4 " })
                                            @Html.HiddenFor(m => m.ProductBuyerSettings.BuyerSpecificationDisplayName)
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.BuyerSpecification, new { @class = "form-control col-xs-7 required" })
                                                @Html.ValidationMessageFor(model => model.BuyerSpecification, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BuyerSpecification1, (Model.ProductBuyerSettings.BuyerSpecification1DisplayName != "" ? Model.ProductBuyerSettings.BuyerSpecification1DisplayName : "Specification-1"), new { @class = "control-label col-xs-4 " })
                                            @Html.HiddenFor(m => m.ProductBuyerSettings.BuyerSpecification1DisplayName)
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.BuyerSpecification1, new { @class = "form-control col-xs-7 required" })
                                                @Html.ValidationMessageFor(model => model.BuyerSpecification1, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BuyerSpecification2, (Model.ProductBuyerSettings.BuyerSpecification2DisplayName != "" ? Model.ProductBuyerSettings.BuyerSpecification2DisplayName : "Specification-2"), new { @class = "control-label col-xs-4 " })
                                            @Html.HiddenFor(m => m.ProductBuyerSettings.BuyerSpecification2DisplayName)
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.BuyerSpecification2, new { @class = "form-control col-xs-7 required" })
                                                @Html.ValidationMessageFor(model => model.BuyerSpecification2, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BuyerSpecification3, (Model.ProductBuyerSettings.BuyerSpecification3DisplayName != "" ? Model.ProductBuyerSettings.BuyerSpecification3DisplayName : "Specification-3"), new { @class = "control-label col-xs-4 " })
                                            @Html.HiddenFor(m => m.ProductBuyerSettings.BuyerSpecification3DisplayName)
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.BuyerSpecification3, new { @class = "form-control col-xs-7 required" })
                                                @Html.ValidationMessageFor(model => model.BuyerSpecification3, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ProductInvoiceGroupId, "Invoice Group", new { @class = "control-label col-xs-4 " })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.ProductInvoiceGroupId, new { @class = "form-control col-xs-7 required" })
                                                @Html.ValidationMessageFor(model => model.ProductInvoiceGroupId, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Length, "Width", new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.Length, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.Length)
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Width, "Length", new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.Width, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.Width)
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.BaleNo, new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.BaleNo, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.BaleNo)
                                                <span id="BaleNoValidation"></span>
                                            </div>

                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor( model => model.SaleOrderLineId,  new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.DropDownList("SaleOrderLineId", Enumerable.Empty<SelectListItem>(), new { @class = "form-control col-xs-7 height" })
                                            </div>
                                        </div>
                                    </div>
                                </div>


                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Specification, new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.Specification)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.LotNo , new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.LotNo)
                                            </div>
                                        </div>
                                    </div>

                                </div>


                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Qty, new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.Qty, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.Qty)
                                                <span id="QtyValidation"></span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.DealQty, "Deal Qty (" + @Html.DisplayFor(model => model.DealUnitName) + ")", new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control col-xs-7", @readonly = "readonly" })
                                                @Html.ValidationMessageFor(model => model.DealQty)
                                                <span id="DealQtyValidation"></span>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.GrossWeight, new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.GrossWeight, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.GrossWeight)
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.NetWeight, new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.NetWeight, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.NetWeight)
                                            </div>
                                        </div>
                                    </div>


                                </div>

                                <div class="row">

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.Remark, new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.Remark, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.Remark)
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.RateRemark, new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.RateRemark, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.RateRemark)
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.SaleDeliveryOrderLineId, new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.DropDownList("SaleDeliveryOrderLineId", Enumerable.Empty<SelectListItem>(), new { @class = "form-control col-xs-7 height" })
                                                <span id="DeliveryOrderValidation" class="text-danger"></span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.SealNo, new { @class = "control-label col-xs-4" })
                                            <div class="col-xs-7">
                                                @Html.TextBoxFor(model => model.SealNo, new { @class = "form-control col-xs-7" })
                                                @Html.ValidationMessageFor(model => model.SealNo)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>






                        <div class="col-md-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="row">
                                        <div style="width: 300px; height: 250px; border-style: solid; border-width: 1px; border-color: rgb(210, 206, 206); background-repeat: no-repeat; background-position: center; background-size: inherit; ">
                                            @*<img src="~/Uploads/@(Model.ImageFolderName)/Medium/@(Model.ImageFileName).jpg" alt="...">*@
                                            <a id="imagelink" href="#" target="_blank">
                                                <img id="image" style="max-width:inherit; position: relative; max-height: 100%; margin-left: 25%; margin-right: 25%;" />
                                            </a>
                                            @*<img src="~/Uploads/cb8c9e85-f996-487c-a1b8-b6e21f455a28/Medium/78979_499685ff-1f7a-4ebd-99e0-d04ea14045c3.jpg">*@
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" id="save" name="Command:Edit" type="submit"><h2 style="margin:0px" id="submit"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>
                        @Html.ActionLink(" ", "Print", "PackingLineWithBuyerDetail", new { id = @Model.PackingHeaderId }, new { @class = "glyphicon glyphicon-print left Print", @title = "Print", @style = "font-size:2.2em", @data_toggle = "tooltip", target = "_blank", id = "Print" })
                        <span class="badge left" id="PendingToPrint" style="background-color:red;color:white"></span>
                        
                        @Html.ActionLink(" ", "PrintOnlyQRCode", "PackingLineWithBuyerDetail", new { id = @Model.PackingHeaderId }, new { @class = "glyphicon glyphicon-barcode left Print", @title = "Print Only QR Code", @style = "font-size:2.2em", @data_toggle = "tooltip", target = "_blank", id = "PrintOnlyQR" })
                        <span class="badge left" id="PendingToPrint" style="background-color:red;color:white"></span>
                        
                    }
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>
                    }
                </div>
            </div>
        }
    </div>
</div>

<script>
    $(document).ready(function () {
        var DocID = $('#PackingHeaderId').val();
        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 3);
        //CustomSelectFunction($("#ProductId"), '/PackingLineWithBuyerDetail/GetCustomProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 3);
        CustomSelectFunction($("#ProductInvoiceGroupId"), '/ComboHelpList/GetProductInvoiceGroupsDivisionWise', '/ComboHelpList/SetSingleProductInvoiceGroup', ' ', false, 0);
        CustomSelectFunctionForStockIn($("#StockInId"), '/PackingLineWithBuyerDetail/GetStockInForProduct', '/ComboHelpList/SetSingleStockIn', ' ', false, 0,DocID,$("#ProductId").val(), null, null, null, null);

        @*var BuyerSku = "@ViewBag.BuyerSkuList";
        $("#BuyerSku").select2({ tags: BuyerSku.split(',') });

        var BuyerSpecification = "@ViewBag.BuyerSpecificationList";
        $("#BuyerSpecification").select2({ tags: BuyerSpecification.split(',') });

        var BuyerSpecification1 = "@ViewBag.BuyerSpecification1List";
        $("#BuyerSpecification1").select2({ tags: BuyerSpecification1.split(',') });

        var BuyerSpecification2 = "@ViewBag.BuyerSpecification2List";
        $("#BuyerSpecification2").select2({ tags: BuyerSpecification2.split(',') });

        var BuyerSpecification3 = "@ViewBag.BuyerSpecification3List";
        $("#BuyerSpecification3").select2({ tags: BuyerSpecification3.split(',') });*@


        //Preventing and Duplicate DocCheck Double Click Post




        var IsSaved=false;
        var ValidationCount=0;

        $('#modform').bind('submit',function(event){
            if(!IsSaved)
            {               

                if(!ValidateData())
                {
                    return false;
                }
                else if($(document.activeElement).hasClass("scannerIP"))
                {                    
                    var NextElem = $('#ProductUidName').parents('.col-md-6').next().find('input[type=text].form-control,select.form-control').filter(':visible:first');

                    if(NextElem.hasClass('select2-offscreen'))
                    {
                        $(NextElem).select2("focus");
                    }
                    else
                    {
                        $(NextElem).focus();
                    }

                    event.stopImmediatePropagation();
                    return false;
                }
                IsSaved=true;
                $('button:submit').attr('disabled','disabled');
                return IsSaved;
            }
            else
            {
                return false;
            }


        });


        function ValidateData() {
            var ValidationMessage = "";

            //Client Side Validaion.....

            return  (ValidationMessage=="");

        }


        //End For Double Click Post Validation



    });
</script>





<script type="text/javascript">
    $(document).ready(function () {
        $("#ProductUidName").focus();
        var PackingLineId = @Model.PackingLineId;
        if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
            CreateSaleDeliveryOrderLineIdList()
            CreateSaleOrderLineIdList()
            //$("#image").attr('src', '/Uploads/cb8c9e85-f996-487c-a1b8-b6e21f455a28/Medium/78979_499685ff-1f7a-4ebd-99e0-d04ea14045c3.jpg');
            AssignImage();
        }
        AssignPendingToPrint();



        if (PackingLineId != 0 && PackingLineId != null)
        {
            $("#ProductUidName").prop('readonly', true);
            $('#ProductId').prop('readonly', true);
            $("#Qty").prop('readonly', true);
            $('#ProductInvoiceGroupId').prop('readonly', true);
            $('#StockInId').attr('readonly','true');
            $("#Length").focus() ;
        }
    })

    var DocID = $('#PackingHeaderId').val();
    var isShowAllProducts = $("#FlagIsShowAllProducts").is(":checked");
    CustomSelectFunctionForJobOrderLine($("#ProductId"), '/PackingLineWithBuyerDetail/GetCustomProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0, DocID,isShowAllProducts);


    function CustomSelectFunctionForJobOrderLine(ElementId, GetAction, SetAction, placehold, IsMultiple,MinLength,filter,isShowAllProducts) {
        var geturl = GetAction;
        //The url we will send our get request to
        var attendeeUrl = GetAction;
        var pageSize = 20;

        ElementId.select2(
        {

            placeholder: placehold,
            //Does the user have to enter any data before sending the ajax request
            minimumInputLength: MinLength,
            allowClear: true,
            multiple: IsMultiple,
            ajax: {

                //How long the user has to pause their typing before sending the next request
                quietMillis: 500,
                //The url of the json service
                url: attendeeUrl,
                dataType: 'jsonp',
                //Our search term and what page we are on
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term,
                        filter:filter,
                        isShowAllProducts:isShowAllProducts,
                    };
                },
                results: function (data, page) {
                    //Used to determine whether or not there are more results available,
                    //and if requests for more data should be sent in the infinite scrolling
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            },
            initSelection: function (element, callback) {

                var xval = element.val();
                if (xval != 0)
                {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: SetAction,
                        data: { Ids: element.val() },
                        success: function (data) {
                            callback(data);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to Retrive Qty' + thrownError);
                        }
                    })
                }
                //callback([{ id: "1", text: "arpit" }, { id: "2", text: "akash" }]);
            }
        });
    }

    $("#save").click(function () 
    {
        if ($('#ProductId').select2('data') != null) {
            $("#ProductName").val($('#ProductId').select2('data').text);
        }
        else {
            $("#Product").val("");
        }
        $("#SaleOrderNo").val($('option:selected', $("#SaleOrderLineId")).text());
        //$("#ProductUidName").focus() ;
    });



    $("#StockInId").change(function(){
        Validate_StockIn();
    });

    function Validate_StockIn() {
        var ProcessProgress = $("#Stock In detail loading progress");
        ProcessProgress.show();
        if ($("#StockInId").val() != "")
        {
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetStockInDetailJson"))",
                data: { StockInId: $("#StockInId").val()},
            success: function (data) {
                if (data != null)
                {
                    $("#StockInBalanceQty").val(data.BalanceQty);
                    $("#Qty").val(data.BalanceQty);
                    $("#LotNo").val(data.LotNo);
                    $("#ProductId").select2('data', { id: data.ProductId, text: data.ProductName});
                    if (data.FromProcessId != null)
                    {
                        $("#FromProcessId").select2('data', { id: data.FromProcessId, text: data.FromProcessName});
                    }
                    else{
                        $("#FromProcessId").select2('data', { id: '', text: ''});
                    }


                    if (data.ProductUidId != null)
                    {
                        $("#ProductUidId").val(data.ProductUidId);
                        $("#ProductUidName").val(data.ProductUidName);
                    }
                            
                    $("#ProductUidName").attr('readonly', 'true');
                    $("#ProductId").attr('readonly', 'true');
                    $("#Dimension1Id").attr('readonly', 'true');
                    $("#Dimension2Id").attr('readonly', 'true');
                    $("#Dimension3Id").attr('readonly', 'true');
                    $("#Dimension4Id").attr('readonly', 'true');
                    $("#FromProcessId").attr('readonly', 'true');
                    //GetProductDetail()
                    Validate_Product();
                }
                else{
                    $("#StockInBalanceQty").val(0);
                    $("#LotNo").val("");
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve Stock In details.' + thrownError);
                ProcessProgress.hide();
            }
        });

    }
    else {
            $("#StockInBalanceQty").val(0);
            $("#LotNo").val("");

            $("#ProductId").removeAttr('readonly');
            $("#Dimension1Id").removeAttr('readonly');
            $("#Dimension2Id").removeAttr('readonly');
            $("#Dimension3Id").removeAttr('readonly');
            $("#Dimension4Id").removeAttr('readonly');
        }
    }


    $("#ProductId").change(function(){
        CustomSelectFunctionForStockIn($("#StockInId"), '/StockIssueLine/GetStockInForProduct', '/ComboHelpList/SetSingleStockIn', ' ', false, 0,$('#StockHeaderId','.modal-body').val(),$("#ProductId").val(),null,null,null,null);
    });



    $("#Print").click(function () {
        $.ajax({
            cache:false,
            type: "POST",
            url:"/PackingLineWithBuyerDetail/DisposeSessionPrintVariable",
            data: { PackingHeaderId: $("#PackingHeaderId").val()},
            success:function(data){
            },
            error:function(xhr,ajaxOptions,thrownError){
                alert('Failed to Dispose Session Variables'+thrownError);
            }
        })
        AssignPendingToPrint();
    });


    $(function () {
        //$("#DealQty,#Qty").keyup(Calculation);

        $("#DealQty,#Qty").keyup(function(){
            QtyValidation();
            Calculation();
        });


        $("#ProductUidName").change(function(){
            $("#CreateExtraSaleOrder").val(false);
            Validate_ProductUid();
            AssignLastProduct();
        });
        $("#ProductId").change(function(){
            $("#CreateExtraSaleOrder").val(false);
            Validate_Product();
            AssignLastProduct();
        });
        $("#ProductInvoiceGroupId").change(GetBaleNo);
        $("#ProductUidName").focusout(AssignLastProduct);
    })




    function Validate_ProductUid() {
        var ProcessProgress = $("#Product Uid detail loading progress");
        ProcessProgress.show();
        if ($("#ProductUidName").val() != "") {
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetProductUIDDetailJson"))",
                data: { ProductUIDNo: $("#ProductUidName").val(),PackingHeaderId: $("#PackingHeaderId").val()},
                success: function (data) {
                    if (Object.keys(data).length != 0) {                        
                        if(data[0].Status=="Pack")
                        {
                            $("#ProductUidValidation").text("Bar Code Already Packed");
                        }
                        else 
                        {
                            $("#ProductUidValidation").text("");
                            $("#ProductId").val(data[0].ProductId);
                            $("#ProductUidId").val(data[0].ProductUidId);
                            $("#ProductId").select2("data", { id: data[0].ProductId, text: data[0].ProductName });
                            $("#FromProcessId").val(data[0].PrevProcessId);
                            $("#Qty").val(1);
                            $("#DivisionId").val(data[0].DivisionId);

                            $("#Qty").prop('readonly', true);
                            //$("#UnitConversionMultiplier").val(data[0].NField1);
                            //Calculation();

                            IsThirdBackingProcessDone();
                            Validate_Product();

                            $('#ProductId').prop('readonly', true);
                            $("#Length").focus();
                            $("#Length").select();
                        }
                    }
                    else {
                        $("#ProductUidId").val("");
                        $("#ProductId").val("");
                        $("#ProductId").select2("data", { id: "", text: "" });
                        $("#Qty").val("");
                        $("#FromProcessId").val("");
                        $("#ProductUidValidation").text("Invalid Bar Code.");
                        $("#SaleOrderLineId").val("");
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve product Uid details.' + thrownError);
                    ProcessProgress.hide();
                }
            });

        }
        else {
            $("#ProductUidId").val("");
            $("#Qty").prop('readonly', false);
            $('#ProductId').prop('readonly', false);
        }
    }

    function AssignLastProduct(){
        //alert($("#PackingHeaderId").val());
        //alert($("#ProductUidId").val());



        //if (($("#ProductId").val() == null || $("#ProductId").val() == 0) && ($("#ProductUidId").val() == null || $("#ProductUidId").val() == 0) && ($("#ProductUidName").val() == null || $("#ProductUidName").val() == 0) )

        if ($("#PackingHeaderId").val() != null  )
        {
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetLastProduct"))",
                data: { PackingHeaderId: $("#PackingHeaderId").val()},
                success: function (data) {
                    if(data.length!=0 && data[0])
                    {
                        //$("#ProductId").select2("data", { id: data[0].ProductId, text: data[0].ProductName });
                        //$("#ProductName").val(data[0].ProductName);
                        //Validate_Product();
                        //Calculation();
                        $("#Remark").val(data[0].Remark);
                        $("#SealNo").val(data[0].SealNo);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Last Product .' + thrownError);
                    ProcessProgress.hide();
                }
            });
        }
    }

    function Validate_Product() {
        var ProcessProgress = $("#Product detail loading progress");
        ProcessProgress.show();

        $('button:submit').attr('disabled','disabled');

        if ($("#ProductUid").val() != 0 && $("#ProductUid").val() != null && $("#ProductUid").val() != "") {
            //$('#ProductId').select2().enable(false);
        }
        $("#DeliveryOrderValidation").text("");

        if ($("#ProductId").val() != 0 && $("#ProductId").val() != null && $("#ProductId").val() != "") {

            //$("#Qty").val(1);

            $.ajax({
                cache: false,
                async: false,
                type: "POST",
                url: "@(Url.Action("GetProductDetailJson"))",
                data: { ProductId: $("#ProductId").val(),PackingHeaderId: $("#PackingHeaderId").val() },
                success: function (data) {
                    //alert("Yes");
                    CreateSaleDeliveryOrderLineIdList()
                    CreateSaleOrderLineIdList();
                    $("#UnitId").val(data[0].UnitId);
                    $("#ImageFolderName").val(data[0].ImageFolderName);
                    $("#ImageFileName").val(data[0].ImageFileName);
                    $("#IsSample").val(data[0].IsSample);

                    $("#UnitConversionMultiplier").val(data[0].NField1);
                    Calculation();


                    if ($("#IsSample").val() == "false")
                    {
                        CustomSelectFunction($("#ProductInvoiceGroupId"), '/ComboHelpList/GetProductInvoiceGroupsDivisionWise', '/ComboHelpList/SetSingleProductInvoiceGroup', ' ', false, 0);
                    }
                    else{
                        CustomSelectFunction($("#ProductInvoiceGroupId"), '/ComboHelpList/GetProductInvoiceGroupsDivisionWiseExcludeSample', '/ComboHelpList/SetSingleProductInvoiceGroup', ' ', false, 0);
                    }


                    if (data[0].ProductInvoiceGroupId != null && data[0].ProductInvoiceGroupId != '')
                    {
                        $("#ProductInvoiceGroupId").select2("data", { id: data[0].ProductInvoiceGroupId, text: data[0].ProductInvoiceGroupName });
                    }



                    if ((data[0].ProductInvoiceGroupId != null && data[0].ProductInvoiceGroupId != '') || ($("#SaleOrderLineId").val()!= null && $("#SaleOrderLineId").val() != 0))
                    {
                        //alert("gETBal");
                        $("#ProductInvoiceGroupId").select2("data", { id: data[0].ProductInvoiceGroupId, text: data[0].ProductInvoiceGroupName });
                        GetBaleNo();
                    }
                    else if (1==1)
                    {
                        GetBaleNo();
                    }
                    else{
                        //alert("Bal");
                        $("#BaleNo").val(1);
                    }

                    AssignImage();
                    GetProductCustomDetail();
                    GetProductDimensions();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Product Detail.' + thrownError);
                    ProcessProgress.hide();
                }
            });


            @*if ($("#ProductId").val() != 0 && $("#ProductId").val() != null )
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProductAreaJson"))",
                    data: { ProductId: $("#ProductId").val(), PackingHeaderId: $("#PackingHeaderId").val() },
                    success: function (data) {
                        $("#UnitConversionMultiplier").val(data[0].ProductArea);
                        Calculation();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Area for Product.' + thrownError);
                        ProcessProgress.hide();
                    }
                });
            }*@







            if ($("#ProductUidId").val() == 0 || $("#ProductUidId").val() == null || $("#ProductUidId").val() == "") {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProductPrevProcess"))",
                    data: { ProductId: $("#ProductId").val(), GodownId: $("#GodownId").val(), DocTypeId: $("#DocTypeId").val() },
                    success: function (data) {
                        $("#FromProcessId").val(data[0].ProcessId);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        ProcessProgress.hide();
                    }
                });
            }
        }
        else {

            $("#UnitConversionMultiplier").val(0);
            $("#UnitId").val("");
            $("#Specification").val("");
            $("#Qty").val("");
            $("#DealQty").val("");
            $("#SaleOrderLineId").html('');
            $("#ProductInvoiceGroupId").select2("data", { id: "", text: "" });
        }
        $('button:submit').removeAttr('disabled');
    }


    function GetProductCustomDetail() {
        var ProcessProgress = $("#Product Custom detail loading progress");
        ProcessProgress.show();
        if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetProductCustomDetailJson"))",
                data: { ProductId: $("#ProductId").val(), PackingHeaderId: $("#PackingHeaderId").val() },
            success: function (data) {
                if (data.length > 0)
                {
                    $("#BuyerSku").val(data[0].BuyerSku);
                    $("#BuyerSpecification").val(data[0].BuyerSpecification);
                    $("#BuyerSpecification1").val(data[0].BuyerSpecification1);
                    $("#BuyerSpecification2").val(data[0].BuyerSpecification2);
                    $("#BuyerSpecification3").val(data[0].BuyerSpecification3);
                    //if (data[0].BuyerSku != null)
                    //{
                    //    $("#BuyerSku").select2("data", { id: data[0].BuyerSku, text: data[0].BuyerSku });
                    //}
                    //if (data[0].BuyerSpecification != null)
                    //{
                    //    $("#BuyerSpecification").select2("data", { id: data[0].BuyerSpecification, text: data[0].BuyerSpecification });
                    //}
                    //if (data[0].BuyerSpecification1 != null)
                    //{
                    //    $("#BuyerSpecification1").select2("data", { id: data[0].BuyerSpecification1, text: data[0].BuyerSpecification1 });
                    //}
                    //if (data[0].BuyerSpecification2 != null)
                    //{
                    //    $("#BuyerSpecification2").select2("data", { id: data[0].BuyerSpecification2, text: data[0].BuyerSpecification2 });
                    //}
                    //if (data[0].BuyerSpecification3 != null)
                    //{
                    //    $("#BuyerSpecification3").select2("data", { id: data[0].BuyerSpecification3, text: data[0].BuyerSpecification3 });
                    //}
                }
                else{
                    $("#BuyerSku").val("");
                    $("#BuyerSpecification").val("");
                    $("#BuyerSpecification1").val("");
                    $("#BuyerSpecification2").val("");
                    $("#BuyerSpecification3").val("");

                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve product details.' + thrownError);
                ProcessProgress.hide();
            }
        });
    }}


    function GetProductDimensions() {
        var ProcessProgress = $("#Product Dimensions loading progress");
        ProcessProgress.show();
        if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetProductDimensionsJson"))",
                data: { ProductId: $("#ProductId").val(), DealUnitId: $("#DealUnitId").val(), DocTypeId: $("#DocTypeId").val() },
            success: function (data) {
                if (data != null)
                {
                    $("#Length").val(data.Length);
                    $("#Width").val(data.Width);
                    $("#DimensionUnitDecimalPlaces").val(data.DimensionUnitDecimalPlaces);
                    //$("#Height").val(data.Height);
                }
                else{
                    $("#Length").val("");
                    $("#Width").val("");
                    $("#DimensionUnitDecimalPlaces").val(0);
                    //$("#Height").val("");
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve product details.' + thrownError);
                ProcessProgress.hide();
            }
        });
    }}




    function Calculation() {
        if ($('#UnitConversionMultiplier').val() != 0) {
            $('#DealQty').val(($('#Qty').val() * $('#UnitConversionMultiplier').val()).toFixed(2))
        }
    }

    function toFixed(number, decimals) {
        return (Number(number) + 1 / Math.pow(10, Number(decimals) + 1)).toFixed(decimals)
    }

    function GetBaleNo() {
        //alert("P");
        var BaleNoPattern = @ViewBag.BaleNoPattern
        $.ajax({
            cache: false,
            async: false,
            type: "POST",
            url: "@(Url.Action("GetNewPackingBaleNoJson_WithProductId"))",
            data: { PackingHeaderId: $("#PackingHeaderId").val(), ProductInvoiceGroupId: $("#ProductInvoiceGroupId").val(), SaleOrderLineId: $("#SaleOrderLineId").val(), BaleNoPatternId: BaleNoPattern,DealQty: $("#DealQty").val(),ProductId: $("#ProductId").val()},
            success: function (data) {
                $("#BaleNo").val(data[0].NewBaleNo);
                $("#Length").select();
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve Bale No.' + thrownError);
                //ProcessProgress.hide();
            }
        });

    }

    function AssignImage() {
        var ImageFolderName = $("#ImageFolderName").val();
        var ImageFileName = $("#ImageFileName").val();
        if (ImageFolderName != ""){
            var url="/Uploads/" + ImageFolderName + "/Medium/" + ImageFileName ;
            var link="/Uploads/" + ImageFolderName + "/" + ImageFileName ;
            $('#image').attr("src",url);
            $('#imagelink').attr("href",link);
        }
        else{
            $('#image').attr("src","");
            $('#imagelink').attr("href","");
        }
    }


    function CreateSaleOrderLineIdList() {
        var SaleOrderLineId = $("#SaleOrderLineId");
        var ProductName = "";

        var PackingLineId = @Model.PackingLineId;
        //alert($("#ProductId").val());
        //alert($("#SaleDeliveryOrderLineId").val());
        //alert($("#ProductUidId").val());

        if ($("#ProductId").val() != 0 && $("#ProductId").val() != null && $("#ProductId").val() != "")
        {

            if ($("#SaleDeliveryOrderLineId").val() != 0 && $("#SaleDeliveryOrderLineId").val() != null && $("#SaleDeliveryOrderLineId").val() != "")
            {
                $.ajax({
                    cache: false,
                    async: false,
                    type: "POST",
                    url: "@(Url.Action("GetSaleOrderLineIdListForDeliveryOrderJson"))",
                    data: { SaleDeliveryOrderLineId: $("#SaleDeliveryOrderLineId").val() } ,
                    success: function (data) {
                        SaleOrderLineId.html('');
                        if(data.length!=0)
                        {
                            $.each(data, function (id, option) {
                                SaleOrderLineId.append($('<option> </option>').val(option.SaleOrderLineId).html(option.SaleOrderNo));
                            });
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to Retrive Sale Order List.' + thrownError);
                    }
                });
            }
            else if ($("#ProductUidId").val() != 0 && $("#ProductUidId").val() != null && $("#ProductUidId").val() != "")
            {
                $.ajax({
                        cache: false,
                        async: false,
                        type: "POST",
                        url: "@(Url.Action("GetSaleOrderLineIdListForProductUidJson"))",
                        data: { ProductUidId: $("#ProductUidId").val(), PackingHeaderId: $("#PackingHeaderId").val() } ,
                    success: function (data) {
                        SaleOrderLineId.html('');
                        if(data.length!=0)
                        {
                            $.each(data, function (id, option) {
                                SaleOrderLineId.append($('<option> </option>').val(option.SaleOrderLineId).html(option.SaleOrderNo));
                            });
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to Retrive Sale Order List.' + thrownError);
                    }
                });


                $.ajax({
                    cache: false,
                    async: false,
                    type: "POST",
                    url: "@(Url.Action("GetSaleOrderLineIdListJson"))",
                    data: { ProductId: $("#ProductId").val(), PackingHeaderId: $("#PackingHeaderId").val(), PackingLineId: $("#PackingLineId").val() },
                success: function (data) {
                    SaleOrderLineId.html('');
                    //SaleOrderLineId.append($('<option></option>').html('-Please Select-'));

                    //alert($("#ProductId").select2('data').text);
                    if(data.length!=0)
                    {
                        $.each(data, function (id, option) {
                            SaleOrderLineId.append($('<option> </option>').val(option.SaleOrderLineId).html(option.SaleOrderNo));
                        });
                        GetSpecification();
                        $('#errormsg').remove();
                        $('#ExtraPO').css('display', 'none')
                    }
                    else
                    {
                        //alert("P");
                        if ($('#CreateExtraSaleOrder').val().toString().toUpperCase()== "FALSE")
                        {
                            $('#errormsg').remove();
                            SaleOrderLineId.html('');
                            if( !$('#errormsg').length)
                            {
                                $('#ExtraPO').before("<span id=errormsg style='color:red'> No sale order is pending for product "+ $("#ProductId").select2('data').text +" . Want to create extra sale order ?  </span>")
                                //$('#ExtraPO').removeAttr('display');
                                $('#ExtraPO').css('display', '')

                            }
                            //$('#ProductId').select2("val","");
                        }
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to Retrive Sale Order List.' + thrownError);
                }
            });

            }
            else
            {
                $.ajax({
                    cache: false,
                    async: false,
                    type: "POST",
                    url: "@(Url.Action("GetSaleOrderLineIdListJson"))",
                    data: { ProductId: $("#ProductId").val(), PackingHeaderId: $("#PackingHeaderId").val(), PackingLineId: $("#PackingLineId").val() },
                    success: function (data) {
                        SaleOrderLineId.html('');
                        //SaleOrderLineId.append($('<option></option>').html('-Please Select-'));

                        //alert($("#ProductId").select2('data').text);
                        if(data.length!=0)
                        {
                            $.each(data, function (id, option) {
                                SaleOrderLineId.append($('<option> </option>').val(option.SaleOrderLineId).html(option.SaleOrderNo));
                            });
                            GetSpecification();
                            $('#errormsg').remove();
                            $('#ExtraPO').css('display', 'none')
                        }
                        else
                        {
                            //alert("P");
                            if ($('#CreateExtraSaleOrder').val().toString().toUpperCase()== "FALSE")
                            {
                                $('#errormsg').remove();
                                SaleOrderLineId.html('');
                                if( !$('#errormsg').length)
                                {
                                    $('#ExtraPO').before("<span id=errormsg style='color:red'> No sale order is pending for product "+ $("#ProductId").select2('data').text +" . Want to create extra sale order ?  </span>")
                                    //$('#ExtraPO').removeAttr('display');
                                    $('#ExtraPO').css('display', '')

                                }
                                //$('#ProductId').select2("val","");
                            }
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to Retrive Sale Order List.' + thrownError);
                    }
                });
            }
        }
    }


    $("#FlagIsShowAllProducts").change(function(){
        $("#ProductId").select2("data", { id: "", text: "" });
        var DocID = $('#PackingHeaderId').val();
        var isShowAllProductsF = $("#FlagIsShowAllProducts").is(":checked");

        //alert(isShowAllProductsF);

        CustomSelectFunctionForJobOrderLine($("#ProductId"), '/PackingLineWithBuyerDetail/GetCustomProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0, DocID,isShowAllProductsF);
    });

    $('#ExtraPO').click(function(){
        //alert("flag assigned");
        AssignExtraSaleOrderFlag()
        //alert($('#errormsg').text());
        $('#errormsg').remove();
        //alert($('#errormsg').text());
        $('#ExtraPO').css('display', 'none')
        //alert("Process Done");
    })

    function AssignExtraSaleOrderFlag(){
        $.ajax({
            cache:false,
            type: "POST",
            url:"@(Url.Action("SetFlagForExtraSaleOrder"))",
            success:function(data){
                if (data.toString().toUpperCase()== "TRUE")
                {
                    $("#CreateExtraSaleOrder").val(data);
                }
                else{
                    $("#CreateExtraSaleOrder").val(false);
                }

                Validate_Product();
                $('#Specification').val("");
                //alert($("#CreateExtraSaleOrder").val());
            },
            error:function(xhr,ajaxOptions,thrownError){
                alert('Failed to Retrive Extra Sale Order Flag'+thrownError);
            }
        })
    }

    function GetSpecification(){
        $.ajax({
            cache:false,
            type: "POST",
            url:"@(Url.Action("GetSpecification"))",
            data:{SaleOrderLineId:$('#SaleOrderLineId').val()},
            success:function(data){
                $('#Specification').val(data);
            },
            error:function(xhr,ajaxOptions,thrownError){
                alert('Failed to Retrive My Specification'+thrownError);
            }
        })
    }
    $('#SaleOrderLineId').change(GetSpecification);





    function AssignPendingToPrint(){
        $.ajax({
            cache:false,
            type: "POST",
            url:"@(Url.Action("GetPendingToPrint"))",
            data:{PackingHeaderId:$('#PackingHeaderId').val()},
            success:function(data){
                $("#PendingToPrint").text(data);
            },
            error:function(xhr,ajaxOptions,thrownError){
                alert('Failed to Retrive Pending To Print Qty'+thrownError);
            }
        })
    }





    function IsThirdBackingProcessDone()
    {
        if ($('#DivisionId').val() == 6)
        {
            $.ajax({
                cache:false,
                type: "POST",
                url:"@(Url.Action("IsThirdBackingProcessDone"))",
                data:{ProductUidId:$('#ProductUidId').val()},
                success:function(data){
                    if (data == false)
                    {
                        //$('#ProductUidName').parent().append("<span id=errormsg style='color:red'> Third Backing Process is not done for Barcode "+ $("#ProductUidName").val() +" .</span>")
                        $("#ProductUidValidation").text("Third Backing Process is not done for Barcode "+ $("#ProductUidName").val() +".");
                        $("#ProductId").val("");
                        $("#ProductId").select2("data", { id: "", text: "" });
                    }
                    else{
                        $("#ProductUidValidation").text("");
                    }
                },
                error:function(xhr,ajaxOptions,thrownError){
                    alert('Failed to Retrive that third backing is done or not.');
                }
            })
        }
    }


    function QtyValidation()
    {
        if ($('#UnitConversionMultiplier').val() > 5.25 && $('#Qty').val() > 1 && $('#DealUnitId').val() != 'PCS' && $('#DealUnitId').val() != 'KG')
        {
            $("#QtyValidation").text("Packed Qty can not be greater then 1 for "+ $("#ProductId").select2('data').text +".");
            //alert($('#UnitConversionMultiplier').val());
            $("#Qty").val("");

        }
        else
        {
            $("#QtyValidation").text("");
        }
    }




    function CreateSaleDeliveryOrderLineIdList() {
        var SaleDeliveryOrderLineId = $("#SaleDeliveryOrderLineId");
        var ProductName = "";

        var PackingLineId = @Model.PackingLineId;



        if ($("#ProductId").val() != 0 && $("#ProductId").val() != null && $("#ProductId").val() != "")
        {


            $.ajax({
                cache: false,
                async: false,
                type: "POST",
                url: "@(Url.Action("GetDeliveryOrderLineIdListJson"))",
                data: { ProductId: $("#ProductId").val(), PackingHeaderId: $("#PackingHeaderId").val(), PackingLineId: $("#PackingLineId").val() },
                success: function (data) {
                    SaleDeliveryOrderLineId.html('');
                    if(data.length!=0)
                    {
                        $.each(data, function (id, option) {
                            SaleDeliveryOrderLineId.append($('<option> </option>').val(option.SaleDeliveryOrderLineId).html(option.SaleDeliveryOrderNo));
                        });
                        $("#DeliveryOrderShipMethodId").val(data[0].ShipMethodId);
                        $("#OtherBuyerDeliveryOrders").val(data[0].OtherBuyerDeliveryOrders);
                        //$("#PendingToPrint").text(data);



                        if ($("#ProductId").val() != 0 && $("#ProductId").val() != null && $("#ProductId").val() != "")
                        {
                            if ($("#DeliveryOrderShipMethodId").val() != $("#PackingShipMethodId").val())
                            {
                                $("#DeliveryOrderValidation").text("Product "+ $("#ProductId").select2('data').text +" should be shipped by some other method." );
                                //alert($("#DeliveryOrderValidation").text());

                                $("#ProductId").val("");
                                $("#ProductId").select2("data", { id: "", text: "" });
                                $("#SaleDeliveryOrderLineId").val("");
                            }
                            else{
                                $("#DeliveryOrderValidation").text("");
                            }
                        }

                        //alert($("#OtherBuyerDeliveryOrders").val());

                        if ($("#ProductId").val() != 0 && $("#ProductId").val() != null && $("#ProductId").val() != "")
                        {

                            if ($("#OtherBuyerDeliveryOrders").val() != null && $("#OtherBuyerDeliveryOrders").val() != '0')
                            {
                                $("#DeliveryOrderValidation").text("There are some Other High Priotiry Delivery Orders Pending For Product "+ $("#ProductId").select2('data').text +".Can't Proceed.");

                                $("#ProductId").val("");
                                $("#ProductId").select2("data", { id: "", text: "" });
                                $("#SaleDeliveryOrderLineId").val("");
                            }
                            else{
                                $("#DeliveryOrderValidation").text("");
                            }
                        }
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to Retrive Sale Delivery Order List.' + thrownError);
                }
            });
        }
    }


    $(document).ready(function () {
        var id=@Model.PackingLineId;
        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/PackingLineWithBuyerDetail/DeletePost';
                $('form#modform').attr('action',url);
                return;
            }
            else
            {
                return false;
            }
        })
    });

    $('#Length,#Width,#Height').keyup(function(){
        GetUnitConversionMultiplier();
        Calculation();
    });

    $('#Length,#Width,#Height').focusout(function(){
        RoundDimensions();
    });

    function RoundDimensions()
    {
        if ($('#Length').val() != 0) 
        {
            $('#Length').val(parseFloat($('#Length').val()).toFixed($('#DimensionUnitDecimalPlaces').val()));
        }

        if ($('#Width').val() != 0) 
        {
            $('#Width').val(parseFloat($('#Width').val()).toFixed($('#DimensionUnitDecimalPlaces').val()));
        }

        if ($('#Height').val() != 0) 
        {
            $('#Height').val(parseFloat($('#Height').val()).toFixed($('#DimensionUnitDecimalPlaces').val()));
        }
    }



    function GetUnitConversionMultiplier() {
        if ($("#Length").val() > 0 && $("#Width").val() > 0) {
            $.ajax({
                cache: false,
                type: "POST",
                async: false,
                url: "@(Url.Action("GetUnitConversionMultiplier"))",
                data: { ProductId: $("#ProductId").val(),Length: $("#Length").val(),Width: $("#Width").val(),Height: $("#Height").val(),ToUnitId: $("#DealUnitId").val()},
            success: function (data) {
                if (data) {
                    $('#UnitConversionMultiplier').val(data);
                    $('#DealQty').val(data * $("#Qty").val());
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve product details.' + thrownError);
            }
        });
        $('#DealUnitId').attr('readonly', 'true');
        $('#UnitConversionMultiplier').attr('readonly', 'true');
        $('#DealQty').attr('readonly', 'true');
    }
    else if ($("#UnitId").val() == $("#DealUnitId").val()) 
    {
        $("#UnitConversionMultiplier").val(1);
        Calculation.call();
        $('#DealUnitId').removeAttr('readonly');
        $('#UnitConversionMultiplier').removeAttr('readonly');
        $('#DealQty').removeAttr('readonly');
    }
    else 
    {
        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("GetUnitConversionDetailJson"))",
        data: { ProductId: $("#ProductId").val(), UnitId: $("#UnitId").val(), DeliveryUnitId: $("#DealUnitId").val() },

        success: function (data) {
            $("#UnitConversionMultiplier").val(data[0].Value);
            Calculation.call();
        },
        error: function (xhr, ajaxOptions, thrownError) {
            alert('Failed to retrieve Unit conversion details.' + thrownError);
        }
        });
        $('#DealUnitId').removeAttr('readonly');
        $('#UnitConversionMultiplier').removeAttr('readonly');
        $('#DealQty').removeAttr('readonly');
        }
    }
</script>
