@{
    ViewBag.Title = "Update Rates";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<link href="~/Content/Slick/slick.grid.css" rel="stylesheet" />
<link href="~/Content/Slick/css/smoothness/jquery-ui-1.8.16.custom.css" rel="stylesheet" />
<link href="~/Content/Slick/slick-default-theme.css" rel="stylesheet" />

<style type="text/css">
    .slick-header-column.ui-state-default {
        background-color: #428bca;
        color: white;
        height: 35px;
        line-height: 35px;
    }

    input.editor-text {
        width: 100%;
        height: 100%;
        border: 0;
        margin: 0;
        background: transparent;
        outline: 0;
        padding: 0;
        text-align: right;
    }


    .slick-row.ui-widget-content, .slick-cell {
        height: 30px;
        line-height: 30px;
    }

    #myGrid * {
        box-sizing: content-box !important;
    }

    .hidden {
        display: none;
    }

    .sml {
        width: 10% !important;
    }

    .md {
        width: 15% !important;
    }
</style>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-list black"></span> Fill Rates</span>
            @*@Html.ActionLink(" ", " ", " ", null, new { @class = "glyphicon glyphicon-refresh toolbar right small", @title = "Refresh Page", @data_toggle = "tooltip", @id = "RefreshPage", @style = "padding:10px 5px;" })*@
            <input type="submit" value="Save" class="btn btn-primary right" id="submit" style="width: 90px; background-color: #2980b9" />
        </h3>
    </div>

    <div class="panel-info tab" style="padding-left:0px">
        <div style="width: 100%;">
            <div id="myGrid" style="width: 100%; height: 450px; font-size: 11px; "></div>
        </div>
    </div>
</div>

<script src="~/Scripts/Slick/lib/jquery.event.drag-2.2.js"></script>
<script src="~/Scripts/Slick/slick.core.js"></script>
<script src="~/Scripts/Slick/slick.grid.js"></script>
<script src="~/Scripts/Slick/slick.dataview.js"></script>
<script src="~/Scripts/Slick/slick.rowselectionmodel.js"></script>
<script src="~/Scripts/Slick/slick.editors.js"></script>

<script>

    var grid;
    var columns;
    var data;

    //Columns Specification
    columns = [
       { id: "DesignName", name: "DesignName", field: "DesignName", width: 300, minWidth: 150, hasTotalName: false },
       { id: "Remark", name: "Remark", field: "Remark", width: 300, minWidth: 150, hasTotalName: false },
       { id: "Rate", name: "Rate", field: "Rate", cssClass: "text-right", headerCssClass: "text-right", width: 150, minWidth: 100, hasTotal:false , editor: Slick.Editors.Text  },
    ];


    //Options Initialization
    var options = {
        editable: true,
        enableCellNavigation: true,
        enableColumnReorder: false,
        forceFitColumns: true,
        showFooterRow: true,
        explicitInitialization: true
    };

    //Creating Custom FilterFunction that can be passed to slickgrid for search
    var searchString = "";
    function myFilter(item, args) {
        if (args.searchString != "" && (item["DesignName"]).toLowerCase().indexOf(args.searchString.toLowerCase()) == -1) {
            return false;
        }
        return true;
    }

    //Instantiating the Grid
    var dataView = new Slick.Data.DataView({ inlineFilters: true });
    grid = new Slick.Grid("#myGrid", dataView, columns, options);

    //Adding Grid functionalities
    grid.setSelectionModel(new Slick.RowSelectionModel());


    //Functionality for adding Totals on cell render
    grid.onFooterRowCellRendered.subscribe(function (e, args) {
        if (args.column.hasTotal) {
            $(args.node).empty();
            $("<span></span>").text((getColumnTotal(args.column.field, grid.getData())).toFixed(2))
               .appendTo(args.node);
            $(args.node).addClass(args.column.headerCssClass);
        }
        else if (args.column.hasTotalName) {
            $(args.node).empty();
            $("<span></span>").text("Total")
               .appendTo(args.node);
            $(args.node).addClass(args.column.headerCssClass);
        }
    });



    //Functionality for search events
    $("#txtSearch,#txtSearch2").keyup(function (e) {
        Slick.GlobalEditorLock.cancelCurrentEdit();
        // clear on Esc
        if (e.which == 27) {
            this.value = "";
        }
        searchString = this.value;
        updateFilter();
    });
    function updateFilter() {
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.refresh();
    }

    // wire up model events to drive the grid
    dataView.onRowCountChanged.subscribe(function (e, args) {
        grid.updateRowCount();
        grid.render();

    });

    dataView.onRowsChanged.subscribe(function (e, args) {
        grid.invalidateRows(args.rows);
        grid.render();
    });

    var SaleInvoiceHeaderIdIdVal = @ViewBag.SaleInvoiceHeaderId;

    //Data Fetching
    $.ajax({
        url: "/Rug/SaleInvoiceLine/GetSaleInvoiceDetail",
        data: { SaleInvoiceHeaderId: SaleInvoiceHeaderIdIdVal },
        async: true,
        success: function (rest) {
            data = rest.data;
            InitializeGrid();
        },
        error: function () {
            onError(fromPage, toPage)
        }
    });


    //Initializing the Grid
    function InitializeGrid() {
        // initialize the model after all the events have been hooked up
        dataView.beginUpdate();
        dataView.setItems(data, "UniqueName");
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.setFilter(myFilter);
        dataView.endUpdate();

        // if you don't want the items that are not visible (due to being filtered out
        // or being on a different page) to stay selected, pass 'false' to the second arg
        dataView.syncGridSelection(grid, true);

        grid.init();
        Calculation();
    }



    $(window).resize(function (e) {
        grid.resizeCanvas();
    })




    $("#submit").on("click", function(){
        var RowCount = grid.getDataLength();
        var i = 0;
        //$("#submit").attr("disabled", true);
        $('button:submit').attr('disabled','disabled');
        for (i = 0; i < RowCount; i++) {
            $.ajax({
                url: '/Rug/SaleInvoiceLine/UpdateRatesDesignWise',
                type: "POST",
                async: false,
                data: { SaleInvoiceHeaderId: SaleInvoiceHeaderIdIdVal, ProductGroupId: grid.getDataItem(i).ProductGroupId, Remark: grid.getDataItem(i).Remark, Rate: grid.getDataItem(i).Rate },
            });
        }
        editurl = "/SaleInvoiceHeader/Modify/"+ SaleInvoiceHeaderIdIdVal + "?IndexType=All";
        window.location.href =editurl;
    });


    //grid.onKeyDown.subscribe(Calculation);

    //grid.onCellChange.subscribe(function(e, args) {
    //    Calculation();
    //});




    //function Calculation() {
    //    var RowCount = grid.getDataLength();
    //    var i = 0;
    //    var DocQty = 0;

    //    for (i = 0; i < RowCount; i++) {
    //        var mTestingQty = grid.getDataItem(i).TestingQty / (500 * 1000)
    //        var mExcessQtyInKg = grid.getDataItem(i).ExcessQty ? grid.getDataItem(i).ExcessQty : 0;

    //        if (HeaderTestingQty != 0 && mTestingQty != 0)
    //        {
    //            if (grid.getDataItem(i).DyeingRatio != 0)
    //            {
    //                //grid.getDataItem(i).DocQty = (((mTestingQty / HeaderTestingQty) * HeaderQty) * grid.getDataItem(i).DyeingRatio / 100).toFixed(4);
    //                DocQty = (((mTestingQty / HeaderTestingQty) * HeaderQty) * grid.getDataItem(i).DyeingRatio / 100);
    //                grid.getDataItem(i).DocQty = Math.max( Math.round(DocQty * 1000) / 1000).toFixed(4);

    //            }
    //            else
    //            {
    //                //grid.getDataItem(i).DocQty = ((mTestingQty / HeaderTestingQty) * HeaderQty).toFixed(4);
    //                DocQty = ((mTestingQty / HeaderTestingQty) * HeaderQty);
    //                grid.getDataItem(i).DocQty = Math.max( Math.round(DocQty * 1000) / 1000).toFixed(4);
    //            }
    //        }


    //        //$('#Qty').val(($('#DocQty').val() + mExcessQtyInKg));
    //        grid.getDataItem(i).Qty = parseFloat(grid.getDataItem(i).DocQty) + parseFloat(mExcessQtyInKg);
    //        grid.getDataItem(i).Amount = (grid.getDataItem(i).Qty * grid.getDataItem(i).Rate).toFixed(2);
    //        grid.updateRow(i);
    //    }

    //}
</script>