@{
    ViewBag.Title = "Sale Order Plan";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/Slick/slick.grid.css" rel="stylesheet" />
<link href="~/Content/Slick/css/smoothness/jquery-ui-1.8.16.custom.css" rel="stylesheet" />
<link href="~/Content/Slick/slick-default-theme.css" rel="stylesheet" />


<style type="text/css">
    .slick-header-column.ui-state-default {
        background-color: #428bca;
        color: white;
        height: 35px;
        line-height: 35px;
    }

    .slick-row.ui-widget-content, .slick-cell {
        height: 30px;
        line-height: 30px;
    }

    #myGrid * {
        box-sizing: content-box !important;
    }

    .hidden {
        display: none;
    }

    .Total {
        color: black !important;
        background-color: #ffffff !important;
    }
    /* Slick.Editors.Text, Slick.Editors.Date */
    input.editor-text {
        width: 100%;
        height: 100%;
        border: 0;
        margin: 0;
        background: transparent;
        outline: 0;
        padding: 0;
    }
</style>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-list black"></span> Order Planning </span>
        </h3>
        <hr style="margin-top:0px;margin-bottom:0px" />
        <div class="panel-info">
            <h4 style="padding:5px 0 0 0;margin:0px">
                @Html.ActionLink(" ", " ", " ", null, new { @class = "glyphicon glyphicon-refresh toolbar small", @title = "Refresh Page", @data_toggle = "tooltip", @id = "RefreshPage" })
                <span class="glyphicon glyphicon-shopping-cart right" style="font-size:x-large;cursor:pointer;padding-left:5px" id="cart"> <span class="badge" style="position:absolute;top:-10px;right:-12px;font-size:9px;background-color:coral" id="cartSum"></span> </span>
                <input type="text" id="txtSearch2" class="right toolbar small" placeholder="Search" style="height:25px;max-width:20%;">
            </h4>
        </div>
    </div>

    <div class="panel-info tab" style="padding-left:0px">
        <div style="width: 100%;">
            <div id="myGrid" style="width: 100%; height: 450px; font-size: 11px; "></div>
        </div>
    </div>
</div>

<script src="~/Scripts/Slick/lib/jquery.event.drag-2.2.js"></script>
<script src="~/Scripts/Slick/slick.core.js"></script>
<script src="~/Scripts/Slick/slick.grid.js"></script>
<script src="~/Scripts/Slick/slick.dataview.js"></script>
<script src="~/Scripts/Slick/slick.rowselectionmodel.js"></script>
<script src="~/Scripts/Slick/slick.editors.js"></script>

<script>

    var data;
    var options;
    var grid;
    var docTypeId = '@ViewBag.id';

    //Columns Specification
    var columns = [
        { id: "SaleOrderDocNo", name: "OrderNo", field: "SaleOrderDocNo", sortable: true, width: 70 },
         { id: "SaleOrderDocDate", name: "OrderDate", field: "SaleOrderDocDate", width: 100 },
         { id: "BuyerName", name: "Buyer", field: "BuyerName", width: 150 },
         { id: "ProductName", name: "Product", field: "ProductName", width: 150 },
         { id: "Dimension1Name", name: "Dimension1", field: "Dimension1Name", width: 120 },
         { id: "Dimension2Name", name: "Dimension2", field: "Dimension2Name", width: 120 },
         { id: "UnitName", name: "Unit", field: "UnitName", width: 40 },
         { id: "Specification", name: "Specification", field: "Specification", width: 80 },
         { id: "BalanceQtyForPlan", name: "BalanceQty", hasTotal: true, field: "BalanceQtyForPlan", headerCssClass: 'text-right', width: 80, cssClass: 'text-right' },
         { id: "Qty", name: "Qty", field: "Qty", hasTotal: true, width: 80, headerCssClass: 'text-right', editor: Slick.Editors.Text, cssClass: 'text-right' },
    ];

    var summaryCol = [
     { id: "ProductName", name: "Product", field: "ProductName", sortable: true, width: 150 },
     { id: "Specification", name: "Specification", field: "Specification", sortable: true, width: 150 },
     { id: "Dimension1Name", name: "Dimension1", field: "Dimension1Name", sortable: true, width: 100 },
     { id: "Dimension2Name", name: "Dimension2", field: "Dimension2Name", sortable: true, width: 100 },
     { id: "RequiredQty", name: "RequiredQty", field: "RequiredQty", sortable: true, width: 100 },
     { id: "ExcessStockQty", name: "ExcessStock", field: "ExcessStockQty", sortable: true, width: 100 },
     { id: "StockPlanQty", name: "StockPlanQty", hasTotal: true, field: "StockPlanQty", sortable: true, width: 100, headerCssClass: "text-right", editor: Slick.Editors.Text, cssClass: "text-right" },
     { id: "ProdPlanQty", name: "ProdPlanQty", hasTotal: true, field: "ProdPlanQty", sortable: true, width: 100, headerCssClass: "text-right", editor: Slick.Editors.Text, cssClass: "text-right" },
     { id: "PurchPlanQty", name: "PurchPlanQty", hasTotal: true, field: "PurchPlanQty", sortable: true, width: 100, headerCssClass: "text-right", editor: Slick.Editors.Text, cssClass: "text-right" }
    ];

    //var summaryCol = [
    // { id: "SaleOrderDocNo", name: "SaleOrderDocNo", field: "SaleOrderDocNo", sortable: true, width: 150 },
    // { id: "SaleOrderDocDate", name: "SaleOrderDocDate", field: "SaleOrderDocDate", sortable: true, width: 150 },
    // { id: "ProductName", name: "ProductName", field: "ProductName", sortable: true, width: 100 },
    // { id: "Dimension1Name", name: "Dimension1Name", field: "Dimension1Name", sortable: true, width: 100 },
    // { id: "Dimension2Name", name: "Dimension2Name", field: "Dimension2Name", sortable: true, width: 100 },
    // { id: "UnitName", name: "UnitName", field: "UnitName", sortable: true, width: 100 },
    // { id: "Specification", name: "Specification", hasTotal: true, field: "Specification", sortable: true, width: 100, headerCssClass: "text-right", editor: Slick.Editors.Text, cssClass: "text-right" },
    // { id: "BalanceQtyForPlan", name: "BalanceQtyForPlan", hasTotal: true, field: "BalanceQtyForPlan", sortable: true, width: 100, headerCssClass: "text-right", editor: Slick.Editors.Text, cssClass: "text-right" },
    // { id: "Qty", name: "Qty", hasTotal: true, field: "Qty", sortable: true, width: 100, headerCssClass: "text-right", editor: Slick.Editors.Text, cssClass: "text-right" }
    //];

    //Options Initialization
    options = {
        editable: true,
        enableCellNavigation: true,
        enableColumnReorder: false,
        forceFitColumns: true,
        showFooterRow: true,
        explicitInitialization: true
    };

    //Creating Custom FilterFunction that can be passed to slickgrid for search
    var searchString = "";
    function myFilter(item, args) {
        var match = false;
        if (searchString != "" && args) {
            $.each(columns, function (i, a) {
                if (item[a.id] && (item[a.id]).toString().toLowerCase().indexOf(searchString.toLowerCase()) != -1) {
                    match = true;
                    return false;
                }
            })
            if (!match)
                return false;
        }
        else
            return true;

        return match;
    }

    //Instantiating the Grid
    var dataView = new Slick.Data.DataView();
    grid = new Slick.Grid("#myGrid", dataView, columns, options);

    //Adding Grid functionalities
    grid.setSelectionModel(new Slick.RowSelectionModel());


    //Functionality for adding Totals on cell render
    grid.onFooterRowCellRendered.subscribe(function (e, args) {
        if (args.column.hasTotal) {
            $(args.node).empty();
            $("<span id='Total'></span>").text((getColumnTotal(args.column.field, grid.getData())).toFixed(2))
               .appendTo(args.node);
            $(args.node).addClass(args.column.headerCssClass);
        }
        else if (args.column.hasTotalName) {
            $(args.node).empty();
            $("<span></span>").text("Total")
               .appendTo(args.node);
            $(args.node).addClass(args.column.headerCssClass);
        }
    });

    //Functionality for search events
    $("#txtSearch,#txtSearch2").keyup(function (e) {
        Slick.GlobalEditorLock.cancelCurrentEdit();
        // clear on Esc
        if (e.which == 27) {
            this.value = "";
        }
        searchString = this.value;
        updateFilter();


        if($(this).val() && $(this).val()!="")
        {
            $('#cart').attr('disabled', 'disabled');
        }
        else {
            $('#cart').removeAttr('disabled');
        }

    });
    function updateFilter() {
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.refresh();
    }

    // wire up model events to drive the grid
    dataView.onRowCountChanged.subscribe(function (e, args) {
        grid.updateRowCount();
        grid.render();
    });

    dataView.onRowsChanged.subscribe(function (e, args) {
        grid.invalidateRows(args.rows);
        grid.render();
    });


    //Data Fetching
    var url = '@Url.Action("PendingSaleOrderPlan", "MaterialPlanningWizard", new { Id = ViewBag.id })';

    $(document).ready(function () {
        $.ajax({
            url: url,
            async: true,
            success: function (rest) {
                data = rest.data;
                InitializeGrid();
            },

        });
    })

    //Initializing the Grid
    function InitializeGrid() {
        // initialize the model after all the events have been hooked up
        dataView.beginUpdate();
        dataView.setItems(data, "Id");
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.setFilter(myFilter);
        dataView.endUpdate();

        // if you don't want the items that are not visible (due to being filtered out
        // or being on a different page) to stay selected, pass 'false' to the second arg
        dataView.syncGridSelection(grid, true,true);

        grid.init();
    }

    //$('#myGrid').on('dblclick', '.ui-widget-content.slick-row', function () {
    //    var row = grid.getDataItem(grid.getSelectedRows());
    //    var ProductId = row.ProductId;
    //    var GodownId = row.GodownId;
    //    var ProcessId = row.ProcessId;
    //    var Dimension1Id = row.Dimension1Id;
    //    var Dimension2Id = row.Dimension2Id;
    //    var LotNo = row.LotNo;
    //    window.location.href = '/StockInHand/GetStockLedger/?ProductId=' + ProductId + '&Godown=' + GodownId + '&Process=' + ProcessId + '&Dim1=' + Dimension1Id + '&Dim2=' + Dimension2Id + '&LotNo=' + LotNo;
    //});

    $('#cart').click(function () {
        searchString = "";
        var testsel = dataView.getSelectedRow();
        var row = grid.getDataItem(grid.getSelectedRows());
        var selectedRec = [];


        var cart = this;

        $(cart).unbind().attr('id', 'save');

        $.each(testsel, function (i, val) {
            var rec = dataView.getItemById(val);
            selectedRec.push(rec);
        })
        $.ajax({
            type: 'POST',
            url: '/MaterialPlanningWizard/GetSummary/',
            data: { selectedRec: selectedRec, DocTypeId: docTypeId },
            success: function (gdata) {
                data = gdata.data;
                columns = summaryCol;
                grid = new Slick.Grid("#myGrid", dataView, summaryCol, options);
                //Adding Grid functionalities
                grid.setSelectionModel(new Slick.RowSelectionModel());

                //Functionality for adding Totals on cell render
                grid.onFooterRowCellRendered.subscribe(function (e, args) {
                    if (args.column.hasTotal) {
                        $(args.node).empty();
                        console.log(args.column.id);
                        $("<span></span>").attr("id",args.column.id).text((getColumnTotal(args.column.field, grid.getData())).toFixed(2))
                           .appendTo(args.node);
                        $(args.node).addClass(args.column.headerCssClass);
                    }
                    else if (args.column.hasTotalName) {
                        $(args.node).empty();
                        $("<span></span>").text("Total")
                           .appendTo(args.node);
                        $(args.node).addClass(args.column.headerCssClass);
                    }
                });


                grid.onCellChange.subscribe(function (e, args) {
                    $(grid.getFooterRow()).find('span#' + grid.getColumns()[args.cell].name).text((getColumnTotal(grid.getColumns()[args.cell].name, grid.getData())).toFixed(2));
                })

                InitializeGrid();               
            }
        });
        return false;
    });


    $(document).on('click','span#save',function () {
                
        var selectedRec = [];
        $.each(dataView.getItems(), function (i, val) {
            selectedRec.push(val);
        })
        $.ajax({
            type: 'POST',
            url: '/MaterialPlanningWizard/SelectedOrderLines/',
            data: { selectedRec: selectedRec },
            success: function (gdata) {
                if (gdata.success)
                {
                    window.location.href = '/MaterialPlanningWizard/Create/' + docTypeId;
                }
            }
        });
        return false;
    });

    $(window).resize(function (e) {
        grid.resizeCanvas();
    })

    $(document).on("change", "input", function () {
        Slick.GlobalEditorLock.commitCurrentEdit();
    })

    grid.onSelectedRowsChanged.subscribe(function (e, args) {
        updateCartSum()
    });

    //function updateCartSum() {
    //    var total = 0;
    //    var selectedData = [], selectedIndexes;;

    //    selectedIndexes = grid.getSelectedRows();
    //    jQuery.each(selectedIndexes, function (index, value) {
    //        var row = grid.getDataItem(value);
    //        var field = grid.getColumns()[8].field
    //        total = parseFloat(total) + parseFloat(row[field]);
    //    });
    //    $(grid.getFooterRow()).find('span#Total').text(total);
    //    $("#cartSum").text(total);
    //}


    function updateCartSum() {
        var total = 0;
        var selectedData = [], selectedIndexes;;

        selectedIndexes = grid.getSelectedRows();
        jQuery.each(selectedIndexes, function (index, value) {
            var row = grid.getDataItem(value);
            var field = grid.getColumns()[8].field
            total = parseFloat(total) + parseFloat(row[field]);
        });
        $(grid.getFooterRow()).find('span#Total').text(total);
        $("#cartSum").text(total);
    }

</script>