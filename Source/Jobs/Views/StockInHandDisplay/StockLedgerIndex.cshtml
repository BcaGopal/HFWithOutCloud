@{
    ViewBag.Title = "Stock In Hand";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href="~/Content/Slick/slick.grid.css" rel="stylesheet" />
<link href="~/Content/Slick/css/smoothness/jquery-ui-1.8.16.custom.css" rel="stylesheet" />
<link href="~/Content/Slick/slick-default-theme.css" rel="stylesheet" />

<style type="text/css">
    .slick-header-column.ui-state-default {
        background-color: #428bca;
        color: white;
        height: 35px;
        line-height: 35px;
    }

    .slick-row.ui-widget-content, .slick-cell {
        height: 30px;
        line-height: 30px;
    }

    #myGrid * {
        box-sizing: content-box !important;
    }

    .hidden {
        display: none;
    }

    .Total {
        color: black !important;
        background-color: #ffffff !important;
    }
      .totals {
      font-weight: bold;
      text-align:right;
      font-size:larger;
      color:  black;
    }
 .rightMargin {
      margin-right: 2px;
    }
</style>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-list black"></span> @ViewBag.Name Ledger </span>
            <span style="font-family: Calibri,sans-serif,Verdana;font-size:medium" class="black"> @ViewBag.FilterRemark </span> 
                @Html.ActionLink(" ", " ", " ", null, new { @class = "cbtn btn-circle glyphicon glyphicon-refresh toolbar right rightMargin", @title = "Refresh Page", @data_toggle = "tooltip", @id = "RefreshPage" })
                @Html.ActionLink(" ", "GeneratePrints", "TrialBalance", new { ActionName = "TrialBalance" }, new { @class = "cbtn btn-circle glyphicon glyphicon-print toolbar right rightMargin", @title = "Print", @data_toggle = "tooltip", @id = "PrintRecord" })
                <input type="text" id="txtSearch2" class="right toolbar small" placeholder="Search" style="height:25px;margin:5px;max-width:20%">
            </h3>
    </div>

    <div class="panel-info tab" style="padding-left:0px">
        <div style="width: 100%;">
            <div id="myGrid" style="width: 100%; height: 450px; font-size: 12px; "></div>
        </div>
    </div>
</div>

<script src="~/Scripts/Slick/lib/jquery.event.drag-2.2.js"></script>
<script src="~/Scripts/Slick/slick.core.js"></script>
<script src="~/Scripts/Slick/slick.grid.js"></script>
<script src="~/Scripts/Slick/slick.dataview.js"></script>
<script src="~/Scripts/Slick/slick.rowselectionmodel.js"></script>


<script>
    var data;
    var options;
    var grid;


    //Columns Specification
    var columns=[];

    columns.push({
        id: "DocDate", name: "DocDate", field: "DocDate", width: 85
        ,headerCssClass: "Bold", minWidth: 85,
    }, {
        id: "TransactionType", name: "Doc.Type", field: "TransactionType", width: 130
        , headerCssClass: "Bold",minWidth: 130
    }, {
        id: "DocNo", name: "Doc.No", field: "DocNo", width: 75
        ,headerCssClass: "Bold", minWidth: 75
    },{
        id: "PartyName", name: "Particulars", field: "PartyName", width: 180
        , headerCssClass: "Bold",minWidth: 180, hasTotalName: true
    }, {
        id: "RecQty", name: "Receive", field: "RecQty", width: 75, hasTotal: true
        , cssClass: "text-right", headerCssClass: "text-right Bold",minWidth: 100, formatter: DecimalFormatter
    }, {
        id: "IssQty", name: "Issue", field: "IssQty", width: 75, hasTotal: true
        , cssClass: "text-right", headerCssClass: "text-right Bold",minWidth: 100, formatter: DecimalFormatter
    }, {
        id: "BalQty", name: "Balance", field: "Balance", width: 75, hasTotal: true
        , cssClass: "text-right", headerCssClass: "text-right Bold",minWidth: 100, formatter: DecimalFormatter
    });

    function DecimalFormatter(row, cell, value, columnDef, dataContext) {

        if (value == null || value == "") {

            return "";

        } else {

            return Number(value).toFixed(2);

        }

    }
    //Options Initialization
    options = {
        editable: false,
        enableCellNavigation: true,
        enableColumnReorder: false,
        forceFitColumns: true,
        showFooterRow: true,
        explicitInitialization: true
    };

    //Creating Custom FilterFunction that can be passed to slickgrid for search
    var searchString = "";
    function myFilter(item, args) {
        if (args.searchString != "" && (item["DocNo"]).toLowerCase().indexOf(args.searchString.toLowerCase()) == -1) {
            return false;
        }
        return true;
    }

    //Instantiating the Grid
    var dataView = new Slick.Data.DataView({ inlineFilters: true });
    grid = new Slick.Grid("#myGrid", dataView, columns, options);

    //Adding Grid functionalities
    grid.setSelectionModel(new Slick.RowSelectionModel());


    //Functionality for adding Totals on cell render
    grid.onFooterRowCellRendered.subscribe(function (e, args) {
        if (args.column.hasTotal) {
            $(args.node).empty();
            $("<span></span>").text((getColumnTotal(args.column.field, grid.getData())).toFixed(2))
               .appendTo(args.node);
            $(args.node).addClass("totals");
        }
        else if (args.column.hasTotalName) {
            $(args.node).empty();
            $("<span></span>").text("Total")
               .appendTo(args.node);
            $(args.node).addClass("totals");
        }
    });

    //Functionality for Enter key navigation
    grid.onKeyDown.subscribe(function (e) {
        if (e.which == 13) {
            var row = grid.getDataItem(grid.getSelectedRows());
            var DocTypeId = row.DocTypeId;
            var DocId = row.DocHeaderId;
            window.location.href = '/StockInHandDisplay/DocumentMenu/?DocTypeId=' + DocTypeId + '&DocId=' + DocId;
        }
    });


    //Functionality for search events
    $("#txtSearch,#txtSearch2").keyup(function (e) {
        Slick.GlobalEditorLock.cancelCurrentEdit();
        // clear on Esc
        if (e.which == 27) {
            this.value = "";
        }
        searchString = this.value;
        updateFilter();
    });
    function updateFilter() {
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.refresh();
    }

    // wire up model events to drive the grid
    dataView.onRowCountChanged.subscribe(function (e, args) {
        grid.updateRowCount();
        grid.render();
    });

    dataView.onRowsChanged.subscribe(function (e, args) {
        grid.invalidateRows(args.rows);
        grid.render();
    });


    //Data Fetching

    var ProductId = '@ViewBag.ProductId';
    var GodownId  ='@ViewBag.Godown';
    var ProcessId ='@ViewBag.Process';
    var Dimension1Id ='@ViewBag.Dim1';
    var Dimension2Id = '@ViewBag.Dim2';
    var Dimension3Id = '@ViewBag.Dim3';
    var Dimension4Id ='@ViewBag.Dim4';
    var LotNo = '@ViewBag.LotNo';
    var PersonId = '@ViewBag.PersonId';


    var url = '@Url.Action("GetStockLedgerJson", "StockInHandDisplay")';
   url += '?ProductId=' + ProductId + '&Dim1=' + Dimension1Id +
           '&Dim2=' + Dimension2Id +'&Dim3=' + Dimension3Id +'&Dim4=' + Dimension4Id + '&Process=' + ProcessId +
           '&LotNo=' + LotNo + '&Godown=' + GodownId + '&PersonId=' + PersonId + '';

    @*var url = '/StockInHandDisplay/GetStockLedgerJson?ProductId=' +@ViewBag.ProductId +'&Godown=' +@ViewBag.Godown +'&Process=' +@ViewBag.Process +'&Dim1=' +@ViewBag.Dim1 +'&Dim2=' +@ViewBag.Dim2 +'&Dim3=' +@ViewBag.Dim3 +'&Dim4=' +@ViewBag.Dim4 +'&LotNo=' +@ViewBag.LotNo +'';*@
    @*var url = '@Url.Action("GetStockLedgerJson", "StockInHandDisplay", new { ProductId = ViewBag.ProductId, Dim1 = ViewBag.Dim1, Dim2 = ViewBag.Dim2, Dim3 = "1011", Dim4 = ViewBag.Dim4, Process = ViewBag.Process, LotNo = ViewBag.LotNo ,Godown = ViewBag.Godown })';*@

    $(document).ready(function () {
        $.ajax({
            url: url,
            async: true,
            success: function (rest) {
                data = rest.data;
                InitializeGrid();
            },
            error: function () {
                onError(fromPage, toPage)
            }
        });
    })



    //Initializing the Grid
    function InitializeGrid() {
        // initialize the model after all the events have been hooked up
        dataView.beginUpdate();
        dataView.setItems(data,"Id");
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.setFilter(myFilter);
        dataView.endUpdate();

        // if you don't want the items that are not visible (due to being filtered out
        // or being on a different page) to stay selected, pass 'false' to the second arg
        dataView.syncGridSelection(grid, true);

        grid.init();
    }

    $('#myGrid').on('dblclick', '.ui-widget-content.slick-row', function () {
        var row = grid.getDataItem(grid.getSelectedRows());
        var DocTypeId = row.DocTypeId;
        var DocId = row.DocHeaderId;
        window.location.href = '/StockInHandDisplay/DocumentMenu/?DocTypeId=' + DocTypeId + '&DocId=' + DocId;
    });

    $(window).resize(function (e) {
        grid.resizeCanvas();
    })

</script>