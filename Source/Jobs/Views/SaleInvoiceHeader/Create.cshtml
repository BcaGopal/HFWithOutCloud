@model Model.ViewModels.DirectSaleInvoiceHeaderViewModel
@using Core.Common
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<!-- modal placeholder-->
<div id='myModal' class='modal fade in'>
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

@using (Html.BeginForm("CreatePost", "SaleInvoiceHeader", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.SiteId)
    @Html.HiddenFor(m => m.DivisionId)
    @Html.HiddenFor(m => m.SaleInvoiceHeaderId)
    @Html.HiddenFor(m => m.DocTypeId)
    @Html.HiddenFor(m => m.CreatedDate)
    @Html.HiddenFor(m => m.CurrentBalance)
    @Html.HiddenFor(m => m.CreditLimit)
    @Html.HiddenFor(m => m.Mobile)
    @Html.HiddenFor(m => m.Email)
    @Html.HiddenFor(m => m.Name)
    @Html.HiddenFor(m => m.Address)
    @Html.HiddenFor(m => m.CityId)
    @Html.HiddenFor(m => m.ProcessId)

    <div class="panel panel-default">
        <div class="panel-heading">

            @CustomHelpers.RenderHeaderInfo(ViewBag.transactionType, (int?)ViewBag.PendingToSubmit, (int?)ViewBag.PendingToReview, ViewBag.Name)

            @*@if (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue")
            {<h3 style="border-bottom:1px solid #e1dada;padding-bottom:10px">
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>Submit @ViewBag.Name</span>
                <button type="submit" name="Command:SubmitContinue" class="btn btn-primary right" id="SubmitContinue" style="margin-left:5px;">Submit & Next<span class='badge'>@(ViewBag.PendingToSubmit != 0 ? ViewBag.PendingToSubmit : "")</span></button>
                <input type="submit" value="Submit" name="Command:Submit" class="btn btn-primary right" style="width: 90px; background-color: #2980b9" />
            </h3>}
            else if (ViewBag.transactionType == "review" || ViewBag.transactionType == "ReviewContinue")
            {<h3 style="border-bottom:0px solid #e1dada;padding-bottom:0px;">
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span> Review @ViewBag.Name</span>
                <button type="submit" name="Command:Review" class="btn btn-primary right" style="margin-left:5px" id="ReviewContinue">Review & Next<span class='badge'>@(ViewBag.PendingToReview != 0 ? ViewBag.PendingToReview : "")</span></button>
                <button type="submit" class="btn btn-primary right" name="Command:Review">Review</button>
                <input type="hidden" id="IsContinue" name="IsContinue" value="" />
            </h3>
            }
            else if (ViewBag.transactionType == "detail")
            {
                <h3>
                    <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>@ViewBag.Name</span>
                </h3>
            }
            else
            {
                <h3>
                    <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>@ViewBag.Name</span>
                    <input type="submit" value="Save" class="btn btn-primary right" id="submit" style="width: 90px; background-color: #2980b9" />
                </h3>                
            }*@

           

            @*<hr style="margin-top:0px;margin-bottom:0px" />*@
            @{
                string EditAction = "";
                if (Model.Status == (int)StatusConstants.Drafted || Model.Status == (int)StatusConstants.Import)
                {
                    EditAction = "Modify";
                }
                else if ((Model.Status == (int)StatusConstants.Submitted || Model.Status == (int)StatusConstants.Modified))
                {
                    EditAction = "ModifyAfter_Submit";
                }
                else
                {
                    EditAction = "DetailInformation";
                }
            }

            <div class="panel-info">
                     <div class="btn-group">
                    @Html.ActionLink(" ", "Create", "SaleInvoiceHeader", new { @id = @ViewBag.id }, new { @class = "cbtn btn-circle glyphicon glyphicon-plus toolbar", @title = "Add New", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", EditAction, "SaleInvoiceHeader", new { @id = Model.SaleInvoiceHeaderId, IndexType = ViewBag.IndexStatus }, new { @class = "cbtn btn-circle glyphicon glyphicon-edit", @title = "Edit", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "GeneratePrints", "SaleInvoiceHeader", new { Ids = Model.SaleInvoiceHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-print toolbar", @title = "Print", @data_toggle = "tooltip", @id = "PrintRecordC", target = "_blank" })
                    @Html.ActionLink(" ", "PrevPage", "SaleInvoiceHeader", new { DocId = @Model.SaleInvoiceHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-left toolbar", @title = "Prev Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "NextPage", "SaleInvoiceHeader", new { DocId = @Model.SaleInvoiceHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-right toolbar", @title = "Next Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Index", "SaleInvoiceHeader", new { @id = ViewBag.id, IndexType = ViewBag.IndexStatus }, new { @class = "cbtn btn-circle glyphicon glyphicon-list toolbar", @title = "List", @data_toggle = "tooltip" })
                </div>
                <div class="btn-group">
                    <a class="cbtn btn-circle glyphicon glyphicon-option-horizontal dropdown-toggle"   title="More Option"  aria-expanded="false" style="padding-top: 6px;padding-bottom: 6px;" href="#" data-toggle="dropdown" id="dropdownMenu1">
                    </a>
                    <ul class="dropdown-menu pull-right" aria-labelledby="dropdownMenu1">
                        <li><a id="DocHistory" data-modal="" href="@Url.Action("GetHistory", "LogHistory", new { Ids = Model.SaleInvoiceHeaderId, DocTypeId = Model.DocTypeId })"><span class="glyphicon glyphicon-user"> </span> History</a></li>
                        <li><a href="@Url.Action("Email", "SaleInvoiceHeader")"><span class="glyphicon glyphicon-envelope"> </span> Email</a></li>
                        <li role="separator" class="divider"></li>
                        <li><a href="@Url.Action("Report", "SaleInvoiceHeader")"><span class="glyphicon glyphicon-th"> </span> Report</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="panel-info" style="padding-left:15px">
            <div class="form-horizontal">
                @Html.ValidationSummary(true)

                <div >
                    <h4 class="col-md-12 black">
                        <span class="glyphicon glyphicon-align-justify"></span>
                        1.Document Details
                    </h4>
                    <div>
                        <div >
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocDate, "Invoice Date", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @*@Html.TextBoxFor(m => m.DocDate, "{0:dd/MMMM/yyyy}", new { @class = "datepickerWithNFD form-control col-xs-6 required" })*@
                                        @Html.TextBoxFor(m => m.DocDate, "{0:dd/MMMM/yyyy}", new
                                   {
                                       @class = "datepickerWithNFD form-control col-xs-6 required updateDocNo",
                                       data_tabl = "SaleInvoiceHeaders",
                                       data_doctype = Model.DocTypeId,
                                       data_divId = Model.DivisionId,
                                       data_sitId = Model.SiteId,
                                   })
                                        @Html.ValidationMessageFor(model => model.DocDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style="margin-top:15px">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DocNo, "Invoice No", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DocNo, null, new { @class = "form-control col-xs-6 required" })
                                        @Html.ValidationMessageFor(m => m.DocNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div >
                            <div class="col-md-6" style="display:@(Model.SaleInvoiceSettings.isVisibleAgent ? "" : "none")">
                                @Html.HiddenFor(m => m.SaleInvoiceSettings.isVisibleAgent)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.AgentId, "Agent", new { @class = "control-label col-xs-4" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.AgentId, null, new { @class = "form-control col-md-4 col-sm-2 " })
                                        @Html.ValidationMessageFor(m => m.AgentId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style="display:@(Model.SaleInvoiceSettings.isVisibleSalesTaxGroupPerson ? "" : "none")">
                                @Html.HiddenFor(m => m.SaleInvoiceSettings.isVisibleSalesTaxGroupPerson)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SalesTaxGroupPersonId, "Sales Tax Group Person", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.DropDownListFor(m => m.SalesTaxGroupPersonId, new SelectList(ViewBag.SalesTaxGroupList as System.Collections.IEnumerable, "ChargeGroupPersonId", "ChargeGroupPersonName"), new { @class = "form-control col-xs-6 required" })
                                        @Html.ValidationMessageFor(m => m.SalesTaxGroupPersonId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div >


                        </div>
                        <div >
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BillToBuyerId, "Bill To", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextAreaFor(m => m.BillToBuyerId, new { @class = "form-control col-xs-6" })
                                        @Html.ValidationMessageFor(m => m.BillToBuyerId, "", new { @class = "text-danger" })
                                        <span title='SaleDispatch' class='label label-danger' id="PersonLedgerBalance" style='font-weight:bold'>0</span>
                                    </div>
                                </div>
                            </div>

                            

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SaleToBuyerId, "Sale To", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        <div class="input-group">
                                            @Html.TextBoxFor(m => m.SaleToBuyerId, new { @class = "form-control col-xs-6" })
                                            @Html.ValidationMessageFor(m => m.SaleToBuyerId, "", new { @class = "text-danger" })
                                            <span class="input-group-btn">
                                                @Html.ActionLink("...", "_Create", "PersonCreation", new { id = "id" }, new { data_modalCustom2 = "", id = "CustomerDetail", @class = "btn btn-default ", @title = "For Order", @data_toggle = "tooltip" })
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div >
                            <div class="col-md-6" style="display:@(Model.SaleInvoiceSettings.isVisibleCreditDays ? "" : "none")">
                                @Html.HiddenFor(m => m.SaleInvoiceSettings.isVisibleCreditDays)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CreditDays, "Credit Days", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.CreditDays, null, new { @class = "form-control col-xs-6 " })
                                        @Html.ValidationMessageFor(m => m.CreditDays, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style="display:@(Model.SaleInvoiceSettings.isVisibleCurrency ? "" : "none")">
                                @Html.HiddenFor(m => m.SaleInvoiceSettings.isVisibleCurrency)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CurrencyId, "Currency", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.DropDownListFor(m => m.CurrencyId, new SelectList(ViewBag.CurrencyList as System.Collections.IEnumerable, "ID", "Name"), new { @class = "height form-control col-xs-6 " })
                                        @Html.ValidationMessageFor(m => m.CurrencyId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div>
                            <div class="col-md-6" style="display:@(Model.SaleInvoiceSettings.isVisibleFinancier ? "" : "none")">
                                @Html.HiddenFor(m => m.SaleInvoiceSettings.isVisibleFinancier)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.FinancierId, "Financier", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextAreaFor(m => m.FinancierId, new { @class = "form-control col-xs-6" })
                                        @Html.ValidationMessageFor(m => m.FinancierId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style="display:@(Model.SaleInvoiceSettings.isVisibleSalesExecutive ? "" : "none")">
                                @Html.HiddenFor(m => m.SaleInvoiceSettings.isVisibleSalesExecutive)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SalesExecutiveId, "Sales Executive", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.SalesExecutiveId, new { @class = "form-control col-xs-6" })
                                        @Html.ValidationMessageFor(m => m.SalesExecutiveId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>


                        <div >
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextAreaFor(m => m.Remark, new { @class = "form-control col-xs-6" })
                                        @Html.ValidationMessageFor(m => m.Remark, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div >
                            
                        </div>
                    </div>
                </div>




                <hr />
                <div class="row">
                    <h4 class="col-md-12 black" style="margin-top:15px">
                        <span class="glyphicon glyphicon-shopping-cart"></span>
                        2.Products Details
                    </h4>
                </div>

             
                <div  class="panel-info" style="height:40px;">
                    <div class="btn-group" style="padding:5px 0 3px 0;margin:0px;font-weight:bold">
                        <span class="glyphicon glyphicon-plus-sign"></span>
                        @{string Action = "";
                            if (Model.Status == (int)StatusConstants.Drafted)
                            { Action = "CreateLine"; }
                            else if (Model.Status == (int)StatusConstants.Submitted || Model.Status == (int)StatusConstants.Modified || Model.Status == (int)StatusConstants.ModificationSubmitted)
                            { Action = "CreateLineAfter_Submit"; }
                            else if (Model.Status == (int)StatusConstants.Approved)
                            { Action = "CreateLineAfter_Approve"; }
                        }
                        @Html.ActionLink("Add New Row ", Action, "SaleInvoiceLine", new { id = @Model.SaleInvoiceHeaderId, IsSaleBased = false }, new { data_modal = "", id = "btnCreate", @class = "toolbar", @title = "Add New", @data_toggle = "tooltip", @data_detailDisabled = "true" })
                        </div>
                    <div class="btn-group right" style="padding-right:15px">
                        @Html.ActionLink(" ", "_ForDispatch", "SaleInvoiceLine", new { id = @Model.SaleInvoiceHeaderId }, new { data_modal = "", id = "btnCreateFP", @class = "cbtn btn-circle glyphicon glyphicon-link toolbar right", @title = "For Dispatch", @data_toggle = "tooltip", @data_detailDeleted = "true" })
                        </div>
                    </div>
                <div style="padding-right:15px">

                    <div class="panel panel-default" id="grid">
                        <div class="panel-heading headrow" style="background-image: -webkit-linear-gradient(top, #428bca 0%, #428bca 100%);color:white">
                            <div class="row grid-head">
                                <div class='text-left block' style='width: 5%; '>
                                    Srl.
                                </div>
                                <div class="block" style="width: 90%; ">
                                    <div class="row">
                                        @*ProductInfo*@
                                        <div class="block" style="width: 20%; ">
                                            Product Name
                                        </div>
                                        @*Bale No*@
                                        <div class="block" style="width: 10%;">
                                            Bale No
                                        </div>
                                        @*Invoice Group*@
                                        <div class="block" style="width: 25%; ">
                                            Invoice Group
                                        </div>
                                        @*Qty*@
                                        <div class="block text-right" style="width: 10%; ">
                                            Qty
                                        </div>
                                        @*Rate*@
                                        <div class="block text-right" style="width: 10%; ">
                                            Deal Qty
                                        </div>
                                        <div class="block text-right" style="width: 10%; ">
                                            Rate
                                        </div>
                                        @*Amount*@
                                        <div class="block text-right" style="width: 10%; ">
                                            Amount
                                        </div>
                                    </div>
                                </div>
                                <div class="block" style="width: 5%; ">

                                </div>
                            </div>

                        </div>
                        <div class="panel-info" id="gbody">


                        </div>
                    </div>


                    <div class="panel panel-default" id="gridcharges">
                        <div class="panel-heading headrow" style="background-image: -webkit-linear-gradient(top, #428bca 0%, #428bca 100%);color:white">
                            <div class="row grid-head">
                                <div class="col-xs-1 text-left">
                                    Srl.
                                </div>
                                <div class="col-xs-10">
                                    <div class="row">

                                        <div class="col-sm-2">
                                            Charge
                                        </div>

                                        <div class="col-sm-3">
                                            Calculate On
                                        </div>
                                        <div class="col-sm-2">
                                            Add/Deduct
                                        </div>
                                        @*Rate*@
                                        <div class="col-sm-2 text-right">
                                            Rate
                                        </div>
                                        @*Amount*@
                                        <div class="col-sm-3 text-right">
                                            Amount
                                        </div>
                                        @*Remark*@

                                    </div>
                                </div>
                                <div class="col-xs-1">

                                </div>
                            </div>

                        </div>
                        <div class="panel-info" id="gbodycharges">


                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}




@if ((ViewBag.Mode == "Add") || (ViewBag.Mode == "Edit"))
{
    <script type="text/javascript">
        var IsSaved=false;
        var ValidationCount=0;

        $('form').submit(function(event){

            if(!IsSaved)
            {
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                return IsSaved;
            }
            else
            {
                return false;
            }
        });


        function ValidateData() {
            var DocId=@Model.SaleInvoiceHeaderId;
            var TempValue;
            var ValidationMessage="";



            //Checking for dulicate key value
            if(DocId<=0)
            {
                TempValue= $('#DocNo').DuplicateCheckForCreate({ name: 'SaleInvoiceHeader', value: $('#DocNo').val(), doctype: 0 });
                if (TempValue){ ValidationMessage=$('#DocNo').val() + " already exist <br />";}
            }
            else
            {
                test = $('#DocNo').DuplicateCheckForEdit({ name: 'SaleInvoiceHeader', value: $('#DocNo').val(), doctype: 0,headerId:DocId });
                if (TempValue) {ValidationMessage+=$('#DocNo').val() + " already exist <br />";}
            }
            if(TempValue)
            {
                if($('#validationerrormsg').length==0){
                    $('.panel-info').filter(':eq(1)').before('<div class="alert alert-danger" role="alert" id="validationerrormsg">'+ValidationMessage+'</div>');}
                else
                {
                    $('#validationerrormsg').html(ValidationMessage);
                }
            }
            return  (ValidationMessage=="");

        }


        $('#BillToBuyerId').change(function () {
            var cid = $("#BillToBuyerId").val();
            var cdata = $('#BillToBuyerId').select2('data').text;


            if (cdata != 'Cash A/c' && cdata != 'Bank A/c')
            {
                $("#SaleToBuyerId").select2('data', { id: cid, text: cdata });
            }

            

            if ($("#SaleToBuyerId").val() != 0 && $("#SaleToBuyerId").val() != null)
            {
                GetPersonLedgerBalance();
                GetPersonDetail();
            }
        });

        function GetPersonLedgerBalance()
        {
            if ($("#SaleToBuyerId").val() != 0 && $("#SaleToBuyerId").val() != null) 
            {
                $.ajax({
                    cache: false,
                    async: false,
                    type: "POST",
                    url: "@(Url.Action("GetPersonLedgerBalance"))",
                    data: { PersonId: $("#SaleToBuyerId").val() },
                success: function (data) {
                    if (data != null)
                    {
                        $("#CurrentBalance").val(data);
                        
                    }
                    else {
                        $("#CurrentBalance").val(0);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Current Balance.' + thrownError);
                    ProcessProgress.hide();
                }
            });
            }
            else {
                $("#CurrentBalance").val(0);
            }

            if ($("#CurrentBalance").val() > 0)
            {
                $("#PersonLedgerBalance").text($("#CurrentBalance").val().toString() + ' ' + 'Dr');
            }
            else if ($("#CurrentBalance").val() < 0) {
                $("#PersonLedgerBalance").text(Math.abs($("#CurrentBalance").val()).toString() + ' ' + 'Cr');
            }
            else{
                $("#PersonLedgerBalance").text($("#CurrentBalance").val());
            }
        }


        function GetPersonDetail()
        {
            if ($("#SaleToBuyerId").val() != 0 && $("#SaleToBuyerId").val() != null) 
            {
                $.ajax({
                    cache: false,
                    async: false,
                    type: "POST",
                    url: "@(Url.Action("GetPersonDetail"))",
                    data: { PersonId: $("#SaleToBuyerId").val() },
                success: function (data) {
                    if (data != null)
                    {
                        $("#CreditDays").val(data.CreditDays);
                        $("#CreditLimit").val(data.CreditLimit);
                    }
                    else {
                        $("#CreditDays").val(0);
                        $("#CreditLimit").val(0);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Person Detail.' + thrownError);
                    ProcessProgress.hide();
                }
            });
        }
        else {
                $("#CreditDays").val(0);
                $("#CreditLimit").val(0);
            }
        }

        var id=@Model.SaleInvoiceHeaderId;
        if(id==null||id==0)
        {
            $(document).find('a#btnCreate').removeAttr('href').removeAttr('data-modal');
            $("#btnCreateF").attr('disabled','disabled');
        }

        var status = @Model.Status;
        if(id != null && id != 0 &&  status != 0)
        {
            //$("#SaleToBuyerId").attr('disabled','disabled');
            //$("#BillToBuyerId").attr('disabled','disabled');
        }

        //Reloading the table contents on modal hide
        $('#myModal').on('hidden.bs.modal', function () {
            LoadProducts();
            var id=@Model.SaleInvoiceHeaderId;
            LoadCharges(id,"Web.SaleInvoiceHeaderCharges","Web.SaleInvoiceLineCharges","/TaxCalculation/GetSIHeaderChargeForEdit/");
        });

        $(document).ready(function(){
            enableModalTransitions();
        })


        ////For Populating Modal PopUp on DoubleClick Of Row
        //$('#gbody').on("dblclick",'.grid-body',function(){
        //    var text = $(this).find(".id").val();
        //    var editurl=$(this).find('a[edit]').attr('href');
        //    $('#myModalContent').load(editurl, function ( response, status, xhr) {
        //        //alert('2');

        //        if ( status == "error" ) {
        //        }
        //        else
        //        {
        //            $('#myModal').modal({
        //                backdrop: 'static',
        //                keyboard: true
        //            }, 'show');

        //            bindForm1(this);
        //        }
        //    });
        //});

        ////For Populating Modal PopUp on DoubleClick Of Row
        //$('#gbodycharges').on("dblclick",'.grid-body',function(){
        //    var text = $(this).find(".id").val();
        //    var editurl="/TaxCalculation/GetSIHeaderChargeForEdit/";
        //    $('#myModalContent').load(editurl,{Id:text,HeaderTable:"Web.SaleInvoiceHeaderCharges",LineTable:"Web.SaleInvoiceLineCharges"}, function ( response, status, xhr) {
        //        //alert('2');
        //        if ( status == "error" ) {
        //            var msg = "Sorry but there was an error: ";

        //        }
        //        else
        //        {
        //            $('#myModal').modal({
        //                backdrop: 'static',
        //                keyboard: true
        //            }, 'show');

        //            bindForm1(this);}
        //    });
        //});

        ////For Handling Modal PopUp on Clicking Delete Icon
        //$('#gbody').on("click",'a[Detail]', function (e) {
        //    $('#myModalContent').load(this.href, function (response, status, xhr) {
        //        //alert('2');
        //        if ( status == "error" ) {
        //            var msg = "Sorry but there was an error: ";
        //        }
        //        else
        //        {
        //            $('#myModal').modal({
        //                backdrop: 'static',
        //                keyboard: true
        //            }, 'show');

        //            bindForm1(this);}
        //    });
        //    return false;
        //});


        ////For Handling Modal PopUp on Clicking Delete Icon
        //$('#gbody').on("click",'a[delete]', function (e) {
        //    $('#myModalContent').load(this.href, function (response, status, xhr) {
        //        //alert('2');
        //        if ( status == "error" ) {
        //            var msg = "Sorry but there was an error: ";
        //        }
        //        else
        //        {
        //            $('#myModal').modal({
        //                backdrop: 'static',
        //                keyboard: true
        //            }, 'show');

        //            bindForm1(this);}
        //    });
        //    return false;
        //});


       

        ////To focus on the first element on modal load
        //$('#myModal').on('shown.bs.modal', function () {
        //    $("#ProductId").select2("focus");
        //});

        //function SaleInvoiceChargeModel() {
        //    var self = this;
        //    self.SaleInvoiceLineId = $("#SaleInvoiceLineId","#modform").val();
        //    self.SaleInvoiceHeaderId = $("#SaleInvoiceHeaderId","#modform").val();
        //    self.SaleDispatchLineId = $("#SaleDispatchLineId","#modform").val();
        //    self.IsSaleBased = $("#IsSaleBased","#modform").val();
        //    self.SaleDispatchLineId = $("#SaleDispatchLineId","#modform").val();
        //    self.DocTypeId = $("#DocTypeId","#modform").val();
        //    self.SiteId = $("#SiteId","#modform").val();
        //    self.DivisionId = $("#DivisionId","#modform").val();
        //    self.ProductId = $("#ProductId","#modform").val();
        //    self.SaleDispatchHeaderDocNo = $("#SaleDispatchHeaderDocNo","#modform").val();
        //    self.ProductName = $("#ProductName","#modform").val();
        //    self.Dimension1Id = $("#Dimension1Id","#modform").val();
        //    self.Dimension2Id = $("#Dimension2Id","#modform").val();
        //    self.Specification = $("#Specification","#modform").val();
        //    self.LotNo = $("#LotNo","#modform").val();
        //    self.BaleNo = $("#BaleNo","#modform").val();
        //    self.DueDate = $("#DueDate","#modform").val();
        //    self.DealUnitId = $("#DealUnitId","#modform").val();
        //    self.DealQty = $("#DealQty","#modform").val();
        //    self.Rate = $("#Rate","#modform").val();
        //    self.DiscountPer = $("#DiscountPer","#modform").val();
        //    self.Amount = $("#Amount","#modform").val();
        //    self.Weight = $("#Weight","#modform").val();
        //    self.Remark = $("#Remark","#modform").val();
        //    self.UnitConversionMultiplier = $("#UnitConversionMultiplier","#modform").val();
        //    self.UnitId = $("#UnitId","#modform").val();
        //    self.UnitName = $("#UnitName","#modform").val();
        //    self.Qty = $("#Qty","#modform").val();
        //    self.ProductCode = $("#ProductCode","#modform").val();
        //    self.ProductUidId = $("#ProductUidId","#modform").val();
        //    self.__RequestVerificationToken= $('[name=__RequestVerificationToken]').val();
        //    var settings=new SettingsViewModel();
        //    self.SaleInvoiceSettings=settings;


        //    self.linecharges =charges;
        //    self.footercharges=footercharges;
        //}
        //var charges;
        //var footercharges;

        //function SettingsViewModel(){
        //    var self=this;
        //    var settings;

        //    self.isPostedInStockVirtual=$("#SaleInvoiceSettings_isPostedInStockVirtual","#modform").val();
        //    self.CalculationId=$("#SaleInvoiceSettings_CalculationId","#modform").val();
        //    self.CalculateDiscountOnRate=$("#SaleInvoiceSettings_CalculateDiscountOnRate","#modform").val();
        //    self.isVisibleDimension1=$("#SaleInvoiceSettings_isVisibleDimension1","#modform").val();
        //    self.isVisibleDimension2=$("#SaleInvoiceSettings_isVisibleDimension2","#modform").val();
        //    self.isVisibleLotNo=$("#SaleInvoiceSettings_isVisibleLotNo","#modform").val();
        //    self.isMandatoryRate=$("#SaleInvoiceSettings_isMandatoryRate","#modform").val();
        //    self.isEditableRate=$("#SaleInvoiceSettings_isEditableRate","#modform").val();

        //}


        ////For posting the data through ajax and render the contents sent back from the server
        //function bindForm1(dialog) {
        //    //alert("binding1");
        //    $('form#modform', dialog).submit(function () {
        //        //alert(this.action);
        //        charges= AssignValuesToCharges();
        //        footercharges=AssignValuesToFooter();

        //        var request = new SaleInvoiceChargeModel();
        //        //alert(request.SaleInvoiceLineId);
        //        $.ajax({
        //            contentType:'application/json',
        //            //headers: headers,
        //            url: this.action,
        //            type: this.method,
        //            data:JSON.stringify(request),
        //            success: function (result) {
        //                if (result.success) {
        //                    $('#myModal').modal('hide');
        //                    //Refresh
        //                    //location.reload();
        //                    //alert('Data Saved');
        //                }else if(!result.success)
        //                {
        //                    $('#myModalContent').html(result);
        //                    bindForm1();
        //                }
        //                else {
        //                    $('#myModalContent').html(result);
        //                    bindForm1();
        //                }
        //            },
        //        });
        //        return false;
        //    });


        //    $('form#modformcharges', dialog).submit(function () {
        //        //alert(this.action);

        //        footercharges=AssignValuesToFooter();

        //        $.ajax({
        //            contentType:'application/json',
        //            url: this.action,
        //            type: this.method,
        //            data:JSON.stringify(footercharges),
        //            success: function (result) {
        //                if (result.success) {
        //                    $('#myModal').modal('hide');
        //                    //Refresh
        //                    //location.reload();
        //                    //alert('Data Saved');
        //                }else if(!result.success)
        //                {
        //                    $('#myModalContent').html(result);
        //                    bindForm1();
        //                }
        //                else {
        //                    $('#myModalContent').html(result);
        //                    bindForm1();
        //                }
        //            }
        //        });
        //        return false;
        //    });

        //}

        //$(function () {

        //    $.ajaxSetup({ cache: false });

        //    $("a[data-modalCustom]").on("click", function (e) {
        //        // hide dropdown if any
        //        if(this.href=="")
        //        {
        //            return false;
        //        }
        //        //alert(' Script');
        //        $('#myModalContent').load(this.href, function () {
        //            $('#myModal').modal({
        //                backdrop: 'static',
        //                keyboard: true
        //            }, 'show');

        //            bindForm1(this);
        //        });

        //        return false;
        //    });
        //});
    </script>
}

<script type="text/javascript">

    $(document).ready(function () {

        //CustomSelectFunction($("#BillToBuyerId"), '/ComboHelpList/GetPersonWithProcess', '/ComboHelpList/SetSinglePerson', ' ', false, 0,$('#ProcessId').val());
        //CustomSelectFunction($("#SaleToBuyerId"), '/ComboHelpList/GetPersonWithProcess', '/ComboHelpList/SetSinglePerson', ' ', false, 0,$('#ProcessId').val());

        CustomSelectFunction($("#BillToBuyerId"), '/SaleInvoiceHeader/GetCustomPerson', '/ComboHelpList/SetSinglePerson', ' ', false, 1,$('#DocTypeId').val());
        CustomSelectFunction($("#SaleToBuyerId"), '/SaleInvoiceHeader/GetCustomPerson', '/ComboHelpList/SetSinglePerson', ' ', false, 1,$('#DocTypeId').val());

        CustomSelectFunction($("#FinancierId"), '/ComboHelpList/GetFinanciers', '/ComboHelpList/SetSinglePerson', ' ', false, 0);
        CustomSelectFunction($("#SalesExecutiveId"), '/ComboHelpList/GetSalesExecutives', '/ComboHelpList/SetSinglePerson', ' ', false, 0);


        CustomSelectFunction($("#AgentId"), '/ComboHelpList/GetPerson', '/ComboHelpList/GetPerson', ' ', false, 0);

        //Adding Hidden Input Fields
        AddFields();

        //Calling the function to load the table data/ Line information
        LoadProducts();
        var id=@Model.SaleInvoiceHeaderId;

        LoadCharges(id,"Web.SaleInvoiceHeaderCharges","Web.SaleInvoiceLineCharges","/TaxCalculation/GetSIHeaderChargeForEdit/");


        if ($("#CurrentBalance").val() > 0)
        {
            $("#PersonLedgerBalance").text($("#CurrentBalance").val().toString() + ' ' + 'Dr');
        }
        else if ($("#CurrentBalance").val() < 0) {
            $("#PersonLedgerBalance").text(Math.abs($("#CurrentBalance").val()).toString() + ' ' + 'Cr');
        }
        else{
            $("#PersonLedgerBalance").text($("#CurrentBalance").val());
        }
    });




    var id=@Model.SaleInvoiceHeaderId;
    if(id==null||id==0)
    {
        $(document).find('a#btnCreate').removeAttr('href').removeAttr('data-modal');
    }


    //$('#CustomerDetail').on('click', function () {
    //    alert($('#SaleToBuyerId').val())
    //    //ABCD
    //    var Customerurl="/TaxCalculation/GetSIHeaderChargeForEdit/";
    //});



    ////To focus on the first element on modal load
    //$('#myModal').on('shown.bs.modal', function () {
    //    $("#ProductId").select2("focus");
    //});

    function LoadProducts() {
        var groupId=@Model.SaleInvoiceHeaderId;
        var status='@Model.Status';
        var LineEditUrl;
        var LineDeleteUrl;
        if(status==StatusContstantsEnum.Drafted)
        {
            LineEditUrl="/SaleInvoiceLine/_ModifyLine/";
            LineDeleteUrl="/SaleInvoiceLine/_DeleteLine/";
        }
        else if(status==StatusContstantsEnum.Submitted || status == StatusContstantsEnum.Modified || status == StatusContstantsEnum.ModificationSubmitted)
        {
            LineEditUrl="/SaleInvoiceLine/_ModifyLineAfterSubmit/";
            LineDeleteUrl="/SaleInvoiceLine/_DeleteLine_AfterSubmit/";
        }
        else if(status==StatusContstantsEnum.Approved)
        {
            LineEditUrl="/SaleInvoiceLine/_ModifyLineAfterApprove/";
            LineDeleteUrl="/SaleInvoiceLine/_DeleteLine_AfterApprove/";
        }
        var link="/SaleInvoiceLine/Index/"+groupId;
        var QtyCount=0;
        var DealQtyCount=0;
        var AmountCount=0;
        var unit=true;
        var prevunit;
        var dealunit=true;
        var prevdealunit;
        var decimal=0;
        var dealdecimal=0;
        $.ajax({
            url: link,
            type: "GET",
            success: function (data) {
                var row = ""
                var srno=1;
                if(data.length!=0)
                {
                    $.each(data, function (index, item) {
                        row += " <div class='row crow grid-body' style='margin-left:0px;margin-right:0px'><div class='row-index block'  style='width:5%'>"+srno+"<input type='hidden' class='id' value='"+item.SaleInvoiceLineId+"' /></div><div class='block' style='width: 90%; '><div class='row'><div class='block' style='width: 20%; '>"+(item.ProductName==null?" ":"<strong>"+item.ProductName+"</strong>")+"<br />"+(item.Specification==null?" ":item.Specification)+" <div>"+(item.Dimension1Name==null?" ":item.Dimension1Name+",")+(item.Dimension2Name==null?" ":item.Dimension2Name+",")+(item.SaleDispatchDocNo==null?" ":item.SaleDispatchDocNo)+"</div><div>"+((item.SaleDispatchHeaderDocNo==null)?" ":"<h4><span title='SaleDispatch' class='label label-danger' style='font-weight:bold'>"+item.SaleDispatchHeaderDocNo+"</span></h4>")+"<br />"+(item.ProductUidName==null?" ":"<strong>"+item.ProductUidName+"</strong>")+"</div></div> <div class='block' style='width: 10%; '>"+(item.BaleNo==null?" ":item.BaleNo)+"</div>   <div class='block' style='width: 25%; '>"+(item.ProductInvoiceGroupName==null?" ":item.ProductInvoiceGroupName)+"</div>     <div class='block text-right' style='width: 10%; '>"+(item.Qty==null?" ":item.Qty.toFixed(item.UnitDecimalPlaces))+"<br /> <div><small>"+(item.UnitId==null?" ":item.UnitId)+"</small></div>  </div>  <div class='block text-right' style='width: 10%; '>"+(item.DealQty==null?" ":item.DealQty.toFixed(item.DealUnitDecimalPlaces))+"<br /> <div><small>"+(item.DealUnitId==null?" ":item.DealUnitId)+"</small></div>  </div> <div class='block text-right' style='width: 10%; '>"+(item.Rate==null?" ":item.Rate.toFixed(2))+"</div><div class='block text-right' style='width: 10%; '>"+(item.Amount==null?" ":item.Amount.toFixed(2))+"</div></div></div><div class='block' style='width: 5%; '><a class='glyphicon glyphicon-trash icon-Cus-Size' data-modal='' data-detailDisabled='true' delete='' href='"+LineDeleteUrl+item.SaleInvoiceLineId+"'></a><a  edit='' href='"+LineEditUrl+item.SaleInvoiceLineId+"'></a></div></div><hr style='margin-top:0px;margin-bottom:0px'/></div>";
                        QtyCount+=item.Qty;
                        DealQtyCount+=item.DealQty;
                        AmountCount+=item.Amount;
                        if(srno!=1)
                        {
                            if(item.UnitId==prevunit)
                            {}
                            else
                            {unit=false;}

                            if(item.DealUnitId==prevdealunit)
                            {}
                            else
                            {dealunit=false;}

                        }
                        if(decimal<item.UnitDecimalPlaces){decimal=item.UnitDecimalPlaces;}
                        if(dealdecimal < item.DealUnitDecimalPlaces){dealdecimal=item.DealUnitDecimalPlaces;}
                        srno++;
                        prevunit=item.UnitId;
                        prevdealunit=item.DealUnitId;
                    });
                    row+="<div class='row tfooter' style='padding-top:10px;margin-left:0px;margin-right:0px'><div class='block'  style='width:5%'></div><div class='block'  style='width:90%'><div class='row'>  <div class='block'  style='width:20%'><strong>Total</strong></div><div class='block'  style='width:10%'></div><div class='block'  style='width:25%'></div><div class='block text-right'  style='width:10%'><strong>"+ ((unit==true)?QtyCount.toFixed(decimal)+"<br /><small>"+prevunit+"</small>":QtyCount.toFixed(decimal))+"</strong></div><div class='block text-right'  style='width:10%'><strong>"+ ((unit==true)?DealQtyCount.toFixed(dealdecimal)+"<br /><small>"+prevdealunit+"</small>":DealQtyCount.toFixed(dealdecimal))+"</strong></div><div class='block'  style='width:10%'></div><div class='block text-right'  style='width:10%'><strong>"+AmountCount.toFixed(2)+"</strong></div></div></div><div class='block'  style='width:5%'></div></div>"

                    $('#DocNo').attr('readonly','true');
                }
                else
                {

                }
                //$("#header").html(head);
                $("#gbody").html(row);

            },
            error: function (result) {
                alert("Error");
            }
        });
    }


    $(function () {

        $("a[data-modalCustom2]").on("click", function (e) {
            if (this.href == "") {
                return false;
            }

            var SaleToBuyerId =  $("#SaleToBuyerId").val()
            var NewUrl = this.href.replace("id",SaleToBuyerId);

            $.ajax({
                url: NewUrl,
                type: "POST",               
                success: function (result) {
                    $('#myModalContent').html(result);
                    $('#myModal').modal({
                        backdrop: 'static',
                        keyboard: true
                    }, 'show');

                    bindForm2('#myModalContent');
                },
            });
            return false;
        });


        function bindForm2(dialog) {
            $('#modformr2', dialog).submit(function () {
                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: $(this).serialize(),
                    success: function (result) {
                        if (result.success) {
                            $('#myModal').modal('hide');
                            CustomSelectFunction($("#SaleToBuyerId"), '/ComboHelpList/GetPerson', '/ComboHelpList/SetSinglePerson', ' ', false, 0);
                            //$('#SaleToBuyerId').keydown();
                            $("#SaleToBuyerId").select2('data', { id: result.PersonId, text: result.Name });
                        } else {
                            $('#myModalContent').html(result);
                            bindForm();
                        }
                    }
                });
                return false;
            });
        }

    });

  
</script>



@if ((ViewBag.Mode != "Add") && (ViewBag.Mode != "Edit"))
{
    <script type="text/javascript">

        $(document).ready(function(){
            DisablePageNavigation();
        })

        //RemoveFields();

        //function RemoveFields(){
        //    //Disabling input fields
        //    $(':input:not(:submit)').attr('disabled','disabled');

        //    //Removing all the events from the newly created lines
        //    $('#gbody').unbind();

        //    //Removing Add New Row ActionLink
        //    $('a#btnCreate').parents('h5')[0].remove();


        //    //Preventing the click event on newly created elements
        //    $(document).on('click','#gbody a:not(:has([Detail]))',function(event){
        //        event.preventDefault();
        //    })
        //    //Removing the action link from the form so that the request will be redirected to the Submit function in the controller instead of the hardcoded path
        //    $('form:last').prop('action','');
        //}


    </script>
}

@if ((Model.Status == (int)ActivityTypeContants.Modified || Model.Status == (int)ActivityTypeContants.Submitted)
    && (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue" || ViewBag.transactionType == "review" || ViewBag.transactionType == "ReviewContinue"))
{
    <script type="text/javascript">

        
        $(document).ready(function(){
            enableActivityLogReason(GatePassGen,GatePassId,TrancType);
        })

        @*var TrancType='@ViewBag.transactionType'

        var href = '/ActivityLog/LogEditReason'

        $(':submit').bind('click', function () {
            var Button=$(this);
            $('#myModalContent').load(href, function () {

                $('#myModal').modal({
                    backdrop: 'static',
                    keyboard: true
                }, 'show');

                bindForm1(this,Button);
            });


            return false;
        })

        function bindForm1(dialog,Button) {

            $('#modformr', dialog).submit(function () {

                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: $(this).serialize(),
                    success: function (result) {
                        if (result.success) {
                            $('#myModal').modal('hide');

                            $(':submit').unbind();

                            $('input[name="UserRemark"]').val(result.UserRemark);

                            if(GatePassGen && !GatePassId && (TrancType=="submit"||TrancType=="submitContinue"))
                            {

                            }
                            else
                            {
                                Button.trigger('click');
                            }
                        } else {
                            $('#myModalContent').html(result);
                            bindForm1();
                        }
                    }
                });
                return false;
            });

        }*@
    </script>
}
@*else if (Model.GatePassHeaderId == null && (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue") && !string.IsNullOrEmpty(Model.SaleInvoiceSettings.SqlProcGatePass))
{
    <script type="text/javascript">

        $(':submit','form .panel.panel-default').one('click', function () {
            $btnClicked=$(this);
            var uChoice=false;
            alertify.confirm('Generate GatePass ?').set({
                'closable': false, 'onok': function (onok) {

                    $('input[name="GenGatePass"]').val('true');
                    $btnClicked.trigger('click');
                    uChoice=true;

                }, 'oncancel': function (oncancel) {

                    $('input[name="GenGatePass"]').val('false');
                    $btnClicked.trigger('click');
                    uChoice=true;
                }
            }).setting('labels',{'ok':'Yes', 'cancel': 'No'});
            return uChoice;
        })


    </script>
}*@
