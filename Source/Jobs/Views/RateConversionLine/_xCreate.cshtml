@model Model.ViewModel.StockLineViewModel
@using Core.Common

<style type="text/css">
    .cusleftnormal {
        border-bottom-left-radius: 0pc !important;
        border-top-left-radius: 0px !important;
    }

    .cusrightnormal {
        border-bottom-right-radius: 0px !important;
        border-top-right-radius: 0px !important;
    }
</style>


<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> @ViewBag.DocNo</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "RateConversionLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
           
            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.StockHeaderId)
                @Html.HiddenFor(m => m.StockLineId)
                @Html.HiddenFor(m => m.RequisitionLineId)
                @Html.HiddenFor(m => m.GodownId)
                @Html.HiddenFor(m => m.ProductUidId)
                @Html.HiddenFor(m => m.RequisitionBalanceQty)
                @Html.HiddenFor(m => m.RateConversionSettings.ProcessId)




                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-6" style="display:@(Model.RateConversionSettings.isVisibleProductUID?"":"none")">
                        @Html.HiddenFor(m=>m.RateConversionSettings.isVisibleProductUID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductUidId, "Product UID", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.ProductUidIdName, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductUidId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, "Product", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                @*<span id="status" class="text-danger"></span>*@
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.RateConversionSettings.isVisibleDimension1?"":"none")">
                        @Html.HiddenFor(m=>m.RateConversionSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, "Dimension1", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.RateConversionSettings.isVisibleDimension2?"":"none")">
                        @Html.HiddenFor(m=>m.RateConversionSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, "Dimension2", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.RateConversionSettings.isVisibleLotNo?"":"none")">
                        @Html.HiddenFor(m=>m.RateConversionSettings.isVisibleLotNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LotNo, "LotNo", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6">
                        @Html.HiddenFor(m=>m.RateConversionSettings.isMandatoryProcessLine)
                        <div class="form-group">
                            @Html.LabelFor(model => model.FromProcessId, "From Process", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.FromProcessId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.FromProcessId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-4" style="padding-right:0px;">
                                @Html.TextBoxFor(model => model.Qty, new { @class = "form-control col-xs-3 required cusrightnormal" })
                                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-3" style="padding-left:0px">
                                @Html.TextBoxFor(m => m.UnitId, new { @class = "form-control col-xs-2 cusleftnormal", @readonly = "true" })
                            </div>
                        </div>
                    </div>




                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rate, "Rate", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @if(Model.StockLineId>0 )
                                {
                                    @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7 required",@readonly=true })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7 required" })
                                }                                                              
                                @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    
                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, "Amount", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Remark, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    
                    <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>                    
                    <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>

                </div>

            </div>

        }
    </div>
</div>


<script type="text/javascript">

    $(document).ready(function () {
        CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', 'Enter Product Name', false, 3);
        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', 'Enter Dimension2', false, 1);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', 'Enter Dimension1 ', false, 1);
        CustomSelectFunction($("#FromProcessId"), '/ComboHelpList/GetProcess', '/ComboHelpList/SetSingleProcess', 'Enter Process Name', false, 1);
        $("#ProductId").select2("focus");


        $('#ProductUidIdName').on('change',function(e){

            InitializePopover(this,$("#ProductUidIdName").val(),$('#RateConversionSettings_isPostedInStockProcess').val(),$('#GodownId').val());
            $(this).popover('show');
            setTimeout(function() {$('#ProductUidIdName').popover('destroy')},10000);

        })


        $('.datepicker').datepicker({
            format: 'dd/MM/yyyy',
            "setDate": new Date(),
            "autoclose": true

        })

        var id=@Model.StockLineId;

        if(id>0)
        {
            var tex='@Model.ProductName';
            $("#ProductAC").val(tex).attr('readonly','true');
            $('#Dimension1Id').attr('readonly','true');
            $('#Dimension2Id').attr('readonly','true');
            $('#LotNo').attr('readonly','true');
            $('#FromProcessId').attr('readonly','true');
            $('#Specification').attr('readonly','true');
        }



        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/StockLine/DeletePost';
                $('form#modform').attr('action',url);
                return;
            }
            else
            {
                return false;
            }
        })
    });

</script>

<script type="text/javascript">

    var decimalplaces=0;

    $(function(){

        $("#Rate,#Amount,#Qty").keyup(Calculation);        
        $("#ProductId").change(GetProductDetail);


        function GetProductDetail() {
            var ProcessProgress = $("#Product detail loading progress");
            ProcessProgress.show();
            if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProductDetailJson"))",
                    data: { ProductId: $("#ProductId").val(),StockId: $("#StockHeaderId").val() },
                    success: function (data) {
                        $("#Rate").val(data.StandardCost);
                        $("#UnitId").val(data.UnitId);                                                
                        Calculation.call();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
        }


        function Calculation() {

            $('#Amount').val(($('#Qty').val() * $('#Rate').val()).toFixed(2));
        }

    })


</script>


<script type="text/javascript">

    $( "#acrequsorders" ).autocomplete({
        change: function( event, ui ) {
            if (ui.item== null || ui.item.value == undefined) {
                $("#acrequsorders").val("");
                $('#RequisitionLineId').val("");
            }


            if($("#acrequsorders").val()=="")
            {
                $('#RequisitionLineId').val("");
            }

            if($('#RequisitionLineId').val()!="")
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProdOrderDetail"))",
                    data: { RequisitionLineId: $("#RequisitionLineId").val() },
                    success: function (data) {
                        $('#Qty').val(data.Qty);
                        $('#ProdOrderBalanceQty').val(data.Qty);
                        $('#Specification').val(data.Specification);
                        (data.Dimension1Id==null)?(1==1):($("#Dimension1Id").select2("data", {id: data.Dimension1Id, text: data.Dimension1Name}))

                        if(data.Dimension2Id!=null)
                        {
                            $("#Dimension2Id").select2("data", {id: data.Dimension2Id, text: data.Dimension2Name});
                        }
                        $("#Dimension1Id").attr('readonly','true');
                        $("#Dimension2Id").attr('readonly','true');
                        $("#Dimension1Name").val(data.Dimension1Name);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
            else if($('#RequisitionLineId').val()=="")
            {
                $('#Qty').val(0);
                $("#Dimension1Name").val("");
                $("#Dimension2Name").val("");
                $("#Dimension1Id").removeAttr('readonly');
                $("#Dimension2Id").removeAttr('readonly');
                $('#Specification').val("");
            }
        }
    });





    $(function() {
        $("#acrequsorders").autocomplete({
            source: function(request,response){
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetPendingProdOrders"))",
                    data: { ProductId: $("#ProductId").val() },
                    success: function (data) {

                        var cachearray = data.error ? [] : $.map(data, function(m) {
                            return {
                                value: m.DocNo,
                                key: m.RequisitionLineId,
                                dim1: m.Dimension1Name,
                                dim2:m.Dimension2Name,

                            };
                        });
                        response(cachearray);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Pending Indents.' + thrownError);
                    }

                });


            },
            appendTo : $("#myModalContent"),
            select: function(event, ui) {
                // prevent autocomplete from updating the textbox
                // navigate to the selected item's url
                if($("#acrequsorders").val()=="")
                {
                    $('#RequisitionLineId').val("");
                }
                else
                    $("#RequisitionLineId").val(ui.item.key);

            },

        }).data("ui-autocomplete")._renderItem = function(ul, item) {
            var $a = $("<a></a>");
            $("<strong></strong>").text(item.value).appendTo($a);
            $("<br />").appendTo($a);
            (item.dim1==null)?(""):($("<span class='small'></span>").text(item.dim1+",").appendTo($a));

            (item.dim2==null)?(""):($("<span class='small'></span>").text(item.dim2).appendTo($a));

            return $("<li></li>").append($a).appendTo(ul);
        }
    });

    $("#acrequsorders").bind("focus",function(){
        $(this).keydown();
    })

    $('#Qty').keyup(function () {
        if (($('#ProdOrderBalanceQty').val() - $('#Qty').val()) < 0 && $('#RequisitionLineId').val()>0) {
            $('#submit', '.modal-body').attr('disabled', 'disabled');
            if ($(this).closest('div.col-xs-4').find('span#cerror').length == 0)
            {
                $(this).parents('.col-xs-4').append("<span class='text-danger' id='cerror'>Qty exceeding Production Order Qty</span>")
            }
        }
        else
        {
            $('#submit', '.modal-body').removeAttr('disabled');
            if ($(this).closest('div.col-xs-4').find('span#cerror').length > 0)
            {
                $(this).closest('.col-xs-4').find('span#cerror').remove();
            }
        }
    })
</script>