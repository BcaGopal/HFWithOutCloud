@model Model.ViewModel.StockLineFilterViewModel
@using Core.Common

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Filters</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_FilterPost", "RateConversionLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {


            <div class="form-horizontal modal-body">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.JobWorkerId)
                @Html.HiddenFor(model => model.StockHeaderId)
                @Html.HiddenFor(m => m.DocTypeId)
                @Html.HiddenFor(m=>m.ProcessId)
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                <div class="row">
                   
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProductId, "Product ", new { @class = "control-label col-xs-4 " })
                                <div class="col-xs-7">
                                    @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                    @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                    <span id="status" class="text-danger"></span>
                                </div>
                            </div>
                        </div>                                                  

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductGroupId, "Product Group", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.ProductGroupId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductGroupId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>


                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, "Dimension1", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })                                
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, "Dimension2", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

               





                <div class="row">
                    <div class="col-md-6" style="display:@(Model.StockHeaderSettings.isVisibleLineCostCenter?"":"none")">
                        @Html.HiddenFor(m => m.StockHeaderSettings.isVisibleLineCostCenter)
                        @Html.HiddenFor(m => m.StockHeaderSettings.isMandatoryLineCostCenter)
                        <div class="form-group">
                            @Html.LabelFor(model => model.CostCenterIds, "Cost Center", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">                                
                                
                                    @Html.TextBoxFor(m => m.CostCenterIds, new { @class = "form-control col-xs-7" })
                                
                                @Html.ValidationMessageFor(m => m.CostCenterIds, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rate, "Rate", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })                                
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom" name="Command:Edit" type="submit"><h2 style="margin:0px" id="submit" title="Proceed" ><span class="glyphicon glyphicon-arrow-right black"></span> </h2></button>                  
                </div>

            </div>

        }
    </div>
</div>


<script type="text/javascript">


    $(document).ready(function () {
        $("#ProductId").select2("focus");

        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetProducts', 'Enter Product Name', true, 3);        
        CustomSelectFunction($("#ProductGroupId"), '/ComboHelpList/GetProductGroup', '/ComboHelpList/SetProductGroup', 'Enter Group Name', true, 1);
        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', 'Dimension1', true, 1);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', 'Dimension2', true, 1);


        var DocID = $('#StockHeaderId', '.modal-body').val();
        var URL = '/RateConversionLine/GetPendingRateConversionProducts/';
        var coscenid = $('#CostCenterId', '.modal-body').val();
        var ProcId = $('#ProcessId', '.modal-body').val();
        var jobworId = $('#JobWorkerId', '.modal-body').val();

        

        $("#ProductId").select2({
            minimumInputLength: 1,
            multiple: true,
            ajax: {
                url: URL,
                dataType: 'json',
                type: "GET",
                quietMillis: 1000,
                data: function (term) {
                    return {
                        ProcessId: $('#ProcessId', '.modal-body').val(),
                        term: term,
                        CostCenterId: coscenid,
                        JobWorkerId: $('#JobWorkerId', '.modal-body').val(),
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.PropFirst,
                                id: item.Id
                            }
                        })

                    };
                }
            },
        });

        $("#CostCenterIds").select2({
            minimumInputLength: 1,
            multiple: true,
            ajax: {
                url: '/RateConversionLine/GetPendingRateConversionCostCenters/',
                dataType: 'json',
                type: "GET",
                quietMillis: 1000,
                data: function (term) {
                    return {
                        StockHeaderId: $('#StockHeaderId', '.modal-body').val(),
                        ProcessId: $('#ProcessId', '.modal-body').val(),
                        term: term,
                        CostCenterId: coscenid,
                        JobWorkerId: $('#JobWorkerId', '.modal-body').val(),
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.PropFirst,
                                id: item.Id
                            }
                        })

                    };
                }
            },
        });

    });

</script>