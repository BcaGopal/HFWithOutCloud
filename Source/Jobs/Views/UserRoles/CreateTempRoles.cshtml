@model Model.ViewModel.UserRoleViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/css/select2.css" rel="stylesheet" />


<script src="~/Scripts/select2.min.js"></script>
<script src="~/Scripts/FunctionForMultiSelect.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>

<!-- modal placeholder-->
<div id='myModal' class='modal fade in'>
    <div class="modal-dialog">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

@using (Html.BeginForm("PostTempRoles", "UserRoles", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.UserId)
    @Html.HiddenFor(model => model.UserName)
    <div class="panel panel-default">

        <div class="panel-heading">

            <h3>
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Temporary User Roles : @Model.UserName</span>
                <input type="submit" value="Save" class="btn btn-primary right" id="submit" style="width: 90px; background-color: #2980b9" />
            </h3>
            <hr style="margin-top:0px;margin-bottom:0px" />

            <div class="panel-info">
                <h4 style="padding:5px 0 0 0;margin:0px">
                    @Html.ActionLink(" ", " ", " ", null, new { @class = "glyphicon glyphicon-refresh toolbar", @title = "Refresh Page", @data_toggle = "tooltip", @id = "RefreshPage" })
                    @Html.ActionLink(" ", "TempRolesIndex", "UserRoles", null, new { @class = "glyphicon glyphicon-list toolbar right", @title = "List", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "GetUserTempRoles", "UserRoles", new { UserId = Model.UserId }, new { @class = "glyphicon glyphicon-th toolbar right", @title = "Existing Roles", @data_toggle = "tooltip", @data_modal = "" })
                </h4>
            </div>
        </div>
        <div class="panel-info" style="padding-left:15px">

            <div class="form-horizontal">

                @Html.ValidationSummary(true)

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.ExpiryDate, "Expiry Date", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-6">
                                @Html.TextBoxFor(m => m.ExpiryDate, "{0:dd/MMMM/yyyy}", new { @class = "datepicker form-control col-xs-6 required" })
                                @Html.ValidationMessageFor(m => m.ExpiryDate, null, new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.FromUserId, "From User", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-6">
                                @Html.TextBoxFor(m => m.FromUserId, null, new { @class = "form-control col-xs-6" })
                                @Html.ValidationMessageFor(m => m.FromUserId, null, new { @class = "has-error" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.RoleIdList, "Roles", new { @class = "control-label col-xs-2" })
                            <div class="col-xs-8">
                                @Html.TextBoxFor(m => m.RoleIdList, null, new { @class = "form-control col-xs-6" })
                                @Html.ValidationMessageFor(m => m.RoleIdList, null, new { @class = "has-error" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
<script type="text/javascript">
    var IsSaved = false;
    var ValidationCount = 0;

    $('.datepicker').datepicker({
        format: 'dd/MM/yyyy',
        "setDate": new Date(),
        "autoclose": true
    })

    CustomSelectFunction($("#RoleIdList"), '/ComboHelpList/GetRoles', '/ComboHelpList/SetRoles', ' ', true, 1);
    CustomSelectFunction($("#FromUserId"), '/ComboHelpList/GetUsers', '/ComboHelpList/SetUsers', ' ', false, 1);

    $('form').submit(function (event) {

        if (!IsSaved) {
            if (!ValidateData()) {
                return false;
            }
            IsSaved = true;
            return IsSaved;
        }
        else {
            return false;
        }


    });


    function ValidateData() {
        var DocId = '@Model.UserId';
        var TempValue;
        var ValidationMessage = "";



        @* //Checking for dulicate key value
        if(DocId<=0)
        {
            TempValue= $('#DeliveryTermsName').DuplicateCheckForCreate({ name: 'DeliveryTerms', value: $('#DeliveryTermsName').val(), doctype: 0 });
            if (TempValue){ ValidationMessage=$('#DeliveryTermsName').val() + " already exist <br />";}
        }
        else
        {
            test = $('#DeliveryTermsName').DuplicateCheckForEdit({ name: 'DeliveryTerms', value: $('#DeliveryTermsName').val(), doctype: 0,headerId:DocId });
            if (TempValue) {ValidationMessage+=$('#DeliveryTermsName').val() + " already exist <br />";}
        }
        if(TempValue)
        {
            if($('#validationerrormsg').length==0){
                $('.panel-info').filter(':last').before('<div class="alert alert-danger" role="alert" id="validationerrormsg">'+ValidationMessage+'</div>');}
            else
            {
                $('#validationerrormsg').html(ValidationMessage);
            }
        }*@
        return (ValidationMessage == "");

    }


    function UserRoleViewModel(val) {
        var self = this;
        self.UserId = val;
    }

    $('#FromUserId').on('change', function (e) {
        bindForm1(e.val);
    })

    function bindForm1(val) {
        var Data = new UserRoleViewModel(val);

        $.ajax({
            url: '/UserRoles/CopyFromExisting',
            type:"POST",
            data: Data ,
            success: function (result) {
                if (result.success) {
                    $('#RoleIdList').select2("data", result.data);
                }
            }
        });
    }


</script>
