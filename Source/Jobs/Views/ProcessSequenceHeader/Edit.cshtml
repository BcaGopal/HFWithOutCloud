@model Surya.India.Model.ViewModels.SaleOrderHeaderIndexViewModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    [class^="slickgrid_"],
    [class^="slickgrid_"] div {
        -webkit-box-sizing: content-box;
        -moz-box-sizing: content-box;
        box-sizing: content-box;
    }
</style>

<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
<!-- modal placeholder-->
<div id='myModal' class='modal fade in'>
    <div class="modal-dialog-lg">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

@using (Html.BeginForm("Edit", "SaleOrderHeader", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m=>m.SaleOrderHeaderId)
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4>
                <span style="font-family: Calibri,sans-serif,Verdana"> Edit Sale Order.</span>
            </h4>
        </div>
        <div class="panel-info" style="padding-left:15px">
            <div class="form-horizontal">
                <input type="hidden" name="Redirect" id="Redirect" value="@ViewBag.Redirect" />
                @Html.ValidationSummary(true)

                <div class="row">
                    <h4 class="col-md-12" style="margin-top:15px">
                        Document Details
                    </h4>
                    <div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocTypeId, "Entry Type.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.DropDownListFor(model => model.DocTypeId, new SelectList(ViewBag.DocTypeList as System.Collections.IEnumerable, "DocumentTypeId", "DocumentTypeName"), new { @class = "form-control col-xs-6 height" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocNo, "Order No.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.DocNo, null, new { @class = "form-control col-xs-6" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DocDate, "Order Date.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.DocDate, "{0:dd/MMMM/yyyy}", new { @class = "datepicker form-control col-xs-6" })
                                        @Html.ValidationMessageFor(model => model.DocDate)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DueDate, "Due Date.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.DueDate, "{0:dd/MMMM/yyyy}", new { @class = "datepicker form-control col-xs-6" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <h4 class="col-md-12" style="margin-top:15px">
                        Buyer Details
                    </h4>
                    <div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BuyerOrderNo, "Buyer Order No.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(model => model.BuyerOrderNo, null, new { @class = "form-control col-xs-6" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SaleToBuyerId, "Sale To Buyer.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.DropDownListFor(m => m.SaleToBuyerId, new SelectList(ViewBag.BuyerList as System.Collections.IEnumerable, "PersonId", "Name"), new { @class = "form-control col-xs-6 height" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BillToBuyerId, "Bill To Buyer.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.DropDownListFor(m => m.BillToBuyerId, new SelectList(ViewBag.BuyerList as System.Collections.IEnumerable, "PersonId", "Name"), new { @class = "form-control col-xs-6 height" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CurrencyId, "Currency.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.DropDownListFor(m => m.CurrencyId, new SelectList(ViewBag.CurrencyList as System.Collections.IEnumerable, "ID", "Name"), new { @class = "form-control col-xs-6 height" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ShipAddress, "Ship Address.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextAreaFor(m => m.ShipAddress, new { @class = "form-control col-xs-6" })
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
                <hr />

                <div class="row">
                    <h4 class="col-md-12" style="margin-top:15px">
                        Terms and Conditions
                    </h4>
                    <div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ShipMethodId, "Ship Method.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.DropDownListFor(model => model.ShipMethodId, new SelectList(ViewBag.ShipMethodList as System.Collections.IEnumerable, "ShipMethodId", "ShipMethodName"), new { @class = "form-control col-xs-6 height" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DeliveryTermsId, "Delivery Terms.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.DropDownListFor(model => model.DeliveryTermsId, new SelectList(ViewBag.DeliveryTermsList as System.Collections.IEnumerable, "DeliveryTermsId", "DeliveryTermsName"), new { @class = "form-control col-xs-6 height" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Priority, "Priority.*", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.DropDownList("Priority", null, new { @class = "form-control col-xs-6 height" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CreditDays, "Credit Days", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.CreditDays, new { @class = "form-control col-xs-6" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TermsAndConditions, "Terms & Conditions", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextAreaFor(m => m.TermsAndConditions, new { @class = "form-control col-xs-6" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.Remark, new { @class = "form-control col-xs-6" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <hr />

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-8">
                        <input type="submit" value="Save" class="btn btn-primary btn-sm CurveBorder height" id="submit" style=" border-color: #606264" disabled="disabled"/>

                        @Html.ActionLink("Back", "Index", "SaleOrderHeader", new { @class = "btn btn-primary btn-sm col-md-offset-1 CurveBorder ActionLinkPadding CustomCss height" })

                        @*<input type="submit" value="Add Products" class="btn btn-primary col-md-offset-4 btn-sm CurveBorder height" id="addProd" style=" border-color: #606264" />*@
                        @Html.ActionLink("Add products", "_Create", "SaleOrderLine", new { id = @Model.SaleOrderHeaderId}, new { data_modal = "", id = "addProd", @class = "btn btn-primary btn-sm col-md-offset-4 CurveBorder ActionLinkPadding CustomCss height" })
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@*<table width="100%" class="table important">
    <tr>
        <td valign="top" width="50%">
            <div id="myGrid" style="width:1050px;height:500px;" data-url="/SaleOrderLine/Index/@Model.SaleOrderHeaderId"></div>
        </td>        
    </tr>
</table>*@
<div style="position:relative">
    <div>
        <div class="grid-header">
            <label>SlickGrid</label>
            <span style="float:right" class="ui-icon ui-icon-search" title="Toggle search panel"
                  onclick="toggleFilterRow()"></span>
        </div>
        <div id="myGrid" style="width:1050px;height:500px;" data-url="/SaleOrderLine/Index/@Model.SaleOrderHeaderId"></div>        
    </div>
    </div>
<div id="inlineFilterPanel" style="display:none;background:#dddddd;padding:3px;color:black;">
    Show tasks with title including <input type="text" id="txtSearch2">
    and % at least &nbsp;
    <div style="width:100px;display:inline-block;" id="pcSlider2"></div>
</div>
    <script type="text/javascript">
        var grid;
        $(document).ready(function () {
            $("#DocTypeId").focus();

        })

        var form_clean;
        // serialize clean form
        $(function () {
            //$("#addProd").callModalOnLoad();
            form_clean = $("form").serialize();
            //alert(form_clean);
        });

        $("input,select").change(function () {
            var form_dirty = $("form").serialize();
            if (form_clean != form_dirty) {
                $("#submit").removeAttr('disabled');
            }
            else {
                $("#submit").attr({ "disabled": "disabled" })
            }
        });

        

        $('#myModal').on('hidden.bs.modal', function () {

            //window.alert('hidden event fired!');

            function formatter(row, cell, value, columnDef, dataContext) {
                return value;
            }

            function DeleteFormatter(row, cell, value, columnDef, dataContext) {
                return "<button class='rowDeleteBlue'> </button>";
            }
            function dateFormatter(row, cell, value, columnDef, dataContext) {
                if (value != null) {
                    var newdat = new Date(parseInt(value.substr(6)));
                    return (newdat.getMonth() + '/' + newdat.getDate() + '/' + newdat.getFullYear());
                }
                else return value;
            }
            var element = document.getElementById('myGrid');
            link = $(element).attr('data-url');
            function toggleFilterRow() {
                grid.setTopPanelVisibility(!grid.getOptions().showTopPanel);
            }
            $.ajax({
                cache: false,
                type: 'POST',
                url: link,
                success: function (data) {
                    alert('success');

                    //var data = [];
                    var columns = [
                      { id: "ProductName", name: "ProductName", field: "ProductName", width: 120, cssClass: "cell-title", formatter: formatter, sortable: true },
                      { id: "Qty", name: "Qty", field: "Qty", sortable: true },
                      { id: "DeliveryUnitId", name: "DeliveryUnitId", field: "DeliveryUnitId", minWidth: 60, minHeight: 40, sortable: true },
                      { id: "DeliveryQty", name: "DeliveryQty", field: "DeliveryQty", minWidth: 60, sortable: true },
                      { id: "Rate", name: "Rate", field: "Rate", minWidth: 60, sortable: true },
                      { id: "Amount", name: "Amount", field: "Amount", minWidth: 60, sortable: true },
                      { id: "DueDate", name: "DueDate", field: "DueDate", minWidth: 60, formatter: dateFormatter, sortable: true },
                      { id: "Delete", name: " ", field: "Delete", formatter: DeleteFormatter, sortable: true },
                    ];

                    var options = {
                        editable: false,
                        enableAddRow: false,
                        enableCellNavigation: true,
                        multiColumnSort: true
                    };

                    grid = new Slick.Grid("#myGrid", data, columns, options);
                    grid.autosizeColumns();
                    grid.onSort.subscribe(function (e, args) {
                        var cols = args.sortCols;
                        data.sort(function (dataRow1, dataRow2) {
                            for (var i = 0, l = cols.length; i < l; i++) {
                                var field = cols[i].sortCol.field;
                                var sign = cols[i].sortAsc ? 1 : -1;
                                var value1 = dataRow1[field], value2 = dataRow2[field];
                                var result = (value1 == value2 ? 0 : (value1 > value2 ? 1 : -1)) * sign;
                                if (result != 0) {
                                    return result;
                                }
                            }
                            return 0;
                        });
                        grid.invalidate();
                        grid.render();
                    });
                   
                    $(".grid-header .ui-icon").addClass("ui-state-default ui-corner-all").mouseover(function (e) {
                        $(e.target).addClass("ui-state-hover");
                    }).mouseout(function (e) {
                        $(e.target).removeClass("ui-state-hover")
                    });
                    grid.onDblClick.subscribe(function (e, args) {
                        if ($(e.target).hasClass('rowDeleteBlue')) {
                            var item = args.grid.getData()[args.row];
                            var deleteurl = '/SaleOrderLine/_Delete/' + item.SaleOrderLineId;
                            $.ajax({
                                cache: false,
                                type: 'POST',
                                url: deleteurl,
                                success: function (result) {
                                    if (result) {
                                        alert('deleted');
                                        var dd = grid.getData();
                                        var current_row = grid.getActiveCell().row;
                                        dd.splice(current_row, 1);
                                        var r = current_row;
                                        while (r < dd.length) {
                                            grid.invalidateRow(r);
                                            r++;
                                        }
                                        grid.updateRowCount();
                                        grid.render();
                                        grid.scrollRowIntoView(current_row - 1)
                                    }
                                    else {
                                        alert('somthing went wrong');
                                    }
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    alert('Failed to Delete.' + thrownError);
                                    ProcessProgress.hide();
                                }

                            })
                        }

                        else {
                            var item = args.grid.getData()[args.row];
                            alert(item.SaleOrderLineId);
                            var editurl = '/SaleOrderLine/_Edit/' + item.SaleOrderLineId;
                            $('#myModalContent').load(editurl, function () {
                                //alert('2');
                                $('#myModal').modal({
                                    /*backdrop: 'static',*/
                                    keyboard: true
                                }, 'show');

                                bindForm(this);
                            });

                            function bindForm(dialog) {

                                $('form', dialog).submit(function () {
                                    alert('inside');
                                    alert(this.action);
                                    alert(this.method);
                                    $.ajax({
                                        url: this.action,
                                        type: this.method,
                                        data: $(this).serialize(),
                                        success: function (result) {
                                            if (result.success) {
                                                $('#myModal').modal('hide');
                                                //Refresh
                                                //location.reload();
                                            } else {
                                                $('#myModalContent').html(result);
                                                bindForm();
                                            }
                                        }
                                    });
                                    return false;
                                });
                            }
                        }

                    });
                }
            })

        });



        function updateDataGrid() {


        }

    </script>
