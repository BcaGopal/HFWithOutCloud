@model Model.ViewModel.StockLineViewModel
@using Core.Common

<style type="text/css">
    .cusleftnormal {
        border-bottom-left-radius: 0pc !important;
        border-top-left-radius: 0px !important;
    }

    .cusrightnormal {
        border-bottom-right-radius: 0px !important;
        border-top-right-radius: 0px !important;
    }

    .ui-autocomplete {
        max-height: 250px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
    }

    .ui-widget {
        font-size: 1em /*{fsDefault}*/;
    }
</style>


<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> @ViewBag.DocNo</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "StockLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
            @Html.ValidationLog((string)TempData["CSEXCL"])
            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.StockHeaderId)
                @Html.HiddenFor(m => m.StockLineId)
                @Html.HiddenFor(m => m.RequisitionLineId)
                @Html.HiddenFor(m => m.GodownId)
                @Html.HiddenFor(m => m.ProductUidId)
                @Html.HiddenFor(m => m.RequisitionBalanceQty)
                @Html.HiddenFor(m => m.StockHeaderSettings.ProcessId)
                @Html.HiddenFor(m => m.StockHeaderSettings.isPostedInStockProcess)
                @Html.HiddenFor(m => m.PersonId)
                @Html.HiddenFor(m => m.RequisitionBalanceQty)
                @Html.HiddenFor(m => m.StockHeaderSettings.isVisibleMaterialRequest)


                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="row" style="display:@(Model.StockHeaderSettings.isVisibleMaterialRequest ? "" : "none")">

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.RequiredProductId, "Required Product", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBox(" ", " ", new { @class = "form-control", @id = "acProducts" })
                                @Html.ValidationMessageFor(model => model.RequiredProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.RequisitionLineId, "Requisition", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBox(" ", " ", new { @class = "form-control", @id = "acrequisitionline" })
                                @Html.ValidationMessageFor(model => model.RequisitionLineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                </div>

                <div class="row">
                    <div class="col-md-6" style="display:@(Model.StockHeaderSettings.isVisibleProductUID?"":"none")">
                        @Html.HiddenFor(m => m.StockHeaderSettings.isVisibleProductUID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductUidId, "Product UID", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductUidIdName, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductUidId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                @*<span id="status" class="text-danger"></span>*@
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.StockHeaderSettings.isVisibleDimension1?"":"none")">
                        @Html.HiddenFor(m => m.StockHeaderSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, (Model.DocumentTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension1Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.StockHeaderSettings.isVisibleDimension2?"":"none")">
                        @Html.HiddenFor(m => m.StockHeaderSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, (Model.DocumentTypeSettings.Dimension2Caption ?? "Dimension2"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension2Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.StockHeaderSettings.isVisibleDimension3?"":"none")">
                        @Html.HiddenFor(m => m.StockHeaderSettings.isVisibleDimension3)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension3Id, (Model.DocumentTypeSettings.Dimension3Caption ?? "Dimension3"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension3Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension3Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension3Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.StockHeaderSettings.isVisibleDimension4?"":"none")">
                        @Html.HiddenFor(m => m.StockHeaderSettings.isVisibleDimension4)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension4Id, (Model.DocumentTypeSettings.Dimension4Caption ?? "Dimension4"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension4Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension4Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension4Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.StockHeaderSettings.isVisibleLotNo?"":"none")">
                        @Html.HiddenFor(m => m.StockHeaderSettings.isVisibleLotNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LotNo, "LotNo", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.StockHeaderSettings.isVisibleLineCostCenter?"":"none")">
                        @Html.HiddenFor(m => m.StockHeaderSettings.isVisibleLineCostCenter)
                        <div class="form-group">
                            @Html.LabelFor(model => model.CostCenterId, "CostCenter", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.CostCenterId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.CostCenterId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        @Html.HiddenFor(m => m.StockHeaderSettings.isMandatoryProcessLine)
                        <div class="form-group">
                            @Html.LabelFor(model => model.FromProcessId, "From Process", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.FromProcessId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.FromProcessId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px;">
                            <div class="col-xs-7" style="padding-right:0px;">
                                @Html.TextBoxFor(model => model.Qty, new { @class = "form-control col-xs-3 required cusrightnormal" })
                                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-5" style="padding-left:0px">
                                @Html.TextBoxFor(m => m.UnitName, new { @class = "form-control col-xs-2 cusleftnormal", @readonly = "true" })
                            </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ExcessStockQty, "Current Stock", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ExcessStockQty, new { @class = "form-control col-xs-7 required", @readonly = "true" })
                                @Html.ValidationMessageFor(model => model.ExcessStockQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.StockHeaderSettings.isVisibleRate?"":"none")">
                        @Html.HiddenFor(m => m.StockHeaderSettings.isVisibleRate)
                        @Html.HiddenFor(m => m.StockHeaderSettings.isEditableRate)
                        @Html.HiddenFor(m => m.StockHeaderSettings.isMandatoryRate)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rate, "Rate", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @if (Model.StockLineId > 0 && !Model.StockHeaderSettings.isEditableRate)
                                {
                                    @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7 required", @readonly = true })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7 required" })
                                }
                                @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.StockHeaderSettings.isVisibleRate?"":"none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, "Amount", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextAreaFor(model => model.Remark, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>
                    } @if (ViewBag.LineMode == "Delete")
                    { <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>
                    }
                </div>

            </div>

        }
    </div>
</div>


<script type="text/javascript">

    $(document).ready(function () {
        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetCustomProducts', '/ComboHelpList/SetSingleProducts', 'Enter Product Name', false, 3);
        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', ' ', false, 0);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', ' ', false, 0);
        CustomSelectFunction($("#Dimension3Id"), '/ComboHelpList/GetDimension3', '/ComboHelpList/SetSingleDimension3', ' ', false, 0);
        CustomSelectFunction($("#Dimension4Id"), '/ComboHelpList/GetDimension4', '/ComboHelpList/SetSingleDimension4', ' ', false, 0);
        CustomSelectFunction($("#CostCenterId"), '/StockLine/GetLineCostCenters', '/ComboHelpList/SetSingleCostCenter', ' ', false, 0,$('#StockHeaderId','.modal-body').val());
        CustomSelectFunction($("#FromProcessId"), '/ComboHelpList/GetProcess', '/ComboHelpList/SetSingleProcess', ' ', false, 0);



        var reset = false;
        var IsSaved = false;
        var ValidationCount = 0;

        $('#modform').bind('submit', function (event) {

            if (!IsSaved) {
                if (!ValidateData()) {
                    return false;
                }
                IsSaved = true;
                $('button:submit').attr('disabled', 'disabled');
                return IsSaved;
            }
            else {
                return false;
            }


        });


        function ValidateData() {
            var ValidationMessage = "";

            //Client Side Validaion.....

            return (ValidationMessage == "");

        }




        var URL = '/ComboHelpList/GetCustomProducts/';
        $("#ProductId").select2({
            minimumInputLength: 1,
            multiple: false,
            ajax: {
                url: URL,
                dataType: 'json',
                type: "GET",
                quietMillis: 1000,
                data: function (term) {
                    return {
                        searchTerm: term,
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.PropFirst,
                                id: item.Id
                            }
                        })

                    };
                }
            },
            initSelection: function (element, callback) {

                var xval = element.val();
                if (xval != 0) {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: '/ComboHelpList/SetSingleProducts',
                        data: { Ids: element.val() },
                        success: function (data) {
                            callback(data);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to Retrive Qty' + thrownError);
                        }
                    })
                }
                //callback([{ id: "1", text: "arpit" }, { id: "2", text: "akash" }]);
            }


        });

        //$("#ProductId").select2('focus');

        //$('input:not(:readonly:disabled):first','.modal-body').focus();
        $('input:not(:hidden,disabled,readonly,visible):first','.modal-body').focus();

        $('#ProductUidIdName').on('change',function(e){


            $.ajax({
                cache: false,
                async:false,
                url: "@(Url.Action("ValidateBarCode"))",
                data: { ProductUId: $(this).val(),StockHeader:$('#StockHeaderId','.modal-body').val()},
                success: function (data) {

                    if(data.ErrorType=="Success"){

                        $('#ProductId','.modal-body').select2("data", { id: data.ProductId, text: data.ProductName }).attr('readonly', 'true').trigger('change');
                        $('#Qty','.modal-body').val(1).attr('readonly', 'true');
                        $('#ProductUidId','.modal-body').val(data.ProductUIDId);

                        if (data.Dimension1Id)
                            $('#Dimension1Id','.modal-body').select2("data", { id: data.Dimension1Id, text: data.Dimension1Name }).attr('readonly', 'true');
                        else
                            $('#Dimension1Id','.modal-body').attr('readonly', 'true');

                        if (data.Dimension2Id)
                            $('#Dimension2Id','.modal-body').select2("data", { id: data.Dimension2Id, text: data.Dimension2Name }).attr('readonly', 'true');
                        else
                            $('#Dimension2Id','.modal-body').attr('readonly', 'true');

                        if (data.CurrenctProcessId)
                            $('#FromProcessId','.modal-body').select2("data", { id: data.CurrenctProcessId, text: data.CurrentProcessName }).attr('readonly', 'true');
                        else
                            $('#FromProcessId','.modal-body').attr('readonly', 'true');

                        $('#LotNo','.modal-body').val(data.LotNo);


                        if ($('#modform').find('.modal-body #errormsg').length) {
                            $('#modform').find('#errormsg').parent().remove();
                        }
                        $('#submit', '.modal-body').removeAttr('disabled');
                    }
                    else
                    {
                        $('#submit', '.modal-body').attr('disabled', 'disabled');
                        if (!$('#modform').find('.modal-body #errormsg').length) {
                            $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >"+data.ErrorMessage+"</span></div>")
                        }
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve BarCode details.' + thrownError);
                }
            });

            //InitializePopover(this,$("#ProductUidIdName").val(),true,$('#GodownId').val(),TransactionTypeConstantsEnum.Issue);
            //$(this).popover('show');
            //setTimeout(function() {$('#ProductUidIdName').popover('destroy')},10000);

        })


        $('.datepicker').datepicker({
            format: 'dd/MM/yyyy',
            "setDate": new Date(),
            "autoclose": true

        })

        var id=@Model.StockLineId;

        if(id>0)
        {
            var tex='@Model.RequisitionHeaderDocNo';
            $("#acrequisitionline").val(tex).attr('readonly','true');
            var Prod='@Model.RequiredProductName';
            $("#acProducts").val(Prod).attr('readonly','true');
            $("#ProductUidIdName").attr('readonly','true');
        }



        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/StockLine/DeletePost';
                $('form#modform').attr('action',url);
                return;
            }
            else
            {
                return false;
            }
        })
    });


    $('#Qty').focusin(function(){

        $.get('/StockLine/GetExcessStock', {ProductId:$('#ProductId').val(),Dim1:$('#Dimension1Id').val(),Dim2:$('#Dimension2Id').val(),ProcId:null,Lot:$('#LotNo').val(),MaterialIssueId:$('#StockHeaderId').val()}).done(function(data){

            $('#ExcessStockQty').val(data);

        });

    })


</script>

<script type="text/javascript">

    var decimalplaces=0;

    $(function(){

        $("#Rate,#Amount,#Qty").keyup(Calculation);
        $("#ProductId").change(GetProductDetail);


        function GetProductDetail() {
            var ProcessProgress = $("#Product detail loading progress");
            ProcessProgress.show();
            if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProductDetailJson"))",
                    data: { ProductId: $("#ProductId").val(),StockId: $("#StockHeaderId").val() },
                    success: function (data) {
                        $("#Rate").val(data.StandardCost);
                        $("#UnitName").val(data.UnitName);
                        $("#Specification").val(data.Specification);
                        Calculation.call();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
        }


        function Calculation() {

            $('#Amount').val(($('#Qty').val() * $('#Rate').val()).toFixed(2));
        }

    })


</script>

<script type="text/javascript">

    $('#Qty').keyup(function () {
        if (($('#RequisitionBalanceQty').val() - $('#Qty').val()) < 0 && $('#RequisitionLineId').val() > 0 ) {
            //$('#submit', '.modal-body').attr('disabled', 'disabled');
            if (!$('#modform').find('.modal-body #errormsg').length) {
                $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >Qty exceeding Required Qty</span></div>")
            }
        }
        else
        {
            if ($('#modform').find('.modal-body #errormsg').length) {
                $('#modform').find('#errormsg').parent().remove();
            }
        }
    })

</script>


@*@if(Model.RequisitionLineId!=null && Model.StockLineId>0)
    {
        <script type="text/javascript">

            $('#Qty').keyup(function () {
                if (($('#RequisitionBalanceQty').val() - $('#Qty').val()) < 0 ) {
                    $('#submit', '.modal-body').attr('disabled', 'disabled');
                    if ($(this).closest('div.col-xs-4').find('span#cerror').length == 0)
                    {
                        $(this).parents('.col-xs-4').append("<span class='text-danger' id='cerror'>Qty exceeding Requisition Order Qty</span>")
                    }
                }
                else
                {
                    $('#submit', '.modal-body').removeAttr('disabled');
                    if ($(this).closest('div.col-xs-4').find('span#cerror').length > 0)
                    {
                        $(this).closest('.col-xs-4').find('span#cerror').remove();
                    }
                }
            })

            //$("#Dimension1Id").attr('readonly','true');
            //$("#Dimension2Id").attr('readonly','true');
            //$("#FromProcessId").attr('readonly','true');
            //$("#acrequisitionline").attr('readonly','true');
            //$("#Dimension2Id").attr('readonly','true');
            //$("#ProductId").attr('readonly','true');


        </script>
    }*@

@if (Model.ProductUidId != null && Model.ProductUidId > 0 && Model.StockLineId > 0)
{
    <script type="text/javascript">
        $('#submit', '.modal-body').attr('disabled', 'disabled');
    </script>
}


@if (Model.StockLineId <= 0 && Model.StockHeaderSettings.isVisibleMaterialRequest)
{
    <script type="text/javascript">

        $( "#acProducts" ).focusout( function( ) {

            if (!$(this).val()) {
                $("#acProducts").val("");
                $('#ProductId').val("");
                $('#RequisitionLineId').val("");
            }


            if($("#acProducts").val()=="")
            {
                $('#ProductId').val("");
                $('#RequisitionLineId').val("");
            }

            if($('#RequisitionLineId').val()!="" && $('#RequisitionLineId').val()!=0)
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetRequisitionDetail"))",
                    data: { RequisitionId: $("#RequisitionLineId").val() },
                    success: function (data) {
                        $('#acrequisitionline').val(data.RequisitionHeaderDocNo).attr('readonly','true');
                        $('#Qty').val(data.Qty);
                        $('#RequisitionBalanceQty').val(data.Qty);
                        $('#Specification').val(data.Specification);
                        $('#UnitName').val(data.UnitName);

                        if(data.CostCenterId)
                            (data.CostCenterId==null)?(1==1):($("#CostCenterId").select2("data", {id: data.CostCenterId, text: data.CostCenterName}).attr("readonly","true"));

                        (data.Dimension1Id==null)?(1==1):($("#Dimension1Id").select2("data", {id: data.Dimension1Id, text: data.Dimension1Name}));
                        (data.Dimension2Id==null)?(1==1):($("#Dimension2Id").select2("data", {id: data.Dimension2Id, text: data.Dimension2Name}));
                        (data.ProcessId==null)?(1==1):($("#ProcessId").select2("data", {id: data.ProcessId, text: data.ProcessName}));
                        (data.ProductId==null)?(1==1):($("#ProductId").select2("data", {id: data.ProductId, text: data.ProductName}));

                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
            else if($('#RequisitionLineId').val()=="")
            {
                $('#acrequisitionline').val("");
                $('#RequisitionBalanceQty').val(0);
                $('#Qty').val(0);
                $('#Specification').val("");
                $("#Dimension1Id").select2("val","");
                $("#Dimension2Id").select2("val","");
            }
        }
        );





        $(function() {
            $("#acProducts").autocomplete({
                delay: 500,
                minLength: 3,
                source: function(request,response){

                    //var matcher = new RegExp( $.ui.autocomplete.escapeRegex( request.term ), "i" );

                    //if (  request.term in cachearray ) {
                    //    response( cache[ term ] );
                    //    return;
                    //}

                    //else
                    //    {

                    var DocID = $('#StockHeaderId', '.modal-body').val();
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetCustomProducts"))",
                        data: { id:DocID, PersonId:$("#PersonId", '.modal-body').val(), term:request.term,Limit:30 },
                        success: function (data) {
                            if(data.length>0){
                                var cachearray = data.error ? [] : $.map(data, function(m) {

                                    return {
                                        value: m.ProductName,
                                        key: m.ProductId,
                                        spec:m.Specification,
                                        dim1: m.Dimension1Name,
                                        dim2:m.Dimension2Name,
                                        JO:m.HeaderDocNo,
                                        balqty:m.BalanceQty,
                                        linekey:m.LineId,
                                    };
                                });
                                response(cachearray);
                            }
                            else
                            {
                                var dimensions = { width: 10};
                                var cachearray=$.map(dimensions,function(value,key){
                                    return{
                                        value:"No Record Found!",
                                        key:null
                                    }
                                })
                                response(cachearray);
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            $('.ui-autocomplete-loading').removeClass("ui-autocomplete-loading");
                            alert('Failed to retrieve Pending Orders.' + thrownError);
                        }

                    });

                },
                appendTo : $("#myModalContent"),
                select: function(event, ui) {
                    // prevent autocomplete from updating the textbox
                    // navigate to the selected item's url
                    if($("#acProducts").val()=="")
                    {
                        $('#ProductId').val("");
                        $('#RequisitionLineId').val("");
                    }
                    else{
                        $("#ProductId").val(ui.item.key);
                        $("#RequisitionLineId").val(ui.item.linekey);
                    }
                },

            }).data("ui-autocomplete")._renderItem = function(ul, item) {
                var $a = $("<a></a>");
                $("<strong></strong>").text(item.value).appendTo($a);
                (item.balqty==null)?(""):($("<small></small>").text(" (Qty:"+item.balqty+")").appendTo($a));
                (item.spec==null)?(""):($("<br /><span class='small' style='font-weight:bold'></span>").text(item.spec).appendTo($a));
                (item.dim1==null)?(""):($(" <br /> <span class='small'></span>").text(item.dim1+",").appendTo($a));
                (item.dim2==null)?(""):($("<span class='small'></span>").text(item.dim2).appendTo($a));
                (item.JO==null)?(""):($("<br /><span class='small'></span>").text("Order:"+item.JO+",").appendTo($a));


                return $("<li></li>").append($a).appendTo(ul);
            }
        });

        //$("#acProducts").on("focus",function(){
        //    $(this).keydown();
        //})


    </script>
}
