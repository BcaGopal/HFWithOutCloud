@model Model.ViewModels.SaleQuotationLineViewModel
@using Core.Common

<style type="text/css">
    .cusleftnormal {
        border-bottom-left-radius: 0pc !important;
        border-top-left-radius: 0px !important;
    }

    .cusrightnormal {
        border-bottom-right-radius: 0px !important;
        border-top-right-radius: 0px !important;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> @ViewBag.DocNo</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "SaleQuotationLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {

            @Html.ValidationLog((string)TempData["CSEXCL"])
            <div class="form-horizontal modal-body">
                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.SaleQuotationHeaderId)
                @Html.HiddenFor(m => m.SaleQuotationLineId)
                @Html.HiddenFor(m => m.SaleEnquiryLineId)
                @Html.HiddenFor(m => m.SaleEnquiryBalanceQty)
                @Html.HiddenFor(m => m.SaleQuotationSettings.ProcessId)
                @Html.HiddenFor(m => m.SaleQuotationSettings.CalculationId)
                @Html.HiddenFor(m => m.DocTypeId)
                @Html.HiddenFor(m => m.SiteId)
                @Html.HiddenFor(m => m.DivisionId)
                @Html.HiddenFor(m => m.SaleQuotationSettings.CalculateDiscountOnRate)
                @Html.HiddenFor(m => m.SalesTaxGroupPersonId)

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ProductCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                @*<span id="status" class="text-danger"></span>*@
                            </div>
                        </div>
                    </div>




                    <div class="col-md-6" style="display:@(Model.SaleQuotationSettings.isVisibleSpecification?"":"none")">
                        @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleSpecification)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.SaleQuotationSettings.isVisibleDimension1?"":"none")">
                        @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, (Model.DocumentTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension1Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleQuotationSettings.isVisibleDimension2?"":"none")">
                        @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, (Model.DocumentTypeSettings.Dimension2Caption ?? "Dimension2"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension2Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>




                    <div class="col-md-6" style="display:@(Model.SaleQuotationSettings.isVisibleDimension3?"":"none")">
                        @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleDimension3)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension3Id, (Model.DocumentTypeSettings.Dimension3Caption ?? "Dimension3"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension3Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension3Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension3Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.SaleQuotationSettings.isVisibleDimension4?"":"none")">
                        @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleDimension4)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension4Id, (Model.DocumentTypeSettings.Dimension4Caption ?? "Dimension4"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension4Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension4Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension4Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleQuotationSettings.isVisibleSalesTaxGroupProduct ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleSalesTaxGroupProduct)
                        <div class="form-group">
                            @Html.LabelFor(model => model.SalesTaxGroupProductId, "Sales Tax Group Product", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.SalesTaxGroupProductId, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.SalesTaxGroupProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                <div class="col-xs-7" style="padding:0px;">
                                    @Html.TextBoxFor(model => model.Qty, new { @class = "form-control col-xs-3 required number" })
                                    @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-5" style="padding:0px">
                                    @Html.TextBoxFor(m => m.UnitId, new { @class = "form-control col-xs-2", @readonly = "true" })
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rate, "Rate", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7 required text-right" })
                                @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleQuotationSettings.isVisibleDiscountPer ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleDiscountPer)
                        <div class="form-group">
                            @Html.LabelFor(model => model.DiscountPer, "Discount %", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px;">
                                <div class="col-xs-5" style="padding-right:0px">
                                    @Html.TextBoxFor(model => model.DiscountPer, new { @class = "form-control col-xs-5 text-right" })
                                    @Html.ValidationMessageFor(model => model.DiscountPer, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-7" style="padding-left:0px">
                                    @Html.TextBoxFor(model => model.DiscountAmount, new { @class = "form-control col-xs-7 text-right" })
                                    @Html.ValidationMessageFor(model => model.DiscountAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6" style="display:@(Model.SaleQuotationSettings.isVisibleDealUnit?"":"none")">
                        @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleDealUnit)
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealUnitId, "Deal Unit", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                <div class="col-xs-7" style="padding:0px">
                                    @Html.DropDownListFor(model => model.DealUnitId, new SelectList(ViewBag.DeliveryUnitList as System.Collections.IEnumerable, "UnitId", "UnitName"), new { @class = "form-control height cusrightnormal required" })
                                    @Html.ValidationMessageFor(model => model.DealUnitId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-5" style="padding:0px">
                                    @Html.TextBoxFor(model => model.UnitConversionMultiplier, new { @class = "form-control required" })
                                    @Html.ValidationMessageFor(model => model.UnitConversionMultiplier, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.SaleQuotationSettings.isVisibleDealUnit?"":"none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealQty, "Deal Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.DealQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" >
                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, "Amount", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    



                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Remark, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}

                </div>

            </div>

        }
    </div>
</div>


@if (ViewBag.LineMode == "Create")
{
    <script type="text/javascript">
        $(function(){

            $.ajax({
                cache: false,
                url: "/TaxCalculation/GetMaxLineId/",
                data: { HeaderId: parseInt($('#SaleQuotationHeaderId').val()), LineTable:"Web.SaleQuotationLines", LineKeyField: "SaleQuotationLineId", HeaderKeyField:"SaleQuotationHeaderId"},
                success: function (data) {
                    AddCalculation(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrive calculation footer' + thrownError);
                },
            });


            function AddCalculation(MaxLineId)
            {
                AddCalculationFields(parseInt($('#SaleQuotationHeaderId').val()), true, '@Model.SaleQuotationSettings.CalculationId', "Web.SaleQuotationHeaderCharges", "Web.SaleQuotationLineCharges", MaxLineId, $('#DocTypeId','.modal-body').val(), $('#SiteId','.modal-body').val(),$('#DivisionId','.modal-body').val());
            }

        })
    </script>
}
else
{
    <script type="text/javascript">
        $(function(){
            AddCalculationFieldsEdit(parseInt($('#SaleQuotationHeaderId').val()), $('#SaleQuotationLineId').val(), false, "Web.SaleQuotationHeaderCharges", "Web.SaleQuotationLineCharges");
        })
    </script>
}





<script type="text/javascript">

    $(document).ready(function () {
        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', 'Enter Product Name', false, 3);
        var DocID = $('#SaleQuotationHeaderId', '.modal-body').val();
        CustomSelectFunction($("#ProductId"), '/SaleQuotationLine/GetCustomProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0,DocID);
        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', ' ', false, 0);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', ' ', false, 0);
        CustomSelectFunction($("#Dimension3Id"), '/ComboHelpList/GetDimension3', '/ComboHelpList/SetSingleDimension3', ' ', false, 0);
        CustomSelectFunction($("#Dimension4Id"), '/ComboHelpList/GetDimension4', '/ComboHelpList/SetSingleDimension4', ' ', false, 0);
        CustomSelectFunction($("#SalesTaxGroupProductId"), '/ComboHelpList/GetSalesTaxGroupProduct', '/ComboHelpList/SetSingleSalesTaxGroupProduct', ' ', false, 0);

        //var DocID = $('#SaleQuotationHeaderId', '.modal-body').val();
        //var URL = '/SaleQuotationLine/GetCustomProducts/'+ DocID;
        //$("#ProductId").select2({
        //    minimumInputLength: 1,
        //    multiple: false,
        //    ajax: {
        //        url: URL,
        //        dataType: 'json',
        //        type: "GET",
        //        quietMillis: 1000,
        //        data: function (term) {
        //            return {
        //                term: term,
        //            };
        //        },
        //        results: function (data) {
        //            return {
        //                results: $.map(data, function (item) {
        //                    return {
        //                        text: item.PropFirst,
        //                        id: item.Id
        //                    }
        //                })

        //            };
        //        }
        //    },
        //    initSelection: function (element, callback) {

        //        var xval = element.val();
        //        if (xval != 0) {
        //            $.ajax({
        //                cache: false,
        //                type: "POST",
        //                url: "/ComboHelpList/SetSingleProducts",
        //                data: { Ids: element.val() },
        //                success: function (data) {
        //                    callback(data);
        //                },
        //                error: function (xhr, ajaxOptions, thrownError) {
        //                    alert('Failed to Retrive Qty' + thrownError);
        //                }
        //            })
        //        }
        //    }
        //});




        var IsSaved=false;
        var ValidationCount=0;

        $('#modform').bind('submit',function(event){

            if(!IsSaved)
            {
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                $('button:submit').attr('disabled','disabled');
                return IsSaved;
            }
            else
            {
                return false;
            }


        });

        function ValidateData() {
            var ValidationMessage = "";

            //Client Side Validaion.....

            return  (ValidationMessage=="");

        }



        $('.datepicker').datepicker({
            format: 'dd/MM/yyyy',
            "setDate": new Date(),
            "autoclose": true

        })

        var id=@Model.SaleQuotationLineId;

        if(id>0)
        {
            var tex='@Model.SaleEnquiryDocNo';
            $("#acSaleEnquirys").val(tex);
            $('#ProductId').attr('readonly','true');
            $("#ProductUidName").attr('readonly', 'true');
            $('#acSaleEnquirys').attr('disabled','disabled');
            $('#Dimension1Id').attr('readonly','true');
            $('#Dimension2Id').attr('readonly','true');
            $('#Dimension3Id').attr('readonly','true');
            $('#Dimension4Id').attr('readonly','true');
            $('#Specification').attr('readonly','true');
        }
        var IsRefBased='@Model.IsRefBased';

        if(IsRefBased=='False')
        {
            $('#acSaleEnquirys').attr('disabled','disabled');
        }


        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/SaleQuotationLine/DeletePost';
                $('form#modform').attr('action',url);

                DeletingProductCharges();
                return;
            }
            else
            {
                return false;
            }
        })
    });

</script>

@if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create" || ViewBag.LineMode == "Delete")
{

    <script type="text/javascript">

        var decimalplaces='@Model.DealUnitDecimalPlaces';

        $(function(){

            $("#DealQty,#Rate,#Amount,#Qty,#UnitConversionMultiplier,#DiscountPer,#DiscountAmount").keyup(Calculation);
            $("#DealUnitId").change(GetUnitConversionMultiplier);
            $("#ProductId").change(GetProductDetail);
            $('#SalesTaxGroupProductId').change(function(){
                Validate_SalesTaxGroupProductId();
            })


            function GetProductDetail() {
                var ProcessProgress = $("#Product detail loading progress");
                ProcessProgress.show();
                if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetProductDetailJson"))",
                        data: { ProductId: $("#ProductId").val(),SaleQuotationId: $("#SaleQuotationHeaderId").val() },
                        success: function (data) {
                            $("#Rate").val(data.StandardCost);
                            $("#UnitId").val(data.UnitId);
                            $("#DealUnitId").val(data.DealUnitId);
                            $('#Specification').val(data.Specification);
                            decimalplaces=data.DealUnitDecimalPlaces;
                            GetUnitConversionMultiplier.call();

                            //$("#CALL_INCENTRATE").val(data.Discount);
                            $("#CALL_INCENTRATE").val(data.Incentive).trigger('change');
                            $("#LossQty").val(data.Loss);

                            (data.SalesTaxGroupProductId==null)?(1==1):($("#SalesTaxGroupProductId").select2("data", {id: data.SalesTaxGroupProductId, text: data.SalesTaxGroupProductName}));
                            GetChargeRates('@Model.SaleQuotationSettings.CalculationId',$('#DocTypeId','.modal-body').val(),$('#SiteId','.modal-body').val(),$('#DivisionId','.modal-body').val(),$('#SaleQuotationSettings_ProcessId','.modal-body').val(),$('#SalesTaxGroupPersonId','.modal-body').val(),$('#SalesTaxGroupProductId','.modal-body').val());

                            //Calculation.call();
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve product details.' + thrownError);
                        }
                    });
                }
            }


            function Validate_SalesTaxGroupProductId()
            {
                if ($("#SalesTaxGroupProductId").val() != 0 && $("#SalesTaxGroupProductId").val() != null) {
                    GetChargeRates('@Model.SaleQuotationSettings.CalculationId',$('#DocTypeId','.modal-body').val(),$('#SiteId','.modal-body').val(),$('#DivisionId','.modal-body').val(),$('#SaleQuotationSettings_ProcessId','.modal-body').val(),$('#SalesTaxGroupPersonId','.modal-body').val(),$('#SalesTaxGroupProductId','.modal-body').val());
                    Calculation();
                }
            }

            function GetUnitConversionMultiplier() {

                if ($("#UnitId").val() == $("#DealUnitId").val()) {
                    $("#UnitConversionMultiplier").val(1);
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetUnitConversionDetailJson"))",
                        data: { prodid: $("#ProductId").val(), UnitId: $("#UnitId").val(), DealUnitId: $("#DealUnitId").val(),SaleQuotationId:$('#SaleQuotationHeaderId').val() },

                        success: function (data) {
                            decimalplaces=data.DecimalPlace;
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve Unit conversion details.' + thrownError);
                        }
                    });
                    Calculation.call();
                }
                else {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetUnitConversionDetailJson"))",
                        data: { prodid: $("#ProductId").val(), UnitId: $("#UnitId").val(), DealUnitId: $("#DealUnitId").val(),SaleQuotationId:$('#SaleQuotationHeaderId').val() },

                        success: function (data) {
                            $("#UnitConversionMultiplier").val(data.Value);
                            decimalplaces=data.DecimalPlace;
                            Calculation.call();
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve Unit conversion details.' + thrownError);
                        }
                    });
                }
            }


            function Calculation() {
                if ($('#UnitConversionMultiplier').val() != 0) {
                    $('#DealQty').val(($('#Qty').val() * $('#UnitConversionMultiplier').val()).toFixed(decimalplaces))
                }
                //else
                //{
                //    $('#DealQty').val(0);
                //}
                
                //$('#Amount').val(($('#DealQty').val() * $('#Rate').val()).toFixed(2));

                TempAmount = ($('#DealQty').val() * $('#Rate').val())


                if ($('#SaleQuotationSettings_CalculateDiscountOnRate').val() == "True") {
                    TempRate = $('#Rate').val() - ($('#Rate').val() * $('#DiscountPer').val() / 100)
                    $('#DiscountAmount').val(($('#Rate').val() * $('#DiscountPer').val() / 100) * $('#DealQty').val());
                    $('#Amount').val(($('#DealQty').val() * TempRate).toFixed(2));
                }
                else{
                    if ($('#DiscountPer').val() != 0 && $('#DiscountPer').val() != null && $('#DiscountPer').val() != '')
                    {
                        $('#DiscountAmount').val(TempAmount * $('#DiscountPer').val() / 100);
                    }
                    $('#Amount').val((TempAmount - $('#DiscountAmount').val()).toFixed(2));
                }
                    

                ChargeCalculation();
            }
        })
    </script>
}

@if ((ViewBag.LineMode != "Create") && (ViewBag.LineMode != "Edit") && (ViewBag.LineMode != "Delete"))
{
    <script type="text/javascript">

        RemoveFields();

        function RemoveFields(){
            //Disabling input fields
            $(':input','.modal-body').attr('disabled','disabled');
        }


    </script>
}
