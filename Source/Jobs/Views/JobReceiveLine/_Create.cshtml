@model Model.ViewModel.JobReceiveLineViewModel
@using Core.Common

<style type="text/css">
    .ui-autocomplete {
        max-height: 250px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> @ViewBag.DocNo</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "JobReceiveLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {

         @Html.ValidationLog((string)TempData["CSEXCL"])
            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.JobReceiveLineId)
                @Html.HiddenFor(m => m.JobReceiveHeaderId)
                @*@Html.HiddenFor(m => m.JobOrderLineId)*@
                @Html.HiddenFor(m => m.JobWorkerId)
                @Html.HiddenFor(m => m.OrderBalanceQty)
                @Html.HiddenFor(m => m.UnitDecimalPlaces)
                @Html.HiddenFor(m => m.ProductId)
                @Html.HiddenFor(m => m.ProductUidId)
                @Html.HiddenFor(m => m.Dimension1Id)
                @Html.HiddenFor(m => m.Dimension2Id)
                @Html.HiddenFor(m => m.Dimension3Id)
                @Html.HiddenFor(m => m.Dimension4Id)
                @Html.HiddenFor(m => m.DealUnitDecimalPlaces)
                @Html.HiddenFor(m => m.ExcessReceiveAllowedAgainstOrderQty)
                @Html.HiddenFor(m => m.JobReceiveSettings.SqlProcProductUidHelpList)
                @Html.HiddenFor(m => m.JobReceiveSettings.ProcessId)
                @Html.HiddenFor(m => m.JobReceiveSettings.SqlProcConsumption)
                @Html.HiddenFor(m => m.JobReceiveSettings.isPostedInStock)
                @Html.HiddenFor(m => m.JobReceiveSettings.CalculationId)
                @Html.HiddenFor(m => m.JobReceiveSettings.isPostedInStockProcess)
                @Html.HiddenFor(m => m.JobReceiveSettings.LossPer)


                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                <div class="row">
                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.isVisibleProductUID?"":"none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.isVisibleProductUID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductUidId, (Model.DocumentTypeSettings.ProductUidCaption ?? "Product Uid"), new { @class = "control-label col-md-4 col-sm-2 " })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ProductUidCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductUidName, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductUidId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    @*<div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobOrderLineId, (Model.DocumentTypeSettings.ContraDocTypeCaption ?? "Order No."), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ContraDocTypeCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBox("     ", "", new { @class = "form-control", @id = "autocompleteorder" })
                                @Html.ValidationMessageFor(model => model.JobOrderLineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>*@

                    @*<div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-md-4 col-sm-2 " })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ProductCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>*@

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobOrderLineId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-md-4 col-sm-10" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ProductCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.JobOrderLineId, new { @class = "form-control  required" })
                                @Html.ValidationMessageFor(model => model.JobOrderLineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobOrderHeaderDocNo, (Model.DocumentTypeSettings.ContraDocTypeCaption ?? "Order No."), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ContraDocTypeCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.JobOrderHeaderDocNo, new { @class = "form-control", @readonly = "true" })
                                @Html.ValidationMessageFor(model => model.JobOrderHeaderDocNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.isVisibleDimension1?"":"none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.isVisibleDimension1)
                        @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension1Caption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, (Model.DocumentTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Name, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.isVisibleDimension2?"":"none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.isVisibleDimension2)
                        @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension2Caption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, (Model.DocumentTypeSettings.Dimension2Caption ?? "Dimension2"), new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Name, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.isVisibleDimension3?"":"none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.isVisibleDimension3)
                        @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension3Caption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension3Id, (Model.DocumentTypeSettings.Dimension3Caption ?? "Dimension3"), new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension3Name, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension3Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.isVisibleDimension4?"":"none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.isVisibleDimension4)
                        @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension4Caption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension4Id, (Model.DocumentTypeSettings.Dimension4Caption ?? "Dimension4"), new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension4Name, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension4Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.isVisibleSpecification? "" : "none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.isVisibleSpecification)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.isVisibleLotNo?"":"none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.isVisibleLotNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LotNo, "Lot No", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.isVisiblePlanNo?"":"none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.isVisiblePlanNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.PlanNo, "Plan No", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.PlanNo, new { @class = "form-control col-xs-7 ", @readonly = true })
                                @Html.ValidationMessageFor(model => model.PlanNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style='display:@(Model.JobReceiveSettings.isVisibleMachine?"":"none")'>
                        <div class="form-group">
                            @Html.HiddenFor(m => m.JobReceiveSettings.isMandatoryMachine)
                            @Html.HiddenFor(m => m.JobReceiveSettings.isVisibleMachine)
                            @Html.LabelFor(model => model.MachineId, "Machine", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.MachineId, new { @class = "form-control col-xs-6"})
                                @Html.ValidationMessageFor(m => m.MachineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DocQty, "Doc Qty", new { @class = "control-label col-md-4 col-sm-2" })                          
                            <div class="col-md-7 col-sm-10" style="padding:0px">
                                <div class="col-xs-7" style="padding-right:0px;">
                                    @Html.TextBoxFor(model => model.DocQty, new { @class = "form-control required cusrightnormal JobQuantity", roundOff = Model.UnitDecimalPlaces })
                                    @Html.ValidationMessageFor(model => model.DocQty, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-5" style="padding-left:0px">
                                    @Html.TextBoxFor(m => m.UnitId, new { @class = "form-control col-xs-2 cusleftnormal", @readonly = "true" })
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ReceiveQty, "Receive Qty", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ReceiveQty, new { @class = "form-control col-xs-7 required Quantity", roundOff = Model.UnitDecimalPlaces })
                                @Html.ValidationMessageFor(model => model.ReceiveQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.isVisibleLoss?"":"none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.isVisibleLoss)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LossQty, "Loss Qty", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.LossQty, new { @class = "form-control col-xs-7 required Quantity", roundOff = Model.UnitDecimalPlaces })
                                @Html.ValidationMessageFor(model => model.LossQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.IsVisiblePassQty?"":"none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.IsVisiblePassQty)
                        <div class="form-group">
                            @Html.LabelFor(model => model.PassQty, "Pass Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.PassQty, new { @class = "form-control col-xs-7 required", roundOff = Model.UnitDecimalPlaces + 1 })
                                @Html.ValidationMessageFor(model => model.PassQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.isVisibleDealUnit? "" : "none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.isVisibleDealUnit)
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealUnitId, "Deal Unit& Multiplier", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px">
                                <div class="col-xs-7" style="padding-right:0px">
                                    @Html.DropDownListFor(model => model.DealUnitId, new SelectList(ViewBag.DeliveryUnitList as System.Collections.IEnumerable, "UnitId", "UnitName"), new { @class = "form-control height cusrightnormal required", @readonly = "true" })
                                    @Html.ValidationMessageFor(model => model.DealUnitId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-5" style="padding-left:0px">
                                    @Html.TextBoxFor(model => model.UnitConversionMultiplier, new { @class = "form-control cusleftnormal required", @readonly = "true" })
                                    @Html.ValidationMessageFor(model => model.UnitConversionMultiplier, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.isVisibleDealUnit? "" : "none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealQty, "Deal Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control col-xs-7 required", roundOff = Model.DealUnitDecimalPlaces })
                                @Html.ValidationMessageFor(model => model.DealQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.IsVisiblePenalty? "" : "none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.IsVisiblePenalty)
                        <div class="form-group">
                            @Html.LabelFor(model => model.PenaltyRate, "Penality", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px">
                                <div class="col-xs-5" style="padding-right:0px">
                                    @Html.TextBoxFor(model => model.PenaltyRate, new { @class = "form-control cusrightnormal required" })
                                    @Html.ValidationMessageFor(model => model.PenaltyRate, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-7" style="padding-left:0px">
                                    @Html.TextBoxFor(model => model.PenaltyAmt, new { @class = "form-control cusleftnormal required" })
                                    @Html.ValidationMessageFor(model => model.PenaltyAmt, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.IsVisibleIncentive? "" : "none")">
                        @Html.HiddenFor(m => m.JobReceiveSettings.IsVisibleIncentive)
                        <div class="form-group">
                            @Html.LabelFor(model => model.IncentiveRate, "Incentive", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px">
                                <div class="col-xs-5" style="padding-right:0px">
                                    @Html.TextBoxFor(model => model.IncentiveRate, new { @class = "form-control cusrightnormal required" })
                                    @Html.ValidationMessageFor(model => model.IncentiveRate, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-7" style="padding-left:0px">
                                    @Html.TextBoxFor(model => model.IncentiveAmt, new { @class = "form-control cusleftnormal required" })
                                    @Html.ValidationMessageFor(model => model.IncentiveAmt, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobReceiveSettings.IsVisibleWeight?"":"none")">
                        @Html.HiddenFor(m=>m.JobReceiveSettings.IsVisibleWeight)
                        @Html.HiddenFor(m => m.JobReceiveSettings.IsMandatoryWeight)
                        @Html.HiddenFor(m => m.DocumentTypeSettings.WeightCaption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Weight, (Model.DocumentTypeSettings.WeightCaption ?? "Weight"), new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Weight, new { @class = "form-control required", roundOff = "3" })
                                @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextAreaFor(model => model.Remark, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}
                </div>
            </div>
        }
    </div>
</div>




<script type="text/javascript">


    $(document).ready(function () {
        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0);
        CustomSelectFunction($("#MachineId"), '/ComboHelpList/GetMachine', '/ComboHelpList/SetSingleMachine', ' ', false, 0);

        if ($('#JobReceiveSettings_SqlProcProductUidHelpList', '.modal-body').val() != null && $('#JobReceiveSettings_SqlProcProductUidHelpList', '.modal-body').val() != "")
        {
            CustomSelectFunction($("#ProductUidName"), '/JobReceiveLine/GetProductUidHelpList', '/JobReceiveLine/SetSingleProductUid', ' ', false, 0, $('#JobReceiveHeaderId', '.modal-body').val());
        }

        var DocID = $('#JobReceiveHeaderId', '.modal-body').val();
        CustomSelectFunction($("#JobOrderLineId"), '/JobReceiveLine/GetJobOrderForProduct', '/JobInvoiceReceiveLine/SetSingleJobOrderLine', ' ', false, 0,DocID);
        //CustomSelectFunction($("#PlanNo"), '/ComboHelpList/GetPlanNos', '/ComboHelpList/SetSinglePlanNo', ' ', false, 0);

        if($('#ProductUidId').val())
        {
            $('#DocQty').attr('readonly','true');
            $('#LotNo').attr('readonly', 'true');
        }

        var id=@Model.JobReceiveLineId;
        if(id>0)
        {
            var order = '@Model.JobOrderHeaderDocNo';
            $('#autocompleteorder').val(order).attr('disabled', 'disabled');
            $('#ProductId').attr('readonly', 'true');
            $('#ProductUidName').attr('readonly', 'true');

        }
        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/JobReceiveLine/DeletePost';
                $('form#modform').attr('action',url);
                DeletingProductCharges();
                return
            }
            else
            {
                return false;
            }
        })






    });

</script>

@if (Model.JobReceiveLineId <= 0)
{
    <script type="text/javascript">


        $("#JobOrderLineId").change(function(){
            Validate_JobOrderLine();
        });

        function Validate_JobOrderLine() {
            if($('#JobOrderLineId').val() && $('#JobOrderLineId').val()!=0 )
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetOrderDetail"))",
                    data: { OrderId: $("#JobOrderLineId").val(),ReceiveId:$('#JobReceiveHeaderId','.modal-body').val() },
                success: function (data) {
                    $('#JobOrderHeaderDocNo').val(data.JobOrderHeaderDocNo);
                    $('#ProductUidId').val(data.ProductUidId);
                    $('#ProductUidName').val(data.ProductUidName);


                    $('#UnitDecimalPlaces').val(data.UnitDecimalPlaces);
                    $('#DealUnitDecimalPlaces').val(data.DealUnitDecimalPlaces);


                    $('#ReceiveQty').val(data.Qty.toFixed(data.UnitDecimalPlaces));
                    $('#Specification').val(data.Specification);
                    $('#LotNo').val(data.LotNo);
                    $('#PlanNo').val(data.PlanNo);
                    $("#UnitId").val(data.UnitId);
                    $("#DealUnitId").val(data.DealUnitId);
                    $('#UnitConversionMultiplier').val(data.UnitConversionMultiplier);
                    $('#ExcessReceiveAllowedAgainstOrderQty').val(data.ExcessReceiveAllowedAgainstOrderQty);

                    //if(!$('#ProductUidId').val()){
                        $('#DocQty').val(data.Qty.toFixed(data.UnitDecimalPlaces));
                        $('#DealQty').val(data.DealQty.toFixed(data.DealUnitDecimalPlaces));
                    //}
                    $('#OrderBalanceQty').val(data.Qty);
                    //$("#ProductId").select2('data', { id: data.ProductId, text: data.ProductName});
                    $("#ProductId").val(data.ProductId);

                    $('#Dimension1Id').val(data.Dimension1Id);
                    $('#Dimension2Id').val(data.Dimension2Id);
                    $('#Dimension3Id').val(data.Dimension3Id);
                    $('#Dimension4Id').val(data.Dimension4Id);

                    $('#DocQty').trigger('focusout');
                    $('#ReceiveQty').trigger('keyup');
                    (data.Dimension1Name==null)?(1==1):($("#Dimension1Name").val(data.Dimension1Name))
                    if(data.Dimension2Name!=null)
                    {
                        $("#Dimension2Name").val(data.Dimension2Name)
                    }
                    if(data.Dimension3Name!=null)
                    {
                        $("#Dimension3Name").val(data.Dimension3Name)
                    }
                    if(data.Dimension4Name!=null)
                    {
                        $("#Dimension4Name").val(data.Dimension4Name)
                    }

                    //if (data.PlanNo != null)
                    //{
                    //    $("#PlanNo").select2('data', { id: data.PlanNo, text: data.PlanNo});
                    //}
                    //else{
                    //    $("#PlanNo").select2('data', { id: '', text: ''});
                    //}

                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Order details.' + thrownError);
                }
            });
        }
        else if($('#JobOrderLineId').val()=="")
        {
            $('#DocQty').val(0).trigger('keyup');
            $("#ProductId").select2('val', "");
            $('#LotNo').val('');
            $('#UnitConversionMultiplier').val(0);
            $('#Qty').val(0);
            $('#Specification').val("");
            $('#DealQty').val(0);
            $('#UnitDecimalPlaces').val(0);
            $('#DealUnitDecimalPlaces').val(0);
            $("#Dimension1Name").val("");
            $("#Dimension2Name").val("");
            $("#Dimension3Name").val("");
            $("#Dimension4Name").val("");
        }
    }


        @*$( "#autocompleteorder" ).focusout( function( ) {
            //alert(ui.item);
            //alert(ui.item.value);
            //alert($("#autocompleteorder").val());
            //alert($('#JobOrderLineId').val());
            if (!$(this).val()) {
                $("#autocompleteorder").val("");
                $('#JobOrderLineId').val("");
            }


            if($("#autocompleteorder").val()=="")
            {
                $('#JobOrderLineId').val("");
            }

            if($('#JobOrderLineId').val() && $('#JobOrderLineId').val()!=0 )
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetOrderDetail"))",
                    data: { OrderId: $("#JobOrderLineId").val(),ReceiveId:$('#JobReceiveHeaderId','.modal-body').val() },
                    success: function (data) {

                        $('#UnitDecimalPlaces').val(data.UnitDecimalPlaces);
                        $('#DealUnitDecimalPlaces').val(data.DealUnitDecimalPlaces);

                        $('#ReceiveQty').val(data.Qty.toFixed(data.UnitDecimalPlaces));
                        $('#Specification').val(data.Specification);
                        $('#LotNo').val(data.LotNo);
                        $("#UnitId").val(data.UnitId);
                        $("#DealUnitId").val(data.DealUnitId);
                        $('#UnitConversionMultiplier').val(data.UnitConversionMultiplier);
                        $('#ExcessReceiveAllowedAgainstOrderQty').val(data.ExcessReceiveAllowedAgainstOrderQty);

                        if(!$('#ProductUidId').val()){
                            $('#DocQty').val(data.Qty.toFixed(data.UnitDecimalPlaces));
                            $('#DealQty').val(data.DealQty.toFixed(data.DealUnitDecimalPlaces));
                        }
                        $('#OrderBalanceQty').val(data.Qty);
                        $("#ProductId").select2('data', { id: data.ProductId, text: data.ProductName});

                        $('#Dimension1Id').val(data.Dimension1Id);
                        $('#Dimension2Id').val(data.Dimension2Id);
                        $('#Dimension3Id').val(data.Dimension3Id);
                        $('#Dimension4Id').val(data.Dimension4Id);

                        $('#DocQty').trigger('focusout');
                        $('#ReceiveQty').trigger('keyup');
                        (data.Dimension1Name==null)?(1==1):($("#Dimension1Name").val(data.Dimension1Name))
                        if(data.Dimension2Name!=null)
                        {
                            $("#Dimension2Name").val(data.Dimension2Name)
                        }
                        if(data.Dimension3Name!=null)
                        {
                            $("#Dimension3Name").val(data.Dimension3Name)
                        }
                        if(data.Dimension4Name!=null)
                        {
                            $("#Dimension4Name").val(data.Dimension4Name)
                        }

                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Order details.' + thrownError);
                    }
                });
            }
            else if($('#JobOrderLineId').val()=="")
            {
                $('#DocQty').val(0).trigger('keyup');
                $("#ProductId").select2('val', "");
                $('#LotNo').val('');
                $('#UnitConversionMultiplier').val(0);
                $('#Qty').val(0);
                $('#Specification').val("");
                $('#DealQty').val(0);
                $('#UnitDecimalPlaces').val(0);
                $('#DealUnitDecimalPlaces').val(0);
                $("#Dimension1Name").val("");
                $("#Dimension2Name").val("");
                $("#Dimension3Name").val("");
                $("#Dimension4Name").val("");
            }
        }
        );*@





        @*$(function() {
            var CurrentPageCount=0;
            var MaxPageSize=20;
            var Req='';
            var Res='';
            var i=0;
            $("#autocompleteorder").autocomplete({
                delay: 500,
                minLength: 3,
                source: function(request,response){

                    //var matcher = new RegExp( $.ui.autocomplete.escapeRegex( request.term ), "i" );
                    Req=request.term;
                    //if (  request.term in cachearray ) {
                    //    response( cache[ term ] );
                    //    return;
                    //}

                    //else
                    //    {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetPendingOrders"))",
                        data: { HeaderId:$("#JobReceiveHeaderId").val(),term:request.term,Limit:20 },
                        success: function (data) {
                            if(data.length>0){
                                var cachearray = data.error ? [] : $.map(data, function(m) {

                                    return {
                                        value: m.DocNo,
                                        key: m.JobOrderLineId,
                                        dim1: m.Dimension1Name,
                                        dim2:m.Dimension2Name,
                                        dim3: m.Dimension3Name,
                                        dim4:m.Dimension4Name,
                                        prod:m.ProductName,
                                        balqty:m.BalanceQty,
                                        idx:i++,
                                    };
                                });
                                response(cachearray);
                            }
                            else
                            {
                                var dimensions = { width: 10};
                                var cachearray=$.map(dimensions,function(value,key){
                                    return{
                                        value:"No Record Found!",
                                        key:null
                                    }
                                })
                                response(cachearray);
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            $('.ui-autocomplete-loading').removeClass("ui-autocomplete-loading");
                            alert('Failed to retrieve Pending Orders.' + thrownError);
                        }

                    });


                    //}

                },
                appendTo : $("#myModalContent"),
                select: function(event, ui) {
                    // prevent autocomplete from updating the textbox
                    // navigate to the selected item's url
                    if($("#autocompleteorder").val()=="")
                    {
                        $('#JobOrderLineId').val("");
                    }
                    else
                        $("#JobOrderLineId").val(ui.item.key);

                },
                focus: function( event, ui ) {
                    //log( "focus: " + ui.item.label );
                    //$('#modform').find('.modal-body').prepend("<span >"+ ui.item.idx+"</span>")
                },
            }).data("ui-autocomplete")._renderItem = function(ul, item) {
                var $a = $("<a></a>");
                $("<strong></strong>").text(item.value).appendTo($a);
                (item.prod==null)?(""):($("<br /><span class='small' style='font-weight:bold'></span>").text(item.prod).appendTo($a));
                (item.dim1==null)?(""):($("<br /><span class='small'></span>").text(item.dim1+",").appendTo($a));
                (item.dim2==null)?(""):( item.dim1==null ? ($("<br /><span class='small'></span>").text(item.dim2).appendTo($a)) : ($("<span class='small'></span>").text(item.dim2).appendTo($a)) );
                (item.balqty==null)?(""):($("<br /><span class='small'></span>").text("BalQty:"+item.balqty).appendTo($a));

                return $("<li></li>").append($a).appendTo(ul);
            }
        });*@

        //$("#autocompleteorder").on("focus",function(){
        //    $(this).keydown();
        //})

        $('#ProductUidName').on('change',function(e){



            var data=InitializePopoverForJobReceive(this,$("#ProductUidName").val(),'@Model.JobReceiveSettings.isPostedInStock',$('#JobReceiveHeaderId').val(),TransactionTypeConstantsEnum.Receive);


            if(!data.status)
            {
                $(this).popover('show');
                setTimeout(function() {$('#ProductUidName').popover('destroy');if(!$('#ProductId').val()){ $('#ProductUidName').val('') }else{$('#ProductId').trigger('change');  }},10000);
                $('#JobOrderLineId').val(0);
                $('#autocompleteorder').val("").trigger('focusout').removeAttr('disabled');
            }
            else if( data.data.Branch ){
                if( !data.data.LastTransactionDocLineId || !data.data.LastTransactionDocNo){
                    if (!$('#modform').find('.modal-body #errormsg').length) {
                        $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >Issue details not found</span></div>")
                    }
                }
                //$('#JobOrderLineId').val(data.data.LastTransactionDocLineId);
                //$('#autocompleteorder').val(data.data.LastTransactionDocNo).trigger('focusout').attr('disabled', 'disabled');

                $('#ProductId').val(data.data.ProductId);
                $("#JobOrderLineId").select2('data', { id: data.data.LastTransactionDocLineId, text: data.data.ProductName});
                $('#JobOrderLineId').attr("readonly","true");
                Validate_JobOrderLine();
            }
            else
            {
                if( !data.data.GenLineId || !data.data.GenDocNo){
                    if (!$('#modform').find('.modal-body #errormsg').length) {
                        $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >Issue details not found</span></div>")
                    }
                }

                //$('#JobOrderLineId').val(data.data.GenLineId);
                //$('#autocompleteorder').val(data.data.GenDocNo).trigger('focusout').attr('disabled', 'disabled');

                $('#ProductId').val(data.data.ProductId);
                $('#JobOrderLineId').val(data.data.GenLineId);
                Validate_JobOrderLine();;
            }



        })

    </script>


}

<script type="text/javascript">
    var decimalplaces=0;
    var dealunitdecimalplaces=0;
    $(function () {
        //$("#DealQty,#PassQty").keyup(Calculation);
        // $("#DealUnitId").change(GetUnitConversionMultiplier);
        //$("#ProductId").change(GetProductDetail);

        var id=@Model.JobReceiveLineId;
        if(id>0)
        {
            var tex='@Model.JobOrderHeaderDocNo';
            $("#autocompleteorder").val(tex);
        }

        @*function GetUnitConversionMultiplier() {

            if ($("#UnitId").val() == $("#DealUnitId").val()) {
                $("#UnitConversionMultiplier").val(1);
                Calculation.call();
            }

            else {

                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetUnitConversionDetailJson"))",
                    data: { ProductId: $("#ProductId").val(), UnitId: $("#UnitId").val(), DeliveryUnitId: $("#DealUnitId").val() },

                    success: function (data) {
                        $("#UnitConversionMultiplier").val(data[0].Value);
                        Calculation.call();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Unit conversion details.' + thrownError);
                        ProcessProgress.hide();
                    }
                });
            }
        }*@


        //function Calculation() {



        //    if ($('#UnitConversionMultiplier').val() != 0) {
        //        $('#DealQty').val(parseFloat($('#PassQty').val() * $('#UnitConversionMultiplier').val()).toFixed($('#DealUnitDecimalPlaces').val()));
        //    }
        //    else
        //    {
        //        $('#DealQty').val(0);
        //    }
        //    //ChargeCalculation();
        //}

    });

    //$('.JobQuantity').keyup(CalculatePass);

    //$('.Quantity').change(CalculatePass);

    //$('.Quantity').keyup(CalculateLossQty);

    //$('#PassQty').keyup(ValidateMinPassQty);




    //function CalculatePass(){

    //    var qty=parseFloat($('#DocQty').val());
    //    if($('#LossQty').val()==0)
    //    {
    //        $('#ReceiveQty').val(qty.toFixed($('#UnitDecimalPlaces').val()));
    //        $('#PassQty').val(qty.toFixed($('#UnitDecimalPlaces').val()));
    //    }
    //    else
    //    {
    //        $('#ReceiveQty').val(parseFloat(qty-$('#LossQty').val()).toFixed($('#UnitDecimalPlaces').val()));
    //        $('#PassQty').val(qty.toFixed($('#UnitDecimalPlaces').val()));
    //    }

    //}


    //function CalculateLossQty(){

    //    if(parseFloat($('#ReceiveQty').val())<=parseFloat($('#DocQty').val()))
    //    {
    //        $('#LossQty').val((parseFloat($('#DocQty').val()-$('#ReceiveQty').val())).toFixed($('#UnitDecimalPlaces').val()))
    //    }
    //    else
    //    {
    //        $('#ReceiveQty').val(parseFloat($('#DocQty').val()).toFixed($('#UnitDecimalPlaces').val()));
    //    }
    //}



    $('#DocQty').focusout(function(){
        $(this).val((parseFloat($(this).val())).toFixed($('#UnitDecimalPlaces').val()));
        $('#PassQty').val($(this).val());
        $('#ReceiveQty').val($(this).val());
        Calculation();
        ValidateData();
        return;
    });


    $('#DealQty,#PassQty,#DocQty,#ReceiveQty,#LossQty').keyup(function(){
        Calculation();
    });

    $('#DealQty,#PassQty,#ReceiveQty,#LossQty').focusout(function(){
        ValidateData();
    });

    $('#IncentiveRate').keyup(function(){

        if($(this).val() && $(this).val() > 0)
        {
            $('#IncentiveAmt').val(($(this).val() * $('#DealQty').val()).toFixed(2))
        }
    })

    $('#PenaltyRate').keyup(function(){

        if($(this).val() && $(this).val() > 0)
        {
            $('#PenaltyAmt').val(($(this).val() * $('#DealQty').val()).toFixed(2))
        }
    })

    function Calculation()
    {
        $('#LossQty').val((parseFloat($('#DocQty').val()-$('#ReceiveQty').val())).toFixed($('#UnitDecimalPlaces').val()))

        if ($('#UnitConversionMultiplier').val() != 0) {
            $('#DealQty').val(parseFloat($('#ReceiveQty').val() * $('#UnitConversionMultiplier').val()).toFixed($('#DealUnitDecimalPlaces').val()));
        }
    }

    var allowedLossPer =$('#JobReceiveSettings_LossPer').val();
    function ValidateData()
    {

        var ValidationMessage = "";

        if ($('#ExcessReceiveAllowedAgainstOrderQty').val() == null || $('#ExcessReceiveAllowedAgainstOrderQty').val() == 0)
        {
            //Check that Pass Qty can not exceed Job Qty.
            if (parseFloat($('#DocQty').val() - $('#PassQty').val()) < 0) {

                ValidationMessage="PassQty exceeding DocQty";

            }


            //Check that Receive Qty can not exceed Job Qty.
            if (parseFloat($('#DocQty').val() - $('#ReceiveQty').val()) < 0) {

                ValidationMessage="ReceiveQty exceeding DocQty";

            }



            //Check that Job Qty can not exceed Order Balance Qty.
            if (($('#OrderBalanceQty').val() - $('#DocQty').val()) < 0) {
                alert("Test");
                ValidationMessage="DocQty exceeding Order Balance Qty";

            }
        }

        //Check that Loss Qty can not exceed allowed Loss Percentage.
        if (allowedLossPer != null && allowedLossPer != "")
        {
            if ($('#LossQty').val() > ($('#DocQty').val() * allowedLossPer / 100) ) 
            {
                ValidationMessage="Loss Qty exceeding allowed loss % [" + allowedLossPer.toString() + "]" ;
            }
        }


        if(!ValidationMessage=="")
        {
            $('#submit', '.modal-body').attr('disabled', 'disabled');
            if (!$('#modform').find('.modal-body #errormsg').length) {
                $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >"+ValidationMessage+"</span></div>")
            }
            else
                $('#modform').find('.modal-body #errormsg').text(ValidationMessage);
        }
        else
        {
            $('#submit', '.modal-body').removeAttr('disabled');
            $('#modform').find('#errormsg').parent().remove();
        }

        return(ValidationMessage=="");


    }

    var IsSaved=false;
    var ValidationCount=0;

    $('#modform').bind('submit',function(event){

        if(!IsSaved)
        {
            Calculation();
            if(!ValidateData())
            {
                event.stopImmediatePropagation();
                return false;                
            }
            IsSaved=true;
            $('button:submit').attr('disabled','disabled');
            return IsSaved;
        }
        else
        {
            event.stopImmediatePropagation();
            return false;
        }

    });




</script>
