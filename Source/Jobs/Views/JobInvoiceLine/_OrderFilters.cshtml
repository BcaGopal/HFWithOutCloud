@model Model.ViewModel.JobInvoiceLineFilterViewModel
@using Core.Common

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Filters</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_FilterPostOrders", "JobInvoiceLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {

            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.JobInvoiceHeaderId)
                @Html.HiddenFor(m => m.JobWorkerId)


                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.AsOnDate, "As On Date", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.AsOnDate, "{0:dd/MMMM/yyyy}", new { @class = "datepicker form-control required" })
                                @Html.ValidationMessageFor(model => model.AsOnDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobOrderHeaderId, "Order No.", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.JobOrderHeaderId, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.JobOrderHeaderId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleHeaderJobWorker ? "none" : "")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleHeaderJobWorker)
                        @Html.HiddenFor(m => m.DocumentTypeSettings.PartyCaption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobWorkerIds, (Model.DocumentTypeSettings.PartyCaption ?? "Party"), new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.JobWorkerIds, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.JobWorkerIds, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                <span id="status" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductGroupId, (Model.DocumentTypeSettings.ProductGroupCaption ?? "Product Group"), new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductGroupId, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.ProductGroupId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>               

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom" name="Command:Edit" type="submit"><h2 style="margin:0px" id="submit" title="Proceed"><span class="glyphicon glyphicon-arrow-right black"></span> </h2></button>
                </div>

            </div>

        }
    </div>
</div>


<script type="text/javascript">

    $(document).ready(function () {

        var DocID = $('#JobInvoiceHeaderId', '.modal-body').val();
        var ProcessId = '@Model.JobInvoiceSettings.ProcessId';

        CustomSelectFunction($("#ProductGroupId"), '/ComboHelpList/GetProductGroup', '/ComboHelpList/SetProductGroup', ' ', true, 1);
        CustomSelectFunction($("#JobWorkerIds"), '/ComboHelpList/GetJobWorkersWithProcess', '/ComboHelpList/SetJobworkers', ' ', true, 1, ProcessId);

        $('.datepicker').datepicker({
            format: 'dd/MM/yyyy',
            "setDate": new Date(),
            "autoclose": true
        })

        var URL = '/JobInvoiceLine/GetPendingJobReceiveProducts/' + DocID;
        $("#ProductId").select2({
            minimumInputLength: 1,
            multiple: true,
            ajax: {
                url: URL,
                dataType: 'json',
                type: "GET",
                quietMillis: 500,
                data: function (term) {
                    return {
                        term: term,
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.PropFirst,
                                id: item.Id
                            }
                        })

                    };
                }
            },


        });


        var URLJO = '/JobInvoiceLine/GetPendingJobOrders/' + DocID;
        $("#JobOrderHeaderId").select2({
            minimumInputLength: 1,
            multiple: true,
            ajax: {
                url: URLJO,
                dataType: 'json',
                type: "GET",
                quietMillis: 500,
                data: function (term) {
                    return {
                        term: term,
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.PropFirst,
                                id: item.Id
                            }
                        })

                    };
                }
            },


        });



    });



</script>