@model Model.ViewModel.PurchaseInvoiceReturnLineViewModel
@using Core.Common

<style type="text/css">
    .cusleftnormal {
        border-bottom-left-radius: 0pc !important;
        border-top-left-radius: 0px !important;
    }

    .cusrightnormal {
        border-bottom-right-radius: 0px !important;
        border-top-right-radius: 0px !important;
    }

    .ui-autocomplete {
        max-height: 250px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Products</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "PurchaseInvoiceReturnLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
           @Html.ValidationLog((string)TempData["CSEXCL"])
            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.PurchaseInvoiceReturnHeaderId)
                @Html.HiddenFor(m => m.PurchaseInvoiceReturnLineId)
                @Html.HiddenFor(m => m.PurchaseInvoiceLineId)
                @Html.HiddenFor(m => m.SupplierId)
                @Html.HiddenFor(m => m.CalculateDiscountOnRate)
                @Html.HiddenFor(m => m.InvoiceBalQty)
                @Html.HiddenFor(m => m.DocTypeId)
                @Html.HiddenFor(m => m.SiteId)
                @Html.HiddenFor(m => m.DivisionId)
                @Html.HiddenFor(m => m.PurchInvoiceSettings.CalculationId)

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, "Product", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PurchaseInvoiceLineId, "Purchase Invoice", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBox(" ", " ", new { @class = "form-control", @id = "acinvoices" })
                                @Html.ValidationMessageFor(model => model.PurchaseInvoiceLineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.PurchInvoiceSettings.isVisibleDimension1 ? "" : "none")">
                        @Html.HiddenFor(m => m.PurchInvoiceSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Name, "Dimension1", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Name, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension1Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.PurchInvoiceSettings.isVisibleDimension2 ? "" : "none")">
                        @Html.HiddenFor(m => m.PurchInvoiceSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Name, "Dimension2", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Name, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension2Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.PurchInvoiceSettings.isVisibleLotNo ? "" : "none")">
                        @Html.HiddenFor(m => m.PurchInvoiceSettings.isVisibleLotNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LotNo, "Lot No", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px;">
                            <div class="col-xs-7" style="padding-right:0px;">
                                @Html.TextBoxFor(model => model.Qty, new { @class = "form-control required cusrightnormal" })
                                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-5" style="padding-left:0px">
                                @Html.TextBoxFor(m => m.UnitId, new { @class = "form-control col-xs-2 cusleftnormal", @readonly = "true" })
                            </div>
                             </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealUnitId, "Deal Unit & Multiplier", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px;">
                            <div class="col-xs-7" style="padding-right:0px;">
                                @Html.TextBoxFor(m => m.DealUnitId, new { @class = "form-control col-xs-2 cusleftnormal", @readonly = "true" })
                                @Html.ValidationMessageFor(model => model.DealUnitId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-5" style="padding-left:0px">
                                @Html.TextBoxFor(model => model.UnitConversionMultiplier, new { @class = "form-control col-xs-7 required", @readonly = true })
                            </div>
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rate, "Rate", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealQty, "Deal Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control required cusrightnormal", @readonly = true })
                                @Html.ValidationMessageFor(model => model.DealQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DiscountPer, "Discount %", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DiscountPer, new { @class = "form-control col-xs-7 text-right" })
                                @Html.ValidationMessageFor(model => model.DiscountPer, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, "Amount", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextAreaFor(model => model.Remark, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>



                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}

                </div>

            </div>
        }
    </div>
</div>

@if (Model.PurchaseInvoiceLineId <= 0)
{
    <script type="text/javascript">
        $(function(){

            $.ajax({
                cache: false,
                url: "/TaxCalculation/GetMaxLineId/",
                data: { HeaderId: parseInt($('#PurchaseInvoiceReturnHeaderId').val()), LineTable:"Web.PurchaseInvoiceReturnLines" , LineKeyField: "PurchaseInvoiceReturnLineId" ,HeaderKeyField:"PurchaseInvoiceReturnHeaderId"},
                success: function (data) {
                    AddCalculation(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrive calculation footer' + thrownError);
                },
            });


            function AddCalculation(MaxLineId)
            {
                AddCalculationFields(parseInt($('#PurchaseInvoiceReturnHeaderId').val()),false,'@Model.PurchInvoiceSettings.CalculationId',"Web.PurchaseInvoiceReturnHeaderCharges","Web.PurchaseInvoiceReturnLineCharges",MaxLineId, $('#DocTypeId','.modal-body').val(),$('#SiteId','.modal-body').val(),$('#DivisionId','.modal-body').val());
            }

        })
    </script>
}
else
{
    <script type="text/javascript">
        $(function(){
            AddCalculationFieldsEdit(parseInt($('#PurchaseInvoiceReturnHeaderId').val()),$('#PurchaseInvoiceReturnLineId').val(),false,"Web.PurchaseInvoiceReturnHeaderCharges","Web.PurchaseInvoiceReturnLineCharges");
        })
    </script>
}

<script type="text/javascript">

    //var cachearray={};

    $(document).ready(function () {

        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', 'Enter Product', false, 3);

        var DocID = $('#PurchaseInvoiceReturnHeaderId', '.modal-body').val();
        var URL = '/PurchaseInvoiceReturnLine/GetCustomProducts/'+ DocID;
        $("#ProductId").select2({
            minimumInputLength: 1,
            multiple: false,
            ajax: {
                url: URL,
                dataType: 'json',
                type: "GET",
                quietMillis: 1000,
                data: function (term) {
                    return {
                        term: term,
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.PropFirst,
                                id: item.Id
                            }
                        })

                    };
                }
            },
            initSelection: function (element, callback) {

                var xval = element.val();
                if (xval != 0) {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "/ComboHelpList/SetSingleProducts",
                        data: { Ids: element.val() },
                        success: function (data) {
                            callback(data);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to Retrive Qty' + thrownError);
                        }
                    })
                }
                //callback([{ id: "1", text: "arpit" }, { id: "2", text: "akash" }]);
            }


        });


        $("#ProductId").select2("focus");

        $('.datepicker').datepicker({
            format: 'dd/MM/yyyy',
            "setDate": new Date(),
            "autoclose": true
        })

        var id=@Model.PurchaseInvoiceReturnLineId;
        if(id>0)
        {
            var tex='@Model.PurchaseInvoiceHeaderDocNo';
            $("#acinvoices").val(tex);
            //LockFields();
            $('#ProductId').attr('readonly','true');
            $('#acinvoices').attr('disabled','disabled');
        }

        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/PurchaseInvoiceReturnLine/DeletePost';
                $('form#modform').attr('action',url);
                DeletingProductCharges();
                return;
            }
            else
            {
                return false;
            }
        })
    });

    function LockFields(){
        $("#Dimension1Name").attr('readonly','true');
        $("#Dimension2Name").attr('readonly','true');
        $('#Qty').attr('readonly','true');
        $('#LotNo').attr('readonly','true');
        $('#Specification').attr('readonly','true');
    }
    function UnLockFields(){
        $("#Dimension1Name").removeAttr('readonly');
        $("#Qty").removeAttr('readonly');
        $("#Dimension2Name").removeAttr('readonly');
        $("#LotNo").removeAttr('readonly');
        $("#Specification").removeAttr('readonly');
    }

    $( "#acinvoices" ).autocomplete({
        change: function( event, ui ) {
            if (ui.item== null || ui.item.value == undefined) {
                $("#acinvoices").val("");
                $('#PurchaseInvoiceLineId').val("");
            }


            if($("#acinvoices").val()=="")
            {
                $('#PurchaseInvoiceLineId').val("");
            }

            if($('#PurchaseInvoiceLineId').val()!="")
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetInvoiceDetail"))",
                    data: { InvoiceLineId: $("#PurchaseInvoiceLineId").val() },
                    success: function (data) {
                        $('#Qty').val(data.Qty);
                        $('#UnitId').val(data.UnitId);
                        $('#InvoiceBalQty').val(data.Qty);
                        $('#UnitConversionMultiplier').val(data.UnitConversionMultiplier);
                        $('#Rate').val(data.Rate);
                        $('#DealUnitId').val(data.DealUnitId);
                        $('#Specification').val(data.Specification);
                        $('#LotNo').val(data.LotNo);
                        $("#Dimension1Name").val(data.Dimension1Name)
                        $("#Dimension2Name").val(data.Dimension2Name)
                        $("#DiscountPer").val(data.DiscountPer)
                        CalculateRate();
                        //LockFields();
                        ChargeCalculation();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
            else if($('#PurchaseInvoiceLineId').val()=="")
            {
                $('#Qty').val(0);
                $('#UnitConversionMultiplier').val(0);
                $('#Rate').val(0);
                $('#DealUnitId').val(0);
                $('#InvoiceBalQty').val(0);
                $('#LotNo').val("");
                $('#UnitId').val(0);
                $('#Specification').val("");
                $("#Dimension1Name").val("");
                $("#Dimension2Name").val("");
                //UnLockFields();
                CalculateRate();
            }
        }
    });





    $(function() {
        $("#acinvoices").autocomplete({
            source: function(request,response){
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetPendingInvoices"))",
                    data: { ProductId: $("#ProductId").val(),PurchaseInvoiceReturnHeaderId:$("#PurchaseInvoiceReturnHeaderId",".modal-body").val(),term:request.term,Limit:20 },
                    success: function (data) {
                        if(data.length>0){
                            var cachearray = data.error ? [] : $.map(data, function(m) {
                                return {
                                    value: m.DocNo,
                                    Receipt: m.GoodsReceiptDocNo,
                                    key: m.PurchaseInvoiceLineId,
                                    dim1: m.Dimension1Name,
                                    dim2:m.Dimension2Name,
                                    balqty:m.BalanceQty,

                                };
                            });
                            response(cachearray);
                        }
                        else
                        {
                            var dimensions = { width: 10};
                            var cachearray=$.map(dimensions,function(value,key){
                                return{
                                    value:"No Record Found!",
                                    key:null
                                }
                            })
                            response(cachearray);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Pending Indents.' + thrownError);
                    }

                });


            },
            appendTo : $("#myModalContent"),
            select: function(event, ui) {
                // prevent autocomplete from updating the textbox
                // navigate to the selected item's url
                if($("#acinvoices").val()=="")
                {
                    $('#PurchaseInvoiceLineId').val("");
                }
                else
                    $("#PurchaseInvoiceLineId").val(ui.item.key);

            },

        }).data("ui-autocomplete")._renderItem = function(ul, item) {
            var $a = $("<a></a>");
            $("<strong></strong>").text("Invoice:"+item.value).appendTo($a);
            $("<br /><small></small>").text("Receipt:"+item.Receipt).appendTo($a);
            (item.dim1==null)?(""):($("<br /><span class='small'></span>").text(item.dim1+",").appendTo($a));
            (item.dim2==null)?(""):($("<span class='small'></span>").text(item.dim2).appendTo($a));
            (item.balqty==null)?(""):($("<br /><span class='small'></span>").text("BalQty:"+item.balqty).appendTo($a));

            return $("<li></li>").append($a).appendTo(ul);
        }
    });

    $("#acinvoices").bind("focus",function(){
        $(this).keydown();
    })

    $('#Qty,#Rate,#DiscountPer').keyup(function () {
        ValidateQty();
        CalculateRate();
    })


    function ValidateQty(){
        if (($('#InvoiceBalQty').val() - $('#Qty').val()) < 0) {
            $('#submit', '.modal-body').attr('disabled', 'disabled');
            if ($('#Qty').closest('div.col-xs-4').find('span#cerror').length == 0)
            {
                $('#Qty').parents('.col-xs-4').append("<span class='text-danger' id='cerror'>Qty exceeding InvoiceQty</span>")
            }
        }
        else
        {
            $('#submit', '.modal-body').removeAttr('disabled');
            if ($('#Qty').closest('div.col-xs-4').find('span#cerror').length > 0)
            {
                $('#Qty').closest('.col-xs-4').find('span#cerror').remove();
            }
        }
    }

    function CalculateRate(){
        var TempAmount = 0;
        var DiscountAmount = 0;
        var TempRate = 0;

        $('#DealQty').val($('#UnitConversionMultiplier').val()*$('#Qty').val());

        //$('#Amount').val($('#Rate').val()*$('#DealQty').val());


        TempAmount = ($('#DealQty').val() * $('#Rate').val())

        if ($('#CalculateDiscountOnRate').val() != 0 &&  $('#CalculateDiscountOnRate').val() != null) {
            TempRate = $('#Rate').val() - ($('#Rate').val() * $('#DiscountPer').val() / 100)
            $('#Amount').val(($('#DealQty').val() * TempRate).toFixed(2));
        }
        else{
            DiscountAmount = TempAmount * $('#DiscountPer').val() / 100;
            $('#Amount').val((TempAmount - DiscountAmount).toFixed(2));
        }

        ChargeCalculation();
    }

</script>