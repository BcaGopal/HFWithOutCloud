@model Model.ViewModel.RequisitionCancelFilterViewModel
@using Core.Common

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Filters</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_FilterPost", "MaterialRequestCancelLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {


            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.PersonId)
                @Html.HiddenFor(model => model.RequisitionCancelHeaderId)

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.RequisitionId, "Order", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.RequisitionId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.RequisitionId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProductId, "Product ", new { @class = "control-label col-md-4 col-sm-2 " })
                                <div class="col-md-7 col-sm-10">
                                    @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                    @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })                                    
                                </div>
                            </div>
                        </div>                                                  
                
                 
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductGroupId, "Design", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductGroupId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductGroupId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, "Dimension1", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                                <span id="status" class="text-danger"></span>
                            </div>
                        </div>
                    </div>                   
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, "Dimension2", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CostCenterId, "CostCenter", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.CostCenterId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.CostCenterId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom" name="Command:Edit" type="submit"><h2 style="margin:0px" id="submit" title="Proceed" ><span class="glyphicon glyphicon-arrow-right black"></span> </h2></button>                  
                </div>

            </div>

        }
    </div>
</div>


<script type="text/javascript">


    $(document).ready(function () {
        $("#ProductId").select2("focus");        
        CustomSelectFunction($("#ProductGroupId"), '/ComboHelpList/GetProductGroup', '/ComboHelpList/SetProductGroup', 'Enter Design', true, 1);
        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', 'Dimension1', true, 1);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', 'Dimension2', true, 1);

        var DocId = $('#RequisitionCancelHeaderId', ".modal-body").val();

        CustomSelectFunction($("#ProductId"), '/MaterialRequestCancelLine/GetPendingProductsForFilters', '/ComboHelpList/SetSingleProduct', 'Enter Product', true, 1, DocId);
        CustomSelectFunction($("#CostCenterId"), '/MaterialRequestCancelLine/GetPendingCostCentersForFilters', '/ComboHelpList/SetSingleCostCenter', 'Enter CostCenter', true, 1, DocId);

        //$("#ProductId").select2({
        //    minimumInputLength: 1,
        //    multiple: true,
        //    ajax: {
        //        url: URL,
        //        dataType: 'json',
        //        type: "GET",
        //        quietMillis: 500,
        //        data: function (term) {
        //            return {
        //                term: term,
        //                Limit:20,
        //            };
        //        },
        //        results: function (data) {
        //            return {
        //                results: $.map(data, function (item) {
        //                    return {
        //                        text: item.PropFirst,
        //                        id: item.Id
        //                    }
        //                })

        //            };
        //        }
        //    },


        //});


        var URLJO = '/MaterialRequestCancelLine/GetPendingRequisition/' + DocId;
        $("#RequisitionId").select2({
            minimumInputLength: 1,
            multiple: true,
            ajax: {
                url: URLJO,
                dataType: 'json',
                type: "GET",
                quietMillis: 500,
                data: function (term) {
                    return {
                        term: term,
                        Limit:20,
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.PropFirst,
                                id: item.Id
                            }
                        })

                    };
                }
            },


        });


    });

</script>