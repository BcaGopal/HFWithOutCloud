@model Model.ViewModel.GatePassLineViewModel
@using Core.Common

<style type="text/css">
    .cusleftnormal {
        border-bottom-left-radius: 0pc !important;
        border-top-left-radius: 0px !important;
    }

    .cusrightnormal {
        border-bottom-right-radius: 0px !important;
        border-top-right-radius: 0px !important;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> @ViewBag.DocNo</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "GatePassLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {

            @Html.ValidationLog((string)TempData["CSEXCL"])
            <div class="form-horizontal modal-body">
                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.GatePassHeaderId)
                @Html.HiddenFor(m => m.GatePassLineId)
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                   

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Product,"Product",new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Product, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Product, "", new { @class = "text-danger" })                             
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">                      
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                   @Html.TextBoxFor(model => model.Qty, new { @class = "form-control col-xs-3 required number" })                                  
                                    @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.UnitId, "Unit Name", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                               
                                    @Html.TextBoxFor(model => model.UnitId, new { @class = "form-control col-xs-3 required number" })
                                    @Html.ValidationMessageFor(model => model.UnitId, "", new { @class = "text-danger" })
                               
                            </div>
                        </div>
                    </div>

                </div>



                @*<div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDimension1?"":"none")">
                    @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDimension1)
                    <div class="form-group">
                        @Html.LabelFor(model => model.Dimension1Id, (Model.DocumentTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label col-md-4 col-sm-2" })
                        <div class="col-md-7 col-sm-10">
                            @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7 required" })
                            @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>*@



                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}

                </div>

            </div>

        }
    </div>
</div>








<script type="text/javascript">

    $(document).ready(function () {
        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', 'Enter Product Name', false, 3);
        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', ' ', false, 1);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', ' ', false, 1);
        CustomSelectFunction($("#FromProcessId"), '/ComboHelpList/GetProcess', '/ComboHelpList/SetSingleProcess', 'Enter Process Name', false, 1);
        CustomSelectFunction($("#UnitId"), '/ComboHelpList/GetUnits', '/ComboHelpList/SetSingleUnits', ' ', false, 1);
        var DocID = $('#GatePassHeaderId', '.modal-body').val();
        //var URL = '/JobOrderLine/GetCustomProducts/'+ DocID;
        //$("#ProductId").select2({
        //    minimumInputLength: 1,
        //    multiple: false,
        //    ajax: {
        //        url: URL,
        //        dataType: 'json',
        //        type: "GET",
        //        quietMillis: 1000,
        //        data: function (term) {
        //            return {
        //                term: term,
        //            };
        //        },
        //        results: function (data) {
        //            return {
        //                results: $.map(data, function (item) {
        //                    return {
        //                        text: item.PropFirst,
        //                        id: item.Id
        //                    }
        //                })

        //            };
        //        }
        //    },
        //    initSelection: function (element, callback) {

        //        var xval = element.val();
        //        if (xval != 0) {
        //            $.ajax({
        //                cache: false,
        //                type: "POST",
        //                url: "/ComboHelpList/SetSingleProducts",
        //                data: { Ids: element.val() },
        //                success: function (data) {
        //                    callback(data);
        //                },
        //                error: function (xhr, ajaxOptions, thrownError) {
        //                    alert('Failed to Retrive Qty' + thrownError);
        //                }
        //            })
        //        }
        //    }
        //});

        //$('#ProductUidName').on('change',function(e){

        //    InitializePopover(this,$("#ProductUidName").val(),$('#JobOrderSettings_isPostedInStock').val(),$('#GodownId').val(),TransactionTypeConstantsEnum.Issue);
        //    $(this).popover('show');
        //    setTimeout(function() {$('#ProductUidName').popover('destroy')},10000);
        //    //alert($('#ProductUidName').val());
        //    RepeatProcessValidation();
        //})

        @*function RepeatProcessValidation() {
                $.ajax({
                    cache: false,
                    async: true,
                    type: "POST",
                    url: "@(Url.Action("IsProcessDone"))",
                    data: { ProductUidName: $("#ProductUidName").val(),ProcessId: $("#ProcessId").val() },
                success: function (data) {
                    $("#IsProcessDone").val(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve product details.' + thrownError);
                }
            });

            if ($('#IsProcessDone').val().toString().toUpperCase()== "TRUE")
            {
                $('#errormsg').remove();
                if( !$('#errormsg').length)
                {
                    $('#AllowRepeatProcess').before("<span id=errormsg style='color:red'> Process is already done for Barcode "+ $("#ProductUidName").val() +" . Want to repeat process ?  </span>")
                    $('#AllowRepeatProcess').css('display', '')
                    $('#Qty').val(0);
                    //Calculation();
                }
            }

        }*@

        var IsSaved=false;
        var ValidationCount=0;

        $('#modform').bind('submit',function(event){

            if(!IsSaved)
            {
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                $('button:submit').attr('disabled','disabled');
                return IsSaved;
            }
            else
            {
                return false;
            }


        });

        function ValidateData() {
            var ValidationMessage = "";

            //Client Side Validaion.....

            return  (ValidationMessage=="");

        }



        $('.datepicker').datepicker({
            format: 'dd/MM/yyyy',
            "setDate": new Date(),
            "autoclose": true

        })

        var id=@Model.GatePassLineId;

        @*if(id>0)
        {
            var tex='@Model.ProdOrderDocNo';
            $("#acprodorders").val(tex);
            $('#ProductId').attr('readonly','true');
            $("#ProductUidName").attr('readonly', 'true');
            $('#acprodorders').attr('disabled','disabled');
            $('#Dimension1Id').attr('readonly','true');
            $('#Dimension2Id').attr('readonly','true');
            $('#Specification').attr('readonly','true');
        }*@
        @*var IsProOrderBased='@Model.IsProdOrderBased';

        if(IsProOrderBased=='False')
        {
            $('#acprodorders').attr('disabled','disabled');
        }*@


        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/GatePassLine/DeletePost';
                $('form#modform').attr('action',url);

                //DeletingProductCharges();
                return;
            }
            else
            {
                return false;
            }
        })
    });

</script>

@if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create" || ViewBag.LineMode == "Delete")
{

    <script type="text/javascript">

        @*var decimalplaces='@Model.DecimalPlaces';
        $(function(){*@

           // $("#DealQty,#Rate,#Amount,#Qty,#UnitConversionMultiplier").keyup(Calculation);
           // $("#DealUnitId").change(GetUnitConversionMultiplier);
           // $("#ProductId").change(GetProductDetail);


            @*function GetProductDetail() {
                var ProcessProgress = $("#Product detail loading progress");
                ProcessProgress.show();
                if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetProductDetailJson"))",
                        data: { ProductId: $("#ProductId").val(),JobOrderId: $("#JobOrderHeaderId").val() },
                        success: function (data) {
                            $("#Rate").val(data.StandardCost);
                            $("#UnitId").val(data.UnitId);
                            $("#DealUnitId").val(data.DealUnitId);
                            $('#Specification').val(data.Specification);
                            decimalplaces=data.DealUnitDecimalPlaces;
                            GetUnitConversionMultiplier.call();

                            //$("#CALL_INCENTRATE").val(data.Discount);
                            $("#CALL_INCENTRATE").val(data.Incentive).trigger('change');
                            $("#LossQty").val(data.Loss);

                            //Calculation.call();
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve product details.' + thrownError);
                        }
                    });
                }

                if ($("#ProductUidId").val() == 0 || $("#ProductUidId").val() == null || $("#ProductUidId").val() == "") {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetProductPrevProcess"))",
                        data: { ProductId: $("#ProductId").val(), GodownId: $("#GodownId").val(), DocTypeId: $("#DocTypeId").val() },
                    success: function (data) {
                        $("#FromProcessId").val(data[0].ProcessId);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        ProcessProgress.hide();
                    }
                });
            }
            }*@


            @*function GetUnitConversionMultiplier() {

                if ($("#UnitId").val() == $("#DealUnitId").val()) {
                    $("#UnitConversionMultiplier").val(1);
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetUnitConversionDetailJson"))",
                        data: { prodid: $("#ProductId").val(), UnitId: $("#UnitId").val(), DealUnitId: $("#DealUnitId").val(),JobOrderId:$('#JobOrderHeaderId').val() },

                        success: function (data) {
                            decimalplaces=data.DecimalPlace;
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve Unit conversion details.' + thrownError);
                        }
                    });
                    Calculation.call();
                }
                else {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetUnitConversionDetailJson"))",
                        data: { prodid: $("#ProductId").val(), UnitId: $("#UnitId").val(), DealUnitId: $("#DealUnitId").val(),JobOrderId:$('#JobOrderHeaderId').val() },

                        success: function (data) {
                            $("#UnitConversionMultiplier").val(data.Value);
                            decimalplaces=data.DecimalPlace;
                            Calculation.call();
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve Unit conversion details.' + thrownError);
                        }
                    });
                }
            }*@


            //function Calculation() {
            //    if ($('#UnitConversionMultiplier').val() != 0) {
            //        $('#DealQty').val(($('#Qty').val() * $('#UnitConversionMultiplier').val()).toFixed(decimalplaces))
            //    }
                //else
                //{
                //    $('#DealQty').val(0);
                //}
                
            //    if(AmountRoundOff)
            //        $('#Amount').val(($('#DealQty').val() * $('#Rate').val()).toFixed(AmountRoundOff));
            //    else
            //        $('#Amount').val(($('#DealQty').val() * $('#Rate').val()).toFixed(2));

            //    ChargeCalculation();
            //}

            @*function AssignAllowRepeatProcessFlag(){
                $.ajax({
                    cache:false,
                    type: "POST",
                    url:"@(Url.Action("SetFlagForAllowRepeatProcess"))",
                    success:function(data){
                        if (data.toString().toUpperCase()== "TRUE")
                        {
                            $("#AllowRepeatProcess").val(data);
                        }
                        else{
                            $("#AllowRepeatProcess").val(false);
                        }

                    },
                error:function(xhr,ajaxOptions,thrownError){
                    alert('Failed to Retrive Repeat Process Flag'+thrownError);
                }
            })
            }*@

        //$('#AllowRepeatProcess').click(function(){
        //    AssignAllowRepeatProcessFlag()
        //    $('#errormsg').remove();
        //    $('#AllowRepeatProcess').css('display', 'none')
        //    $('#Qty').val(1);
        //    Calculation.call();
        //})

        //})



        


    </script>



}

@if ((ViewBag.LineMode != "Create") && (ViewBag.LineMode != "Edit") && (ViewBag.LineMode != "Delete"))
{
    <script type="text/javascript">

        RemoveFields();

        function RemoveFields(){
            //Disabling input fields
            $(':input','.modal-body').attr('disabled','disabled');
        }


    </script>
}
