@model Surya.India.Model.ViewModels.SaleOrderCancelLineViewModel
@using Surya.India.Core.Common
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Create", "SaleOrderCancelLine", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="panel panel-default">

        <div class="panel-heading">
            <h3>
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span> Sale Order Cancel Line</span>
                <input type="submit" value="Save" class="btn btn-primary right" id="submit" style="width: 90px; background-color: #2980b9" />
            </h3>
            <hr style="margin-top:0px;margin-bottom:0px" />

            <div class="panel-info">
                <h4 style="padding:5px 0 0 0;margin:0px">
                    @Html.ActionLink(" ", " ", " ", null, new { @class = "glyphicon glyphicon-refresh toolbar", @title = "Refresh Page", @data_toggle = "tooltip", @id = "RefreshPage" })
                    @Html.ActionLink(" ", "Create", "SaleOrderCancelLine", new { @id=Model.SaleOrderCancelHeaderId}, new { @class = "glyphicon glyphicon-plus toolbar", @title = "Add New", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "History", "SaleOrderCancelLine", null, new { @class = "glyphicon glyphicon-user toolbar", @title = "History", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Print", "SaleOrderCancelLine", null, new { @class = "glyphicon glyphicon-print toolbar", @title = "Print", @data_toggle = "tooltip" })                  
                    @Html.ActionLink(" ", "PrevPage", "SaleOrderCancelLine", new { id = @Model.SaleOrderCancelHeaderId }, new { @class = "glyphicon glyphicon-arrow-left toolbar", @title = "Prev Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "NextPage", "SaleOrderCancelLine", new { id = @Model.SaleOrderCancelHeaderId }, new { @class = "glyphicon glyphicon-arrow-right toolbar", @title = "Next Record", @data_toggle = "tooltip" })
                    @*@Html.ActionLink(" ", " ", " ", null, new { @class = "glyphicon glyphicon-trash toolbar", @title = "Delete", @data_toggle = "tooltip" })*@
                    @Html.ActionLink(" ", "Index", "SaleOrderCancelLine", new { id=@Model.SaleOrderCancelHeaderId}, new { @class = "glyphicon glyphicon-list toolbar right", @title = "List", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Report", "SaleOrderCancelLine", null, new { @class = "glyphicon glyphicon-th toolbar right", @title = "Report", @data_toggle = "tooltip" })
                </h4>
            </div>
        </div>

        <div class="panel-info" style="padding-left:15px">
            <div class="form-horizontal">

                @Html.ValidationSummary(true)
                @Html.HiddenFor(model => model.SaleOrderCancelHeaderId)
                @Html.HiddenFor(m => m.DocumentTypeName)
                @Html.HiddenFor(m => m.DocDate)
                @Html.HiddenFor(m => m.DocNo)
                @Html.HiddenFor(m => m.Reason)
                @Html.HiddenFor(m => m.Remark)

                <div class="row">
                    <h4 class="col-md-12 black">
                        <span class="glyphicon glyphicon-align-justify"></span>
                        1.Document Details
                    </h4>
                    <div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocumentTypeName, "Entry Type", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.DocumentTypeName, new { @class = "form-control col-xs-6", @disabled="disabled" })
                                        @Html.ValidationMessageFor(m => m.DocumentTypeName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocDate, "Cancel Date", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.DocDate, new { @class = "form-control col-xs-6 ",@disabled="disabled" })
                                        @Html.ValidationMessageFor(m => m.DocDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DocNo, "Cancel No", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.DocNo, new { @class = "form-control col-xs-6",@disabled="disabled" })
                                        @Html.ValidationMessageFor(m => m.DocNo, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Reason, "Reason", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.Reason,new { @class = "form-control col-xs-6", @disabled="disabled" })
                                        @Html.ValidationMessageFor(m => m.Reason, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-xs-4" })
                                <div class="col-xs-6">
                                    @Html.TextBoxFor(m => m.Remark, null, new { @class = "form-control col-xs-6 required", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(m => m.Remark, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>






                @*<div class="form-group" style="margin-top:15px">
                    @Html.LabelFor(model => model.DocumentTypeName, "Entry Type", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DisplayFor(m => m.DocumentTypeName)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DocDate, "Cancel Date", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DisplayFor(m => m.DocDate)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DocNo, "Cancel No.", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DisplayFor(m => m.DocNo)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Reason, "Reason", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DisplayFor(m => m.Reason)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DisplayFor(m => m.Remark)
                    </div>
                </div>*@


                <div class="row">
                    <h4 class="col-md-12 black">
                        <span class="glyphicon glyphicon-align-justify"></span>
                        2.Cancel Details
                    </h4>
                    <div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.ProductId, "Product", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.ProductId, new { @class = "form-control col-xs-6" })
                                        @Html.ValidationMessageFor(m => m.ProductId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SaleOrderLineId, "Sale Order", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.DropDownListFor(m => m.SaleOrderLineId, Enumerable.Empty<SelectListItem>(), new { @class = "form-control col-xs-6 height" })
                                        @Html.ValidationMessageFor(m => m.SaleOrderLineId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.Qty, new { @class = "form-control col-xs-6" })
                                        @Html.ValidationMessageFor(m => m.Qty, "", new { @class = "text-danger" })
                                    </div>

                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.LineRemark, "Remark", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.LineRemark, new { @class = "form-control col-xs-6" })
                                        @Html.ValidationMessageFor(m => m.LineRemark, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>                   
                </div>





                @*<hr />

                <div class="form-group" style="margin-top:15px">
                    @Html.LabelFor(model => model.ProductId, "Product*", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.ProductId)
                        @Html.ValidationMessageFor(model => model.ProductId)
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.SaleOrderLineId, "Sale Order*", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                        @Html.DropDownListFor(m => m.SaleOrderLineId, Enumerable.Empty<SelectListItem>())
                        @Html.ValidationMessageFor(model => model.SaleOrderLineId)
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(model => model.Qty, "Qty*", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Qty)
                        @Html.ValidationMessageFor(model => model.Qty)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LineRemark, "Remark", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.LineRemark)
                        @Html.ValidationMessageFor(model => model.LineRemark)
                    </div>
                </div>


                <hr />

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" id="btnSave" name="Command" value="Save" class="btn btn-primary btn-sm CurveBorder" />
                        @if (ViewBag.Status == (int)StatusConstants.Drafted)
                        {
                            <input type="submit" id="btnSave2" name="Command" value="Submit" class="btn btn-primary btn-sm CurveBorder" />
                        }
                        <span style="font-family: Calibri,sans-serif,Verdana;font-size:large">
                            @Html.ActionLink("Back", "Index", new { Id = @Model.SaleOrderCancelHeaderId }, new { @class = "btn btn-primary btn-sm col-md-offset-1 CurveBorder ActionLinkPadding" })
                        </span>
                    </div>
                </div>*@
            </div>
        </div>
    </div>
}

<script>
    $(document).ready(function () {

        CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', 'Enter Product', false, 3);
        $("#ProductId").select2("focus");
    });

</script>

<script type="text/javascript">
    $("#ProductId").focus();
    $(function () {
        $("#ProductId").change(GetSaleOrderLine);


        function GetSaleOrderLine() {
            var selectedItem = $(this).val();
            var ddlSaleOrders = $("#SaleOrderLineId");
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetSaleOrderList"))",
                data: { ProductId: selectedItem },
                success: function (data) {
                    ddlSaleOrders.html('');

                    $.each(data, function (id, option) {
                        ddlSaleOrders.append($('<option></option>').val(option.SaleOrderLineId).html(option.SaleOrderDocNo));
                    });
                    $(function () {
                        $.ajax({
                            cache: false,
                            type: "POST",
                            url: "@(Url.Action("GetSaleOrderLineJson"))",
                            data: { SaleOrderLineId: $("#SaleOrderLineId").val() },
                            success: function (data) {
                                $("#Qty").val(data.BalanceQty);
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                alert('Failed to retrieve purchase orders status.' + thrownError);
                                ProcessProgress.hide();
                            }
                        });
                    });
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve purchase orders.' + thrownError);
                    PurchaseOrdersProgress.hide();
                }
            });
        }



    })

    $(function () {
        $("#SaleOrderLineId").change(GetSaleOrderLineStatus);

        function GetSaleOrderLineStatus() {
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetSaleOrderLineJson"))",
                data: { SaleOrderLineId: $("#SaleOrderLineId").val() },
                success: function (data) {
                    $("#Qty").val(data.BalanceQty);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve purchase orders status.' + thrownError);
                    ProcessProgress.hide();
                }
            });

        }
    });
</script>