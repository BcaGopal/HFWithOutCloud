@model Model.ViewModel.JobReturnLineFilterViewModel
@using Core.Common

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Filters</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_FilterPostOrders", "JobReturnLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {        

            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.JobWorkerId)
                @Html.HiddenFor(model => model.JobReturnHeaderId)

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobOrderHeaderId, "Job Order", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.JobOrderHeaderId, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.JobOrderHeaderId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                <span id="status" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>
               
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductGroupId, (Model.DocumentTypeSettings.ProductGroupCaption ?? "Product Group"), new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductGroupId, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.ProductGroupId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom" name="Command:Edit" type="submit"><h2 style="margin:0px" id="submit" title="Proceed"><span class="glyphicon glyphicon-arrow-right black"></span> </h2></button>
                </div>

            </div>

        }
    </div>
</div>


<script type="text/javascript">


    $(document).ready(function () {
        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetProducts', 'Enter Product Name', true, 3);        
        //CustomSelectFunction($("#JobReceiptHeaderId"), '/ComboHelpList/GetJobReceipt', '/ComboHelpList/SetJobReceipts', 'Enter Receipt Name', true, 1);
        CustomSelectFunction($("#ProductGroupId"), '/ComboHelpList/GetProductGroup', '/ComboHelpList/SetProductGroup', ' ', true, 1);

        var IsSaved = false;
        var ValidationCount = 0;

        $('#modform').bind('submit', function (event) {

            if (!IsSaved) {
                if (!ValidateData()) {
                    return false;
                }
                IsSaved = true;
                $('button:submit').attr('disabled', 'disabled');
                return IsSaved;
            }
            else {
                return false;
            }


        });

        function ValidateData() {
            var ValidationMessage = "";

            //Client Side Validaion.....

            return (ValidationMessage == "");

        }


        var DocID = $('#JobReturnHeaderId', '.modal-body').val();
        var URL = '/JobReturnLine/GetJobOrders/' + DocID;
        $("#JobOrderHeaderId").select2({
            minimumInputLength: 0,
            multiple: true,
            ajax: {
                url: URL,
                dataType: 'json',
                type: "GET",
                quietMillis: 1000,
                data: function (term) {
                    return {
                        term: term,
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            if(item.JobOrderHeaderId!=-1)
                            return {
                                text: item.DocNo,
                                id: item.JobOrderHeaderId
                            }
                        })

                    };
                }
            },


        });


        var URL = '/ComboHelpList/GetCustomProducts/';
        $("#ProductId").select2({
            minimumInputLength: 1,
            multiple: true,
            ajax: {
                url: URL,
                dataType: 'json',
                type: "GET",
                quietMillis: 1000,
                data: function (term) {
                    return {
                        term: term,
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.PropFirst,
                                id: item.Id
                            }
                        })

                    };
                }
            },


        });

    });

</script>