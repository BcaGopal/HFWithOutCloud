@model Model.ViewModel.JobOrderLineViewModel
@using Core.Common

<style type="text/css">
    .cusleftnormal {
        border-bottom-left-radius: 0pc !important;
        border-top-left-radius: 0px !important;
    }

    .cusrightnormal {
        border-bottom-right-radius: 0px !important;
        border-top-right-radius: 0px !important;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> @ViewBag.DocNo</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "JobOrderLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {

            @Html.ValidationLog((string)TempData["CSEXCL"])
            <div class="form-horizontal modal-body">
                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.JobOrderHeaderId)
                @Html.HiddenFor(m => m.JobOrderLineId)
                @*@Html.HiddenFor(m => m.ProdOrderLineId)*@
                @Html.HiddenFor(m => m.ProdOrderBalanceQty)
                @Html.HiddenFor(m => m.GodownId)
                @Html.HiddenFor(m => m.ProductUidId)
                @Html.HiddenFor(m => m.JobOrderSettings.SqlProcProductUidHelpList)
                @Html.HiddenFor(m => m.JobOrderSettings.isPostedInStock)
                @Html.HiddenFor(m => m.JobOrderSettings.ProcessId)
                @Html.HiddenFor(m => m.JobOrderSettings.SqlProcConsumption)
                @Html.HiddenFor(m => m.CalculationId)
                @Html.HiddenFor(m => m.JobOrderSettings.isPostedInStockProcess)
                @Html.HiddenFor(m => m.JobOrderSettings.AmountRoundOff)
                @Html.HiddenFor(m => m.JobOrderSettings.ExcessQtyAllowedPer)
                @Html.HiddenFor(m => m.JobOrderSettings.IsMandatoryStockIn)
                @Html.HiddenFor(m => m.DocTypeId)
                @Html.HiddenFor(m => m.SiteId)
                @Html.HiddenFor(m => m.DivisionId)
                @Html.HiddenFor(m => m.IsProcessDone)
                @Html.HiddenFor(m => m.StockInBalanceQty)
                @Html.HiddenFor(m => m.SalesTaxGroupPersonId)
                @Html.HiddenFor(m => m.LineNature)

                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                <div class="row">
                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleStockIn ? "" : "none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleStockIn)
                        <div class="form-group">
                            @Html.LabelFor(model => model.StockInId, "Stock In", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.StockInId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.StockInId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleProductUID?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleProductUID)
                        @Html.HiddenFor(m => m.JobOrderSettings.isMandatoryProductUID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductUidId, (Model.DocumentTypeSettings.ProductUidCaption ?? "Product Uid"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ProductUidCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductUidName, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductUidId, "", new { @class = "text-danger" })
                                <a style="display:none;cursor:pointer" id="AllowRepeatProcess"> Click Here</a>
                            </div>
                        </div>
                    </div>



                    @if (Model.LineNature == LineNatureConstants.ForOrder)
                    {
                        @Html.HiddenFor(m => m.ProductId)
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProdOrderLineId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-md-4 col-sm-10" })
                                @Html.HiddenFor(m => m.DocumentTypeSettings.ProductCaption)
                                <div class="col-md-7 col-sm-10">
                                    @Html.TextBoxFor(model => model.ProdOrderLineId, new { @class = "form-control  required" })
                                    @if (Model.ProductName != Model.PlannedProductName)
                                    {
                                        <span>Substitute Product : @Model.ProductName</span>
                                    }
                                    @Html.ValidationMessageFor(model => model.ProdOrderLineId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProdOrderDocNo, (Model.DocumentTypeSettings.ContraDocTypeCaption ?? "Plan No."), new { @class = "control-label col-md-4 col-sm-2" })
                                @Html.HiddenFor(m => m.DocumentTypeSettings.ContraDocTypeCaption)
                                <div class="col-md-7 col-sm-10">
                                    @Html.TextBoxFor(m => m.ProdOrderDocNo, new { @class = "form-control", @readonly = "true" })
                                    @Html.ValidationMessageFor(model => model.ProdOrderDocNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.ProdOrderLineId)
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProductId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-md-4 col-sm-2" })
                                @Html.HiddenFor(m => m.DocumentTypeSettings.ProductCaption)
                                <div class="col-md-7 col-sm-10">
                                    @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                    @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div> 
                    }


                    @*<div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ProdOrderLineId, "Production Order", new { @class = "control-label col-xs-4" })
                                <div class="col-xs-7">
                                    @Html.TextBox(" ", " ", new { @class = "form-control", @id = "acprodorders" })
                                    @Html.ValidationMessageFor(model => model.ProdOrderLineId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>*@



                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleSpecification?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleSpecification)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDimension1?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, (Model.DocumentTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension1Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDimension2?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, (Model.DocumentTypeSettings.Dimension2Caption ?? "Dimension2"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension2Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>




                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDimension3?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDimension3)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension3Id, (Model.DocumentTypeSettings.Dimension3Caption ?? "Dimension3"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension3Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension3Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension3Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDimension4?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDimension4)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension4Id, (Model.DocumentTypeSettings.Dimension4Caption ?? "Dimension4"), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension4Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension4Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension4Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleSalesTaxGroupProduct ? "" : "none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleSalesTaxGroupProduct)
                        <div class="form-group">
                            @Html.LabelFor(model => model.SalesTaxGroupProductId, "Sales Tax Group Product", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.SalesTaxGroupProductId, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.SalesTaxGroupProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleLotNo?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleLotNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LotNo, "Lot No.", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @if (Model.LineNature != LineNatureConstants.ForOrder)
                    {
                        <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisiblePlanNo?"":"none")">
                            @Html.HiddenFor(m => m.JobOrderSettings.isVisiblePlanNo)
                            <div class="form-group">
                                @Html.LabelFor(model => model.PlanNo, "Plan No.", new { @class = "control-label col-md-4 col-sm-2" })
                                <div class="col-md-7 col-sm-10">
                                    @Html.TextBoxFor(model => model.PlanNo, new { @class = "form-control col-xs-7 required" })
                                    @Html.ValidationMessageFor(model => model.PlanNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(m => m.PlanNo)
                    }






                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleProcessLine?"":"none")">
                        <div class="form-group">
                            @Html.HiddenFor(m => m.JobOrderSettings.isMandatoryProcessLine)
                            @Html.HiddenFor(m => m.JobOrderSettings.isVisibleProcessLine)
                            @Html.LabelFor(model => model.FromProcessId, "From Process", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.FromProcessId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.FromProcessId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                <div class="col-xs-7" style="padding:0px;">
                                    @if (Model.ProductUidHeaderId.HasValue)
                                    {
                                        @Html.TextBoxFor(model => model.Qty, new { @class = "form-control col-xs-3 required", @readonly = true })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.Qty, new { @class = "form-control col-xs-3 required number" })
                                    }
                                    @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-5" style="padding:0px">
                                    @Html.TextBoxFor(m => m.UnitId, new { @class = "form-control col-xs-2", @readonly = "true" })
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleRate?"":"none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rate, "Rate", new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.JobOrderSettings.isVisibleRate)
                            @Html.HiddenFor(m => m.JobOrderSettings.isMandatoryRate)
                            @Html.HiddenFor(m => m.JobOrderSettings.isEditableRate)
                            <div class="col-md-7 col-sm-10">
                                @if (!Model.JobOrderSettings.isEditableRate && Model.JobOrderLineId > 0)
                                {
                                    @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7 required text-right", @readonly = true })
                                    @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7 required text-right" })
                                    @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                                }
                            </div>
                        </div>
                    </div>





                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDealUnit?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDealUnit)
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealUnitId, "Deal Unit", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                <div class="col-xs-7" style="padding:0px">
                                    @Html.DropDownListFor(model => model.DealUnitId, new SelectList(ViewBag.DeliveryUnitList as System.Collections.IEnumerable, "UnitId", "UnitName"), new { @class = "form-control height cusrightnormal required" })
                                    @Html.ValidationMessageFor(model => model.DealUnitId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-5" style="padding:0px">
                                    @Html.TextBoxFor(model => model.UnitConversionMultiplier, new { @class = "form-control required" })
                                    @Html.ValidationMessageFor(model => model.UnitConversionMultiplier, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDealUnit?"":"none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealQty, "Deal Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.DealQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDiscountPer ? "" : "none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDiscountPer)
                        <div class="form-group">
                            @Html.LabelFor(model => model.DiscountPer, "Discount %", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px;">
                                <div class="col-xs-5" style="padding-right:0px">
                                    @Html.TextBoxFor(model => model.DiscountPer, new { @class = "form-control col-xs-5 text-right" })
                                    @Html.ValidationMessageFor(model => model.DiscountPer, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-7" style="padding-left:0px">
                                    @Html.TextBoxFor(model => model.DiscountAmount, new { @class = "form-control col-xs-7 text-right" })
                                    @Html.ValidationMessageFor(model => model.DiscountAmount, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleRate?"":"none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, "Amount", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleLoss ? "" : "none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleLoss)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LossQty, "Loss Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.LossQty, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.LossQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleUncountableQty ? "" : "none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleUncountableQty)
                        @Html.HiddenFor(m => m.JobOrderSettings.NonCountedQtyCaption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.NonCountedQty, (Model.JobOrderSettings.NonCountedQtyCaption ?? "Non Counted Qty"), new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.NonCountedQty, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.NonCountedQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleLineDueDate ? "" : "none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleLineDueDate)
                        <div class="form-group">
                            @Html.LabelFor(model => model.DueDate, "DueDate", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DueDate, "{0:dd/MMMM/yyyy}", new { @class = "datepicker form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Remark, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}

                </div>

            </div>

        }
    </div>
</div>


@if (ViewBag.LineMode == "Create")
{
    <script type="text/javascript">
        $(function(){

            $.ajax({
                cache: false,
                url: "/TaxCalculation/GetMaxLineId/",
                data: { HeaderId: parseInt($('#JobOrderHeaderId').val()), LineTable:"Web.JobOrderLines", LineKeyField: "JobOrderLineId", HeaderKeyField:"JobOrderHeaderId"},
                success: function (data) {
                    AddCalculation(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrive calculation footer' + thrownError);
                },
            });


            function AddCalculation(MaxLineId)
            {
                AddCalculationFields(parseInt($('#JobOrderHeaderId').val()), false, '@Model.CalculationId', "Web.JobOrderHeaderCharges", "Web.JobOrderLineCharges", MaxLineId, $('#DocTypeId','.modal-body').val(), $('#SiteId','.modal-body').val(),$('#DivisionId','.modal-body').val());
            }

        })
    </script>
}
else
{
    <script type="text/javascript">
        $(function(){
            AddCalculationFieldsEdit(parseInt($('#JobOrderHeaderId').val()), $('#JobOrderLineId').val(), false, "Web.JobOrderHeaderCharges", "Web.JobOrderLineCharges");
        })
    </script>
}





<script type="text/javascript">

    $(document).ready(function () {
        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', 'Enter Product Name', false, 3);

        var DocID = $('#JobOrderHeaderId', '.modal-body').val();

        if ($('#LineNature', '.modal-body').val() == "For Order")
        {
            CustomSelectFunction($("#ProdOrderLineId"), '/JobOrderLine/GetProdOrderForProduct', '/JobOrderLine/SetSingleProdOrderLine', ' ', false, 0,DocID);
        }
        else{
            CustomSelectFunction($("#ProductId"), '/JobOrderLine/GetCustomProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0,DocID);
        }

        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', ' ', false, 0);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', ' ', false, 0);
        CustomSelectFunction($("#Dimension3Id"), '/ComboHelpList/GetDimension3', '/ComboHelpList/SetSingleDimension3', ' ', false, 0);
        CustomSelectFunction($("#Dimension4Id"), '/ComboHelpList/GetDimension4', '/ComboHelpList/SetSingleDimension4', ' ', false, 0);
        CustomSelectFunction($("#FromProcessId"), '/ComboHelpList/GetProcess', '/ComboHelpList/SetSingleProcess', ' ', false, 0);
        CustomSelectFunction($("#SalesTaxGroupProductId"), '/ComboHelpList/GetSalesTaxGroupProduct', '/ComboHelpList/SetSingleSalesTaxGroupProduct', ' ', false, 0);
        CustomSelectFunctionForStockIn($("#StockInId"), '/JobOrderLine/GetStockInForProduct', '/ComboHelpList/SetSingleStockIn', ' ', false, 0,$('#JobOrderHeaderId','.modal-body').val(),$("#ProductId").val(),$("#Dimension1Id").val(),$("#Dimension2Id").val(),$("#Dimension3Id").val(),$("#Dimension4Id").val());
        CustomSelectFunction($("#PlanNo"), '/ComboHelpList/GetPlanNos', '/ComboHelpList/SetSinglePlanNo', ' ', false, 0);

        if ($('#JobOrderSettings_SqlProcProductUidHelpList', '.modal-body').val() != null && $('#JobOrderSettings_SqlProcProductUidHelpList', '.modal-body').val() != "")
        {
            CustomSelectFunction($("#ProductUidName"), '/JobOrderLine/GetProductUidHelpList', '/JobOrderLine/SetSingleProductUid', ' ', false, 0, $('#JobOrderHeaderId', '.modal-body').val());
        }




        $('#Qty').keyup(function () {
            var ExcessQtyAllowed = 0;
            if ($('#JobOrderSettings_ExcessQtyAllowedPer').val() != null && $('#JobOrderSettings_ExcessQtyAllowedPer').val() != 0)
            {
                ExcessQtyAllowed = $('#ProdOrderBalanceQty').val() * $('#JobOrderSettings_ExcessQtyAllowedPer').val()/100;
            }
            

            if (($('#ProdOrderBalanceQty').val() - $('#Qty').val() + ExcessQtyAllowed) < 0 && $('#ProdOrderLineId').val()>0) {
                $('#submit', '.modal-body').attr('disabled', 'disabled');
                if ($(this).closest('div.col-md-4 col-sm-10').find('span#cerror').length == 0)
                {
                    $(this).parents('.col-md-4 col-sm-10').append("<span class='text-danger' id='cerror'>Qty exceeding Production Order Qty</span>")
                }
            }
            else
            {
                $('#submit', '.modal-body').removeAttr('disabled');
                if ($(this).closest('div.col-md-4 col-sm-10').find('span#cerror').length > 0)
                {
                    $(this).closest('.col-md-4 col-sm-10').find('span#cerror').remove();
                }
            }
        })



        $("#ProdOrderLineId").change(function(){
            Validate_ProdOrderLine();
        });


        function Validate_ProdOrderLine()
        {
            if($('#ProdOrderLineId').val() && $('#ProdOrderLineId').val()!=0)
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProdOrderDetail"))",
                    data: { ProdOrderLineId: $("#ProdOrderLineId").val(),JobOrderHeaderId:$('#JobOrderHeaderId','.modal-body').val() },
                success: function (data) {
                    $('#Qty').val(data.Qty);
                    $('#Specification').val(data.Specification);
                    $('#DealQty').val((data.Qty).toFixed(data.DealunitDecimalPlaces));
                    $("#ProdOrderBalanceQty").val(data.Qty);
                    decimalplaces=data.unitDecimalPlaces;
                    $("#UnitId").val(data.UnitId);
                    $("#UnitName").val(data.UnitName);
                    //$('#UnitConversionMultiplier').val(1);
                    //$("#ProductId").select2('data', { id: data.ProductId, text: data.ProductName});
                    $("#ProductId").val(data.ProductId);
                    $("#DealUnitId").val(data.DealUnitId).trigger('change');
                    $("#ProdOrderDocNo").val(data.ProdOrderDocNo);
                    //(data.Dimension1Name==null)?(1==1):($("#Dimension1Name").val(data.Dimension1Name))

                    if(data.Dimension1Name!=null)
                    {
                        $("#Dimension1Id").select2('data', { id: data.Dimension1Id, text: data.Dimension1Name});
                    }

                    if(data.Dimension2Name!=null)
                    {
                        $("#Dimension2Id").select2('data', { id: data.Dimension2Id, text: data.Dimension2Name});
                    }

                    if(data.Dimension3Name!=null)
                    {
                        $("#Dimension3Id").select2('data', { id: data.Dimension3Id, text: data.Dimension3Name});
                    }

                    if(data.Dimension4Name!=null)
                    {
                        $("#Dimension4Id").select2('data', { id: data.Dimension4Id, text: data.Dimension4Name});
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Order details.' + thrownError);
                }
            });
        }
        else if($('#ProdOrderLineId').val()=="")
            {
                $('#JobQty').val(0).trigger('keyup');
                //$("#ProductId").select2('val', "");
                $("#ProductId").val("");
                $('#LotNo').val('');
                $('#UnitConversionMultiplier').val(0);
                $('#Qty').val(0);
                $('#Specification').val("");
                $("#UnitName").val("");
                $("#UnitId").val("");
                $('#DealQty').val(0);
                $('#UnitDecimalPlaces').val(0);
                $('#DealUnitDecimalPlaces').val(0);
                $("#Dimension1Name").val("");
                $("#Dimension2Name").val("");
                $("#Dimension3Name").val("");
                $("#Dimension4Name").val("");
            }
        }


 
        
        //var URL = '/JobOrderLine/GetCustomProducts/'+ DocID;
        //$("#ProductId").select2({
        //    minimumInputLength: 1,
        //    multiple: false,
        //    ajax: {
        //        url: URL,
        //        dataType: 'json',
        //        type: "GET",
        //        quietMillis: 1000,
        //        data: function (term) {
        //            return {
        //                term: term,
        //            };
        //        },
        //        results: function (data) {
        //            return {
        //                results: $.map(data, function (item) {
        //                    return {
        //                        text: item.PropFirst,
        //                        id: item.Id
        //                    }
        //                })

        //            };
        //        }
        //    },
        //    initSelection: function (element, callback) {

        //        var xval = element.val();
        //        if (xval != 0) {
        //            $.ajax({
        //                cache: false,
        //                type: "POST",
        //                url: "/ComboHelpList/SetSingleProducts",
        //                data: { Ids: element.val() },
        //                success: function (data) {
        //                    callback(data);
        //                },
        //                error: function (xhr, ajaxOptions, thrownError) {
        //                    alert('Failed to Retrive Qty' + thrownError);
        //                }
        //            })
        //        }
        //    }
        //});

        $('#ProductUidName').on('change',function(e){

            InitializePopover(this,$("#ProductUidName").val(),$('#JobOrderSettings_isPostedInStock').val(),$('#GodownId').val(),TransactionTypeConstantsEnum.Issue);
            $(this).popover('show');
            setTimeout(function() {$('#ProductUidName').popover('destroy')},10000);
            //alert($('#ProductUidName').val());
            RepeatProcessValidation();
            //alert("c");
        })





        function RepeatProcessValidation() {
            //alert("1");
                $.ajax({
                    cache: false,
                    async: false,
                    type: "POST",
                    url: "@(Url.Action("IsProcessDone"))",
                    data: { ProductUidName: $("#ProductUidName").val(),ProcessId: $("#ProcessId").val() },
                success: function (data) {
                    $("#IsProcessDone").val(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve product details.' + thrownError);
                }
            });

            if ($('#IsProcessDone').val().toString().toUpperCase()== "TRUE")
            {
                $('#errormsg').remove();
                if( !$('#errormsg').length)
                {
                    $('#AllowRepeatProcess').before("<span id=errormsg style='color:red'> Process is already done for Barcode "+ $("#ProductUidName").val() +" . Want to repeat process ?  </span>")
                    $('#AllowRepeatProcess').css('display', '')
                    $('#Qty').val(0);
                    //Calculation();
                }
            }

        }

        var IsSaved=false;
        var ValidationCount=0;

        $('#modform').bind('submit',function(event){

            if(!IsSaved)
            {
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                $('button:submit').attr('disabled','disabled');
                return IsSaved;
            }
            else
            {
                return false;
            }


        });

        function ValidateData() {
            var ValidationMessage = "";

            //Client Side Validaion.....

            return  (ValidationMessage=="");

        }



        $('.datepicker').datepicker({
            format: 'dd/MM/yyyy',
            "setDate": new Date(),
            "autoclose": true

        })

        var id=@Model.JobOrderLineId;

        if(id>0)
        {
            var tex='@Model.ProdOrderDocNo';
            $("#acprodorders").val(tex);
            $('#ProductId').attr('readonly','true');
            $("#ProductUidName").attr('readonly', 'true');
            $('#acprodorders').attr('disabled','disabled');
            $('#Dimension1Id').attr('readonly','true');
            $('#Dimension2Id').attr('readonly','true');
            $('#Dimension3Id').attr('readonly','true');
            $('#Dimension4Id').attr('readonly','true');
            $('#Specification').attr('readonly','true');

            $('#StockInId').attr('readonly','true');

            if ($('#StockInId').val() > 0)
            {
                $("#ProductId").attr('readonly', 'true');
                $("#Dimension1Id").attr('readonly', 'true');
                $("#Dimension2Id").attr('readonly', 'true');
                $("#Dimension3Id").attr('readonly', 'true');
                $("#Dimension4Id").attr('readonly', 'true');
            }
        }
        @*var IsProOrderBased='@Model.IsProdOrderBased';

        if(IsProOrderBased=='False')
        {
            $('#acprodorders').attr('disabled','disabled');
        }*@


        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/JobOrderLine/DeletePost';
                $('form#modform').attr('action',url);

                DeletingProductCharges();
                return;
            }
            else
            {
                return false;
            }
        })
    });

</script>

@if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create" || ViewBag.LineMode == "Delete")
{

    <script type="text/javascript">

    var decimalplaces='@Model.DealUnitDecimalPlaces';
    var AmountRoundOff='@Model.JobOrderSettings.AmountRoundOff';

        $(function(){

            $("#DealQty,#Rate,#Amount,#Qty,#UnitConversionMultiplier,#DiscountPer,#DiscountAmount").keyup(Calculation);
            $("#DealUnitId").change(GetUnitConversionMultiplier);
            $("#ProductId").change(GetProductDetail);
            $('#SalesTaxGroupProductId').change(function(){
                Validate_SalesTaxGroupProductId();
            })

            function Validate_SalesTaxGroupProductId()
            {
                if ($("#SalesTaxGroupProductId").val() != 0 && $("#SalesTaxGroupProductId").val() != null) {
                    GetChargeRates('@Model.CalculationId',$('#DocTypeId','.modal-body').val(),$('#SiteId','.modal-body').val(),$('#DivisionId','.modal-body').val(),$('#JobOrderSettings_ProcessId','.modal-body').val(),$('#SalesTaxGroupPersonId','.modal-body').val(),$('#SalesTaxGroupProductId','.modal-body').val())
                    Calculation();
                }
            }

            function GetProductDetail() {
                var ProcessProgress = $("#Product detail loading progress");
                ProcessProgress.show();
                if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetProductDetailJson"))",
                    data: { ProductId: $("#ProductId").val(),JobOrderId: $("#JobOrderHeaderId").val() },
                    success: function (data) {
                        $("#Rate").val(data.StandardCost);
                        $("#UnitId").val(data.UnitId);
                        $("#DealUnitId").val(data.DealUnitId);
                        $('#Specification').val(data.Specification);
                        decimalplaces=data.DealUnitDecimalPlaces;
                        GetUnitConversionMultiplier.call();



                        //$("#CALL_INCENTRATE").val(data.Discount);
                        $("#CALL_INCENTRATE").val(data.Incentive).trigger('change');
                        $("#LossQty").val(data.Loss);


                        (data.SalesTaxGroupProductId==null)?(1==1):($("#SalesTaxGroupProductId").select2("data", {id: data.SalesTaxGroupProductId, text: data.SalesTaxGroupProductName}));


                        GetChargeRates('@Model.CalculationId',$('#DocTypeId','.modal-body').val(),$('#SiteId','.modal-body').val(),$('#DivisionId','.modal-body').val(),$('#JobOrderSettings_ProcessId','.modal-body').val(),$('#SalesTaxGroupPersonId','.modal-body').val(),$('#SalesTaxGroupProductId','.modal-body').val())

                        ChargeCalculation();



                        //Calculation.call();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }


                if ($("#ProductUidName").val() == null)
                {
                    if (($("#ProductUidId").val() == 0 || $("#ProductUidId").val() == null || $("#ProductUidId").val() == "") &&
                            ($("#StockInId").val() == 0 || $("#StockInId").val() == null || $("#StockInId").val() == "")) {
                        $.ajax({
                            cache: false,
                            type: "POST",
                            url: "@(Url.Action("GetProductPrevProcess"))",
                            data: { ProductId: $("#ProductId").val(), GodownId: $("#GodownId").val(), DocTypeId: $("#DocTypeId").val() },
                            success: function (data) {
                                $("#FromProcessId").val(data[0].ProcessId);
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                ProcessProgress.hide();
                            }
                        });
                    }
                }
        }


        function GetUnitConversionMultiplier() {

            if ($("#UnitId").val() == $("#DealUnitId").val()) {
                $("#UnitConversionMultiplier").val(1);
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetUnitConversionDetailJson"))",
                    data: { prodid: $("#ProductId").val(), UnitId: $("#UnitId").val(), DealUnitId: $("#DealUnitId").val(),JobOrderId:$('#JobOrderHeaderId').val() },

                    success: function (data) {
                        decimalplaces=data.DecimalPlace;
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Unit conversion details.' + thrownError);
                    }
                });
                Calculation.call();
            }
            else {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetUnitConversionDetailJson"))",
                    data: { prodid: $("#ProductId").val(), UnitId: $("#UnitId").val(), DealUnitId: $("#DealUnitId").val(),JobOrderId:$('#JobOrderHeaderId').val() },

                    success: function (data) {
                        $("#UnitConversionMultiplier").val(data.Value);
                        decimalplaces=data.DecimalPlace;
                        Calculation.call();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Unit conversion details.' + thrownError);
                    }
                });
            }
        }


        function Calculation() {
            if ($('#UnitConversionMultiplier').val() != 0) {
                $('#DealQty').val(($('#Qty').val() * $('#UnitConversionMultiplier').val()).toFixed(decimalplaces))
            }


            //if(AmountRoundOff)
            //    $('#Amount').val(($('#DealQty').val() * $('#Rate').val()).toFixed(AmountRoundOff));
            //else
            //    $('#Amount').val(($('#DealQty').val() * $('#Rate').val()).toFixed(2));


            TempAmount = ($('#DealQty').val() * $('#Rate').val())

            if ($('#CalculateDiscountOnRate').val() != 0 &&  $('#CalculateDiscountOnRate').val() != null) {
                TempRate = $('#Rate').val() - ($('#Rate').val() * $('#DiscountPer').val() / 100)
                $('#Amount').val(($('#DealQty').val() * TempRate).toFixed(2));
            }
            else{
                if ($('#DiscountPer').val() != 0 && $('#DiscountPer').val() != null && $('#DiscountPer').val() != '')
                {
                    $('#DiscountAmount').val(TempAmount * $('#DiscountPer').val() / 100);
                }
                $('#Amount').val((TempAmount - $('#DiscountAmount').val()).toFixed(2));
            }

            if(AmountRoundOff)
                $('#Amount').val(($('#Amount').val()).toFixed(AmountRoundOff));


            ChargeCalculation();
        }

        function AssignAllowRepeatProcessFlag(){
            $.ajax({
                cache:false,
                type: "POST",
                url:"@(Url.Action("SetFlagForAllowRepeatProcess"))",
                success:function(data){
                    if (data.toString().toUpperCase()== "TRUE")
                    {
                        $("#AllowRepeatProcess").val(data);
                    }
                    else{
                        $("#AllowRepeatProcess").val(false);
                    }

                },
                error:function(xhr,ajaxOptions,thrownError){
                    alert('Failed to Retrive Repeat Process Flag'+thrownError);
                }
            })
        }

        $('#AllowRepeatProcess').click(function(){
            AssignAllowRepeatProcessFlag()
            $('#errormsg').remove();
            $('#AllowRepeatProcess').css('display', 'none')
            $('#Qty').val(1);
            Calculation.call();
        })


        $("#StockInId").change(function(){
            //alert("a");
            Validate_StockIn();
            //alert("b");
            RepeatProcessValidation_ByStockIn();
            //alert("c");
        });

        function Validate_StockIn() {
            var ProcessProgress = $("#Stock In detail loading progress");
            ProcessProgress.show();
            if ($("#StockInId").val() != "")
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetStockInDetailJson"))",
                    data: { StockInId: $("#StockInId").val()},
                    success: function (data) {
                        if (data != null)
                        {
                            $("#StockInBalanceQty").val(data.BalanceQty);
                            $("#Qty").val(data.BalanceQty);
                            $("#LotNo").val(data.LotNo);
                            $("#PlanNo").val(data.PlanNo);
                            $("#ProductId").select2('data', { id: data.ProductId, text: data.ProductName});
                            if (data.Dimension1Id != null)
                            {
                                $("#Dimension1Id").select2('data', { id: data.Dimension1Id, text: data.Dimension1Name});
                            }
                            else{
                                $("#Dimension1Id").select2('data', { id: '', text: ''});
                            }
                            if (data.Dimension2Id != null)
                            {
                                $("#Dimension2Id").select2('data', { id: data.Dimension2Id, text: data.Dimension2Name});
                            }
                            else{
                                $("#Dimension2Id").select2('data', { id: '', text: ''});
                            }
                            if (data.Dimension3Id != null)
                            {
                                $("#Dimension3Id").select2('data', { id: data.Dimension3Id, text: data.Dimension3Name});
                            }
                            else{
                                $("#Dimension3Id").select2('data', { id: '', text: ''});
                            }
                            if (data.Dimension4Id != null)
                            {
                                $("#Dimension4Id").select2('data', { id: data.Dimension4Id, text: data.Dimension4Name});
                            }
                            else{
                                $("#Dimension4Id").select2('data', { id: '', text: ''});
                            }
                            if (data.FromProcessId != null)
                            {
                                $("#FromProcessId").select2('data', { id: data.FromProcessId, text: data.FromProcessName});
                            }
                            else{
                                $("#FromProcessId").select2('data', { id: '', text: ''});
                            }


                            if (data.ProductUidId != null)
                            {
                                $("#ProductUidId").val(data.ProductUidId);
                                $("#ProductUidName").val(data.ProductUidName);
                            }

                            $("#ProductUidName").attr('readonly', 'true');
                            $("#ProductId").attr('readonly', 'true');
                            $("#Dimension1Id").attr('readonly', 'true');
                            $("#Dimension2Id").attr('readonly', 'true');
                            $("#Dimension3Id").attr('readonly', 'true');
                            $("#Dimension4Id").attr('readonly', 'true');
                            $("#FromProcessId").attr('readonly', 'true');
                            GetProductDetail()
                        }
                        else{
                            $("#StockInBalanceQty").val(0);
                            $("#LotNo").val("");
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Stock In details.' + thrownError);
                        ProcessProgress.hide();
                    }
                });

            }
            else {
                $("#StockInBalanceQty").val(0);
                $("#LotNo").val("");

                $("#ProductId").removeAttr('readonly');
                $("#Dimension1Id").removeAttr('readonly');
                $("#Dimension2Id").removeAttr('readonly');
                $("#Dimension3Id").removeAttr('readonly');
                $("#Dimension4Id").removeAttr('readonly');
            }
        }





            function RepeatProcessValidation_ByStockIn() {
                //alert("1");
                //alert($("#StockInId").val());
                //alert($("#ProcessId").val());
                $.ajax({
                    cache: false,
                    async: false,
                    type: "POST",
                    url: "@(Url.Action("IsProcessDone_ByStockIn"))",
                    data: { StockInId: $("#StockInId").val(),ProcessId: $("#ProcessId").val() },
                success: function (data) {
                    $("#IsProcessDone").val(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve product details.' + thrownError);
                }
            });

            if ($('#IsProcessDone').val().toString().toUpperCase()== "TRUE")
            {
                $('#errormsg').remove();
                if( !$('#errormsg').length)
                {
                    $('#AllowRepeatProcess').before("<span id=errormsg style='color:red'> Process is already done for Barcode "+ $("#ProductUidName").val() +" . Want to repeat process ?  </span>")
                    $('#AllowRepeatProcess').css('display', '')
                    //alert("1");
                    $('#Qty').val(0);
                    //Calculation();
                }
            }

        }

        var IsSaved=false;
        var ValidationCount=0;

        $('#modform').bind('submit',function(event){

            if(!IsSaved)
            {
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                $('button:submit').attr('disabled','disabled');
                return IsSaved;
            }
            else
            {
                return false;
            }


        });

    })



$("#ProductId,#Dimension1Id,#Dimension2Id,#Dimension3Id,#Dimension4Id").change(function(){
        CustomSelectFunctionForStockIn($("#StockInId"), '/StockIssueLine/GetStockInForProduct', '/ComboHelpList/SetSingleStockIn', ' ', false, 0,$('#StockHeaderId','.modal-body').val(),$("#ProductId").val(),$("#Dimension1Id").val(),$("#Dimension2Id").val(),$("#Dimension3Id").val(),$("#Dimension4Id").val());
    });




    </script>


}

@if ((ViewBag.LineMode != "Create") && (ViewBag.LineMode != "Edit") && (ViewBag.LineMode != "Delete"))
{
    <script type="text/javascript">

        RemoveFields();

        function RemoveFields(){
            //Disabling input fields
            $(':input','.modal-body').attr('disabled','disabled');
        }


    </script>
}
