@model Model.ViewModel.JobOrderLineViewModel
@using Core.Common

<style type="text/css">
    .cusleftnormal {
        border-bottom-left-radius: 0pc !important;
        border-top-left-radius: 0px !important;
    }

    .cusrightnormal {
        border-bottom-right-radius: 0px !important;
        border-top-right-radius: 0px !important;
    }

    .ui-autocomplete {
        max-height: 250px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> @ViewBag.DocNo</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "JobOrderLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
           @Html.ValidationLog((string)TempData["CSEXCL"])

            <div class="form-horizontal modal-body">               

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.JobOrderHeaderId)
                @Html.HiddenFor(m => m.JobOrderLineId)
                @*@Html.HiddenFor(m => m.ProdOrderLineId)*@
                @Html.HiddenFor(m => m.ProdOrderBalanceQty)
                @Html.HiddenFor(m => m.GodownId)
                @Html.HiddenFor(m => m.ProductUidId)
                @Html.HiddenFor(m => m.DocTypeId)
                @Html.HiddenFor(m => m.SiteId)
                @Html.HiddenFor(m => m.UnitId)
                @Html.HiddenFor(m => m.DivisionId)
                @Html.HiddenFor(m => m.ProductId)
                @Html.HiddenFor(m => m.JobOrderSettings.isPostedInStock)
                @Html.HiddenFor(m => m.JobOrderSettings.ExcessQtyAllowedPer)
                @Html.HiddenFor(m => m.JobOrderSettings.ProcessId)
                @Html.HiddenFor(m => m.JobOrderSettings.SqlProcConsumption)
                @Html.HiddenFor(m => m.JobOrderSettings.CalculationId)
                @Html.HiddenFor(m => m.JobOrderSettings.isPostedInStockProcess)
                @Html.HiddenFor(m => m.SalesTaxGroupPersonId)

                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                <div class="row">
                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleProductUID?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleProductUID)
                        @Html.HiddenFor(m => m.JobOrderSettings.isMandatoryProductUID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductUidId, "Product UID", new { @class = "control-label col-md-4 col-sm-10 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductUidName, new { @class = "form-control  required" })
                                @Html.ValidationMessageFor(model => model.ProductUidId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProdOrderLineId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-md-4 col-sm-10" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ProductCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProdOrderLineId, new { @class = "form-control  required"})
                                @Html.ValidationMessageFor(model => model.ProdOrderLineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProdOrderDocNo, (Model.DocumentTypeSettings.ContraDocTypeCaption ?? "Plan No."), new { @class = "control-label col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ContraDocTypeCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.ProdOrderDocNo, new { @class = "form-control", @readonly = "true" })
                                @Html.ValidationMessageFor(model => model.ProdOrderDocNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleSalesTaxGroupProduct ? "" : "none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleSalesTaxGroupProduct)
                        <div class="form-group">
                            @Html.LabelFor(model => model.SalesTaxGroupProductId, "Sales Tax Group Product", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.SalesTaxGroupProductId, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.SalesTaxGroupProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @*<div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProdOrderLineId, (Model.DocumentTypeSettings.ContraDocTypeCaption ?? "Production Order"), new { @class = "control-label col-md-4 col-sm-10" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ContraDocTypeCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBox(" ", "", new { @class = "form-control", @id = "autocompleteorder" })
                                @Html.ValidationMessageFor(model => model.ProdOrderLineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-md-4 col-sm-10 " })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ProductCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control  required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                *<span id="status" class="text-danger"></span>
                            </div>
                        </div>
                    </div>*@

                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleSpecification?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleSpecification)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control  required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDimension1?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, (Model.DocumentTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control  required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDimension2?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, (Model.DocumentTypeSettings.Dimension2Caption ?? "Dimension2"), new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control  required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDimension3?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDimension3)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension3Id, (Model.DocumentTypeSettings.Dimension3Caption ?? "Dimension3"), new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension3Id, new { @class = "form-control  required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension3Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDimension4?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDimension4)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension4Id, (Model.DocumentTypeSettings.Dimension4Caption ?? "Dimension4"), new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension4Id, new { @class = "form-control  required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension4Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>





                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleLotNo?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleLotNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LotNo, "Lot No.", new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control  required" })
                                @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleProcessLine?"":"none")">
                        <div class="form-group">
                            @Html.HiddenFor(m => m.JobOrderSettings.isVisibleProcessLine)
                            @Html.HiddenFor(m => m.JobOrderSettings.isMandatoryProcessLine)
                            @Html.LabelFor(model => model.FromProcessId, "From Process", new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.FromProcessId, new { @class = "form-control  required" })
                                @Html.ValidationMessageFor(model => model.FromProcessId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                <div class="col-xs-7" style="padding:0px;">
                                    @if (Model.ProductUidHeaderId.HasValue)
                                    {
                                        @Html.TextBoxFor(model => model.Qty, new { @class = "form-control col-xs-3 required", @readonly = true })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(model => model.Qty, new { @class = "form-control col-xs-3 required" })
                                    }
                                    @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-5" style="padding:0px">
                                    @Html.TextBoxFor(m => m.UnitName, new { @class = "form-control col-xs-2", @readonly = "true" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleRate?"":"none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rate, "Rate", new { @class = "control-label col-md-4 col-sm-10" })
                            @Html.HiddenFor(m => m.JobOrderSettings.isVisibleRate)
                            @Html.HiddenFor(m => m.JobOrderSettings.isMandatoryRate)
                            @Html.HiddenFor(m => m.JobOrderSettings.isEditableRate)
                            <div class="col-md-7 col-sm-10">
                                @if (!Model.JobOrderSettings.isEditableRate && Model.JobOrderLineId > 0)
                                {
                                    @Html.TextBoxFor(model => model.Rate, new { @class = "form-control  required text-right", @readonly = true })
                                    @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.Rate, new { @class = "form-control  required text-right" })
                                    @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                                }
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDealUnit?"":"none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleDealUnit)
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealUnitId, "Deal Unit", new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                <div class="col-xs-7" style="padding:0px">
                                    @Html.DropDownListFor(model => model.DealUnitId, new SelectList(ViewBag.DeliveryUnitList as System.Collections.IEnumerable, "UnitId", "UnitName"), new { @class = "form-control height cusrightnormal required" })
                                    @Html.ValidationMessageFor(model => model.DealUnitId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-5" style="padding:0px">
                                    @Html.TextBoxFor(model => model.UnitConversionMultiplier, new { @class = "form-control required" })
                                    @Html.ValidationMessageFor(model => model.UnitConversionMultiplier, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleDealUnit ? "" : "none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealQty, "Deal Qty", new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control  required" })
                                @Html.ValidationMessageFor(model => model.DealQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleRate?"":"none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, "Amount", new { @class = "control-label col-md-4 col-sm-10 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control " })
                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleLoss ? "" : "none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleLoss)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LossQty, "Loss Qty", new { @class = "control-label col-md-4 col-sm-10 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.LossQty, new { @class = "form-control " })
                                @Html.ValidationMessageFor(model => model.LossQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleUncountableQty ? "" : "none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleUncountableQty)
                        @Html.HiddenFor(m => m.JobOrderSettings.NonCountedQtyCaption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.NonCountedQty, (Model.JobOrderSettings.NonCountedQtyCaption ?? "Non Counted Qty"), new { @class = "control-label col-md-4 col-sm-10 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.NonCountedQty, new { @class = "form-control " })
                                @Html.ValidationMessageFor(model => model.NonCountedQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobOrderSettings.isVisibleLineDueDate ? "" : "none")">
                        @Html.HiddenFor(m => m.JobOrderSettings.isVisibleLineDueDate)
                        <div class="form-group">
                            @Html.LabelFor(model => model.DueDate, "DueDate", new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DueDate, "{0:dd/MMMM/yyyy}", new { @class = "datepicker form-control  required" })
                                @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-10" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Remark, new { @class = "form-control  required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">

                    @*@if (@Model.JobOrderLineId <= 0) {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>
                        }*@
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}

                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}


                </div>

            </div>

        }
    </div>
</div>


@if (ViewBag.LineMode == "Create")
{
    <script type="text/javascript">



        $(function(){

            $.ajax({
                cache: false,
                url: "/TaxCalculation/GetMaxLineId/",
                data: { HeaderId: parseInt($('#JobOrderHeaderId').val()), LineTable:"Web.JobOrderLines" , LineKeyField: "JobOrderLineId" ,HeaderKeyField:"JobOrderHeaderId"},
                success: function (data) {
                    AddCalculation(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrive calculation footer' + thrownError);
                },
            });


            function AddCalculation(MaxLineId)
            {
                AddCalculationFields(parseInt($('#JobOrderHeaderId').val()),false,'@Model.JobOrderSettings.CalculationId',"Web.JobOrderHeaderCharges","Web.JobOrderLineCharges",MaxLineId,$('#DocTypeId','.modal-body').val(),$('#SiteId','.modal-body').val(),$('#DivisionId','.modal-body').val());
            }

        })


        @*$( "#autocompleteorder" ).focusout( function( ) {

            if($("#ProductUidId").val() && !$("#autocompleteorder").is('[readonly]'))
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProdOrderForBarCode"))",
                    data: { ProdUId: $("#ProductUidId").val(),JobOrderHeaderId:$('#JobOrderHeaderId','.modal-body').val() },
                    success: function (data) {
                        if(data.Detail && data.ProdOrder){
                            $("#autocompleteorder").val(data.ProdOrder.ProdOrderDocNo).attr("readonly","true");
                            $('#ProdOrderLineId').val(data.ProdOrder.ProdOrderLineId);

                            $('#Specification').val(data.Detail.Data.Specification);
                            $("#ProdOrderBalanceQty").val(data.Detail.Data.Qty);
                            decimalplaces=data.Detail.Data.unitDecimalPlaces;
                            $("#UnitId").val(data.Detail.Data.UnitId);
                            $("#UnitName").val(data.Detail.Data.UnitName);
                            //$('#UnitConversionMultiplier').val(1);
                            $("#DealUnitId").val(data.Detail.Data.DealUnitId).trigger('change');

                            //(data.Dimension1Name==null)?(1==1):($("#Dimension1Name").val(data.Dimension1Name))

                            if(data.Dimension1Name!=null)
                            {
                                $("#Dimension1Id").select2('data', { id: data.Detail.Dimension1Id, text: data.Detail.Dimension1Name});
                            }

                            if(data.Dimension2Name!=null)
                            {
                                $("#Dimension2Id").select2('data', { id: data.Detail.Dimension2Id, text: data.Detail.Dimension2Name});
                            }

                            if(data.Dimension3Name!=null)
                            {
                                $("#Dimension3Id").select2('data', { id: data.Detail.Dimension3Id, text: data.Detail.Dimension3Name});
                            }

                            if(data.Dimension4Name!=null)
                            {
                                $("#Dimension4Id").select2('data', { id: data.Detail.Dimension4Id, text: data.Detail.Dimension4Name});
                            }

                        }
                        else
                        {
                            alert('Error in fetching ProdOrder');
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Order details.' + thrownError);
                    }
                });
            }
            else{

                if (!$(this).val()) {
                    $("#autocompleteorder").val("");
                    $('#ProdOrderLineId').val("");
                }

                if($("#autocompleteorder").val()=="")
                {
                    $('#ProdOrderLineId').val("");
                }

                if($('#ProdOrderLineId').val() && $('#ProdOrderLineId').val()!=0)
                {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetProdOrderDetail"))",
                        data: { ProdOrderLineId: $("#ProdOrderLineId").val(),JobOrderHeaderId:$('#JobOrderHeaderId','.modal-body').val() },
                        success: function (data) {
                            $('#Qty').val(data.Qty);
                            $('#Specification').val(data.Specification);
                            $('#DealQty').val((data.Qty).toFixed(data.DealunitDecimalPlaces));
                            $("#ProdOrderBalanceQty").val(data.Qty);
                            decimalplaces=data.unitDecimalPlaces;
                            $("#UnitId").val(data.UnitId);
                            $("#UnitName").val(data.UnitName);
                            //$('#UnitConversionMultiplier').val(1);
                            $("#ProductId").select2('data', { id: data.ProductId, text: data.ProductName});
                            $("#DealUnitId").val(data.DealUnitId).trigger('change');

                            //(data.Dimension1Name==null)?(1==1):($("#Dimension1Name").val(data.Dimension1Name))

                            if(data.Dimension1Name!=null)
                            {
                                $("#Dimension1Id").select2('data', { id: data.Dimension1Id, text: data.Dimension1Name});
                            }

                            if(data.Dimension2Name!=null)
                            {
                                $("#Dimension2Id").select2('data', { id: data.Dimension2Id, text: data.Dimension2Name});
                            }

                            if(data.Dimension3Name!=null)
                            {
                                $("#Dimension3Id").select2('data', { id: data.Dimension3Id, text: data.Dimension3Name});
                            }

                            if(data.Dimension4Name!=null)
                            {
                                $("#Dimension4Id").select2('data', { id: data.Dimension4Id, text: data.Dimension4Name});
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve Order details.' + thrownError);
                        }
                    });
                }
                else if($('#ProdOrderLineId').val()=="")
                {
                    $('#JobQty').val(0).trigger('keyup');
                    $("#ProductId").select2('val', "");
                    $('#LotNo').val('');
                    $('#UnitConversionMultiplier').val(0);
                    $('#Qty').val(0);
                    $('#Specification').val("");
                    $("#UnitName").val("");
                    $("#UnitId").val("");
                    $('#DealQty').val(0);
                    $('#UnitDecimalPlaces').val(0);
                    $('#DealUnitDecimalPlaces').val(0);
                    $("#Dimension1Name").val("");
                    $("#Dimension2Name").val("");
                    $("#Dimension3Name").val("");
                    $("#Dimension4Name").val("");
                }
            }
        }
            );*@





        @*$(function() {

            $("#autocompleteorder").autocomplete({
                delay: 500,
                minLength: 3,
                source: function(request,response){

                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetProdOrders"))",
                        data: { id:$("#JobOrderHeaderId").val(),term:request.term,Limit:20 },
                        success: function (data) {
                            if(data.length>0){
                                var cachearray = data.error ? [] : $.map(data, function(m) {

                                    return {
                                        value: m.DocNo,
                                        key: m.ProdOrderLineId,
                                        dim1: m.Dimension1Name,
                                        dim2:m.Dimension2Name,
                                        dim3: m.Dimension3Name,
                                        dim4:m.Dimension4Name,
                                        prod:m.ProductName,

                                    };
                                });
                                response(cachearray);
                            }
                            else
                            {
                                var dimensions = { width: 10};
                                var cachearray=$.map(dimensions,function(value,key){
                                    return{
                                        value:"No Record Found!",
                                        key:null
                                    }
                                })
                                response(cachearray);
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            $('.ui-autocomplete-loading').removeClass("ui-autocomplete-loading");
                            alert('Failed to retrieve Pending Orders.' + thrownError);
                        }

                    });

                },
                appendTo : $("#myModalContent"),
                select: function(event, ui) {
                    // prevent autocomplete from updating the textbox
                    // navigate to the selected item's url
                    if($("#autocompleteorder").val()=="")
                    {
                        $('#ProdOrderLineId').val("");
                    }
                    else
                        $("#ProdOrderLineId").val(ui.item.key);

                },

            }).data("ui-autocomplete")._renderItem = function(ul, item) {
                var $a = $("<a></a>");
                $("<strong></strong>").text(item.value).appendTo($a);
                (item.prod==null)?(""):($("<br /><span class='small' style='font-weight:bold'></span>").text(item.prod).appendTo($a));
                $("<br />").appendTo($a);
                (item.dim1==null)?(""):($("<span class='small'></span>").text(item.dim1+",").appendTo($a));
                (item.dim2==null)?(""):($("<span class='small'></span>").text(item.dim2).appendTo($a));



                return $("<li></li>").append($a).appendTo(ul);
            }
        });*@


    </script>
}
else
{
    <script type="text/javascript">
        $(function(){
            AddCalculationFieldsEdit(parseInt($('#JobOrderHeaderId').val()),$('#JobOrderLineId').val(),false,"Web.JobOrderHeaderCharges","Web.JobOrderLineCharges");
        })
    </script>
}





<script type="text/javascript">

    $(document).ready(function () {
        var id = $('#JobOrderHeaderId').val();
        CustomSelectFunction($("#ProdOrderLineId"), '/JobOrderLine/GetProdOrderForProduct', '/JobOrderLine/SetSingleProdOrderLine', ' ', false, 0,id);
        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', 'Enter Product Name', false, 3);
        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', ' ', false, 1);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', ' ', false, 1);
        CustomSelectFunction($("#Dimension3Id"), '/ComboHelpList/GetDimension3', '/ComboHelpList/SetSingleDimension3', ' ', false, 1);
        CustomSelectFunction($("#Dimension4Id"), '/ComboHelpList/GetDimension4', '/ComboHelpList/SetSingleDimension4', ' ', false, 1);
        CustomSelectFunction($("#FromProcessId"), '/ComboHelpList/GetProcess', '/ComboHelpList/SetSingleProcess', 'Enter Process Name', false, 1);
        CustomSelectFunction($("#SalesTaxGroupProductId"), '/ComboHelpList/GetSalesTaxGroupProduct', '/ComboHelpList/SetSingleSalesTaxGroupProduct', ' ', false, 0);

        $('#ProductUidName').on('change',function(e){
            if($(this).val()){
                //$( "#autocompleteorder" ).attr("index","-1");
                InitializePopover(this,$("#ProductUidName").val(),$('#JobOrderSettings_isPostedInStock').val(),$('#GodownId').val(),TransactionTypeConstantsEnum.Issue);
                $(this).popover('show');
                setTimeout(function() {$('#ProductUidName').popover('destroy')},10000);
                //$( "#autocompleteorder" ).trigger("focusout");
                GetProductUidProdOrder();
            }
            else
            {
                $('#ProductUidId').val('');
                //$( "#autocompleteorder" ).val("").removeAttr("readonly").trigger("focusout");
            }
        })

        function GetProductUidProdOrder() {
            var ProcessProgress = $("#Product detail loading progress");
            ProcessProgress.show();
            if ($("#ProductUidId").val() != 0 && $("#ProductUidId").val() != null) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetFirstProdOrderForProductUid"))",
                    data: { JobOrderHeaderId: $("#JobOrderHeaderId").val(),ProductUidId: $("#ProductUidId").val() },
                success: function (data) {
                    $("#ProdOrderLineId").val(data.id);
                    Validate_ProdOrderLine();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve product details.' + thrownError);
                }
            });
        }
    }

        var IsSaved=false;
        var ValidationCount=0;

        var id=@Model.JobOrderLineId;
        if(id>0)
        {
            var tex='@Model.ProdOrderDocNo';
            //$("#autocompleteorder").val(tex).attr('disabled', 'disabled');
            $("#ProductUidName").attr('readonly', 'true');
        }

        $('#modform').bind('submit',function(event){

            if(!IsSaved)
            {
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                $('button:submit').attr('disabled','disabled');
                return IsSaved;
            }
            else
            {
                return false;
            }


        });

        function ValidateData() {
            var ValidationMessage = "";

            //Client Side Validaion.....

            return  (ValidationMessage=="");

        }



        $('.datepicker').datepicker({
            format: 'dd/MM/yyyy',
            "setDate": new Date(),
            "autoclose": true

        })

        var id=@Model.JobOrderLineId;

        if(id>0)
        {
            @*var tex='@Model.ProdOrderDocNo';
            $("#acprodorders").val(tex);*@
            $('#ProductId').attr('readonly','true');
            $('#acprodorders').attr('disabled','disabled');
            $('#Dimension1Id').attr('readonly','true');
            $('#Dimension2Id').attr('readonly','true');
            $('#Dimension3Id').attr('readonly','true');
            $('#Dimension4Id').attr('readonly','true');
            $('#Specification').attr('readonly','true');
        }
        var IsProOrderBased='@Model.IsProdOrderBased';

        if(IsProOrderBased=='False')
        {
            //$('#acprodorders').attr('disabled','disabled');
        }


        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/JobOrderLine/DeletePost';
                $('form#modform').attr('action',url);

                DeletingProductCharges();
                return;
            }
            else
            {
                return false;
            }
        })
    });

</script>

@if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create" || ViewBag.LineMode == "Delete")
{

    <script type="text/javascript">

    var decimalplaces='@Model.DealUnitDecimalPlaces';

    $(function(){

        $("#DealQty,#Rate,#Amount,#Qty,#UnitConversionMultiplier").keyup(Calculation);
        $("#DealUnitId").change(GetUnitConversionMultiplier);
        $("#ProductId").change(GetProductDetail);
        $('#SalesTaxGroupProductId').change(function(){
            Validate_SalesTaxGroupProductId();
        })

        function Validate_SalesTaxGroupProductId()
        {
            if ($("#SalesTaxGroupProductId").val() != 0 && $("#SalesTaxGroupProductId").val() != null) {
                GetChargeRates('@Model.CalculationId',$('#DocTypeId','.modal-body').val(),$('#SiteId','.modal-body').val(),$('#DivisionId','.modal-body').val(),$('#JobOrderSettings_ProcessId','.modal-body').val(),$('#SalesTaxGroupPersonId','.modal-body').val(),$('#SalesTaxGroupProductId','.modal-body').val())
                Calculation();
            }
        }


        function GetProductDetail() {
            var ProcessProgress = $("#Product detail loading progress");
            ProcessProgress.show();
            if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProductDetailJson"))",
                    data: { ProductId: $("#ProductId").val(),JobOrderId: $("#JobOrderHeaderId").val() },
                    success: function (data) {
                        $("#Rate").val(data.StandardCost);
                        $("#UnitId").val(data.UnitId);
                        $("#DealUnitId").val(data.DealUnitId);
                        $('#Specification').val(data.Specification);
                        decimalplaces=data.DealUnitDecimalPlaces;
                        GetUnitConversionMultiplier.call();
                        //Calculation.call();

                        $("#CALL_INCENTRATE").val(data.Incentive).trigger('change');
                        $("#LossQty").val(data.Loss);

                        (data.SalesTaxGroupProductId==null)?(1==1):($("#SalesTaxGroupProductId").select2("data", {id: data.SalesTaxGroupProductId, text: data.SalesTaxGroupProductName}));
                        GetChargeRates('@Model.CalculationId',$('#DocTypeId','.modal-body').val(),$('#SiteId','.modal-body').val(),$('#DivisionId','.modal-body').val(),$('#JobOrderSettings_ProcessId','.modal-body').val(),$('#SalesTaxGroupPersonId','.modal-body').val(),$('#SalesTaxGroupProductId','.modal-body').val())
                        ChargeCalculation();

                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
        }


        function GetUnitConversionMultiplier() {
            
            if ($("#UnitId").val() == $("#DealUnitId").val()) {
                $("#UnitConversionMultiplier").val(1);
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetUnitConversionDetailJson"))",
                    data: { prodid: $("#ProductId").val(), UnitId: $("#UnitId").val(), DealUnitId: $("#DealUnitId").val(),JobOrderId:$('#JobOrderHeaderId').val() },

                    success: function (data) {
                        decimalplaces=data.DecimalPlace;
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Unit conversion details.' + thrownError);
                    }
                });
                Calculation.call();
            }
            else {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetUnitConversionDetailJson"))",
                        data: { prodid: $("#ProductId").val(), UnitId: $("#UnitId").val(), DealUnitId: $("#DealUnitId").val(),JobOrderId:$('#JobOrderHeaderId').val() },

                        success: function (data) {
                            $("#UnitConversionMultiplier").val(data.Value);
                            decimalplaces=data.DecimalPlace;
                            Calculation.call();
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve Unit conversion details.' + thrownError);
                        }
                    });
                }
            }


            function Calculation() {
                if ($('#UnitConversionMultiplier').val() != 0) {
                    $('#DealQty').val(($('#Qty').val() * $('#UnitConversionMultiplier').val()).toFixed(decimalplaces))
                }
                else
                {
                    $('#DealQty').val(0);
                }

                $('#Amount').val(($('#DealQty').val() * $('#Rate').val()).toFixed(2));

                ChargeCalculation();
            }

        })


        $('#Qty').keyup(function () {
            var ExcessQtyAllowed = 0;
            if ($('#JobOrderSettings_ExcessQtyAllowedPer').val() != null && $('#JobOrderSettings_ExcessQtyAllowedPer').val() != 0)
            {
                ExcessQtyAllowed = $('#ProdOrderBalanceQty').val() * $('#JobOrderSettings_ExcessQtyAllowedPer').val()/100;
            }
            

            if (($('#ProdOrderBalanceQty').val() - $('#Qty').val() + ExcessQtyAllowed) < 0 && $('#ProdOrderLineId').val()>0) {
                $('#submit', '.modal-body').attr('disabled', 'disabled');
                if ($(this).closest('div.col-md-4 col-sm-10').find('span#cerror').length == 0)
                {
                    $(this).parents('.col-md-4 col-sm-10').append("<span class='text-danger' id='cerror'>Qty exceeding Production Order Qty</span>")
                }
            }
            else
            {
                $('#submit', '.modal-body').removeAttr('disabled');
                if ($(this).closest('div.col-md-4 col-sm-10').find('span#cerror').length > 0)
                {
                    $(this).closest('.col-md-4 col-sm-10').find('span#cerror').remove();
                }
            }
        })


        $("#ProdOrderLineId").change(function(){
            Validate_ProdOrderLine();
        });


        function Validate_ProdOrderLine()
        {
            if($('#ProdOrderLineId').val() && $('#ProdOrderLineId').val()!=0)
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProdOrderDetail"))",
                    data: { ProdOrderLineId: $("#ProdOrderLineId").val(),JobOrderHeaderId:$('#JobOrderHeaderId','.modal-body').val() },
                    success: function (data) {
                        $('#Qty').val(data.Qty);
                        $('#Specification').val(data.Specification);
                        $('#DealQty').val((data.Qty).toFixed(data.DealunitDecimalPlaces));
                        $("#ProdOrderBalanceQty").val(data.Qty);
                        decimalplaces=data.unitDecimalPlaces;
                        $("#UnitId").val(data.UnitId);
                        $("#UnitName").val(data.UnitName);
                        //$('#UnitConversionMultiplier').val(1);
                        //$("#ProductId").select2('data', { id: data.ProductId, text: data.ProductName});
                        $("#ProductId").val(data.ProductId);
                        $("#DealUnitId").val(data.DealUnitId).trigger('change');
                        $("#ProdOrderDocNo").val(data.ProdOrderDocNo);
                        //(data.Dimension1Name==null)?(1==1):($("#Dimension1Name").val(data.Dimension1Name))

                        if(data.Dimension1Name!=null)
                        {
                            $("#Dimension1Id").select2('data', { id: data.Dimension1Id, text: data.Dimension1Name});
                        }

                        if(data.Dimension2Name!=null)
                        {
                            $("#Dimension2Id").select2('data', { id: data.Dimension2Id, text: data.Dimension2Name});
                        }

                        if(data.Dimension3Name!=null)
                        {
                            $("#Dimension3Id").select2('data', { id: data.Dimension3Id, text: data.Dimension3Name});
                        }

                        if(data.Dimension4Name!=null)
                        {
                            $("#Dimension4Id").select2('data', { id: data.Dimension4Id, text: data.Dimension4Name});
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Order details.' + thrownError);
                    }
                });
            }
            else if($('#ProdOrderLineId').val()=="")
            {
                $('#JobQty').val(0).trigger('keyup');
                //$("#ProductId").select2('val', "");
                $("#ProductId").val("");
                $('#LotNo').val('');
                $('#UnitConversionMultiplier').val(0);
                $('#Qty').val(0);
                $('#Specification').val("");
                $("#UnitName").val("");
                $("#UnitId").val("");
                $('#DealQty').val(0);
                $('#UnitDecimalPlaces').val(0);
                $('#DealUnitDecimalPlaces').val(0);
                $("#Dimension1Name").val("");
                $("#Dimension2Name").val("");
                $("#Dimension3Name").val("");
                $("#Dimension4Name").val("");
            }
        }


    </script>

}

@if ((ViewBag.LineMode != "Create") && (ViewBag.LineMode != "Edit") && (ViewBag.LineMode != "Delete"))
{
    <script type="text/javascript">

        RemoveFields();

        function RemoveFields(){
            //Disabling input fields
            $(':input','.modal-body').attr('disabled','disabled');
        }


    </script>
}