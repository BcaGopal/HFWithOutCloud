@model Model.ViewModels.SaleInvoiceFilterViewModel
@using Core.Common

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Filters</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_FilterPostOrders", "DirectSaleInvoiceLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
           

            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.SaleInvoiceHeaderId)

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="row">
                    <div class="col-md-6" style="display:@((Model.SaleInvoiceSettings.isVisibleForSaleOrder == true && Model.SaleInvoiceSettings.isVisiblePacking == false) ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleInvoiceSettings.isVisibleForSaleOrder)
                        <div class="form-group">
                            @Html.LabelFor(model => model.SaleOrderHeaderId, "Sale Orders", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.SaleOrderHeaderId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.SaleOrderHeaderId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleInvoiceSettings.isVisiblePacking ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleInvoiceSettings.isVisiblePacking)
                        <div class="form-group">
                            @Html.LabelFor(model => model.PackingHeaderId, "Packing No.", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.PackingHeaderId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.PackingHeaderId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, "Product ", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                <span id="status" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductGroupId, "Product Group", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductGroupId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductGroupId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>



                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom" name="Command:Edit" type="submit"><h2 style="margin:0px" id="submit" title="Proceed"><span class="glyphicon glyphicon-arrow-right black"></span> </h2></button>
                </div>

            </div>

        }
    </div>
</div>


<script type="text/javascript">


    $(document).ready(function () {
        CustomSelectFunction($("#ProductGroupId"), '/ComboHelpList/GetProductGroup', '/ComboHelpList/SetProductGroup', ' ', true, 1);
        CustomSelectFunction($("#PackingHeaderId"), '/DirectSaleInvoiceHeader/GetPackingHeader', '/ComboHelpList/SetStockHeader', ' ', true, 0, $('#SaleInvoiceHeaderId').val());
    });

    var DocID = $('#SaleInvoiceHeaderId', '.modal-body').val();
    var URL = '/DirectSaleInvoiceLine/GetSaleOrders/' + DocID;
    $("#SaleOrderHeaderId").select2({
        minimumInputLength: 0,
        multiple: true,
        ajax: {
            url: URL,
            dataType: 'json',
            type: "GET",
            quietMillis: 1000,
            data: function (term) {
                return {
                    term: term,
                    Limit:20,
                };
            },
            results: function (data) {
                return {
                    results: $.map(data, function (item) {
                        return {
                            text: item.PropFirst,
                            id: item.Id
                        }
                    })

                };
            }
        },


    });


    var URL = '/DirectSaleInvoiceLine/GetCustomProductsForSaleOrder/' + DocID;
    $("#ProductId").select2({
        minimumInputLength: 1,
        multiple: true,
        ajax: {
            url: URL,
            dataType: 'json',
            type: "GET",
            quietMillis: 1000,
            data: function (term) {
                return {
                    term: term,
                    Limit:20,
                };
            },
            results: function (data) {
                return {
                    results: $.map(data, function (item) {
                        return {
                            text: item.ProductName,
                            id: item.ProductId
                        }
                    })

                };
            }
        },


    });

</script>