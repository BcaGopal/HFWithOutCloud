@model Model.ViewModel.JobInvoiceRateAmendmentLineViewModel
@using Core.Common

<style type="text/css">
    .ui-autocomplete {
        max-height: 250px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Rate Amendment</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "JobInvoiceRateAmendmentLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
            @Html.ValidationLog((string)TempData["CSEXCL"])
            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.JobInvoiceAmendmentHeaderId)
                @Html.HiddenFor(m => m.JobInvoiceRateAmendmentLineId)
                @Html.HiddenFor(m => m.JobInvoiceLineId)
                @Html.HiddenFor(m => m.JobInvoiceSettings.isPostedInStock)
                @Html.HiddenFor(m => m.JobInvoiceSettings.ProcessId)
                @Html.HiddenFor(m => m.JobInvoiceSettings.SqlProcConsumption)
                @Html.HiddenFor(m => m.JobInvoiceSettings.CalculationId)
                @Html.HiddenFor(m => m.JobInvoiceSettings.isPostedInStockProcess)
                @Html.HiddenFor(m => m.JobInvoiceSettings.AmountRoundOff)
                @Html.HiddenFor(m => m.DivisionId)
                @Html.HiddenFor(m => m.SiteId)
                @Html.HiddenFor(m => m.DocTypeId)

                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                <div class="row">
                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleProductUID?"":"none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleProductUID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductUidName, "Product UId", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductUidName, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.ProductUidName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobInvoiceLineId, "Job Invoice", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @if (Model.JobInvoiceSettings.isVisibleProductUID)
                                {
                                    @Html.TextBox(" ", "", new { @class = "form-control", @id = "acorders", @readonly = "true", @tabindex = "-1" })
                                }
                                else
                                {
                                    @Html.TextBox(" ", "", new { @class = "form-control", @id = "acorders" })
                                }
                                @Html.ValidationMessageFor(model => model.JobInvoiceLineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, "Product", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control required", @readonly = "true", @tabindex = "-1" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(!Model.JobInvoiceSettings.isVisibleHeaderJobWorker?"":"none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleHeaderJobWorker)
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobWorkerId, "Job Worker", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.JobWorkerId, new { @class = "form-control required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.JobWorkerId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleLotNo?"":"none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleLotNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LotNo, "LotNo", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleDimension1?"":"none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Name, "Dimension1", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Name, new { @class = "form-control required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension1Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleDimension2?"":"none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Name, "Dimension2", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Name, new { @class = "form-control required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension2Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleDimension3?"":"none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension3)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension3Name, "Dimension3", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension3Name, new { @class = "form-control required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension3Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleDimension4?"":"none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension4)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension4Name, "Dimension4", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension4Name, new { @class = "form-control required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension4Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                <div class="col-xs-7" style="padding:0px">
                                    @Html.TextBoxFor(model => model.Qty, new { @class = "form-control required", @readonly = true })
                                    @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-5" style="padding:0px">
                                    @Html.TextBoxFor(m => m.UnitName, new { @class = "form-control col-xs-2", @readonly = "true" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealUnitName, "Deal Unit", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                <div class="col-xs-7" style="padding:0px">
                                    @Html.TextBoxFor(model => model.DealUnitName, new { @class = "form-control required", @readonly = true })
                                    @Html.ValidationMessageFor(model => model.DealUnitName, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-5" style="padding:0px">
                                    @Html.TextBoxFor(m => m.UnitConversionMultiplier, new { @class = "form-control col-xs-2", @readonly = "true" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealQty, "Deal Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.DealQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobInvoiceRate, "Invoice Rate", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.JobInvoiceRate, new { @class = "form-control required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.JobInvoiceRate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.AmendedRate, "Amend Rate", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.AmendedRate, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.AmendedRate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rate, "Rate", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Rate, new { @class = "form-control required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, "Amount", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextAreaFor(model => model.Remark, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}
                </div>
            </div>
        }
    </div>
</div>

@if (Model.JobInvoiceRateAmendmentLineId <= 0)
{
    <script type="text/javascript">
        $(function () {

            $.ajax({
                cache: false,
                url: "/TaxCalculation/GetMaxLineId/",
                data: { HeaderId: parseInt($('#JobInvoiceAmendmentHeaderId').val()), LineTable: "Web.JobInvoiceRateAmendmentLines", LineKeyField: "JobInvoiceRateAmendmentLineId", HeaderKeyField: "JobInvoiceAmendmentHeaderId" },
                success: function (data) {
                    AddCalculation(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrive calculation footer' + thrownError);
                },
            });


            function AddCalculation(MaxLineId) {
                AddCalculationFields(parseInt($('#JobInvoiceAmendmentHeaderId').val()), false, '@Model.JobInvoiceSettings.CalculationId', "Web.JobInvoiceAmendmentHeaderCharges", "Web.JobInvoiceRateAmendmentLineCharges", MaxLineId, $('#DocTypeId', '.modal-body').val(), $('#SiteId', '.modal-body').val(), $('#DivisionId', '.modal-body').val());
            }

        })
    </script>
}
else
{
    <script type="text/javascript">
        $(function () {
            AddCalculationFieldsEdit(parseInt($('#JobInvoiceAmendmentHeaderId').val()), $('#JobInvoiceRateAmendmentLineId').val(), false, "Web.JobInvoiceAmendmentHeaderCharges", "Web.JobInvoiceRateAmendmentLineCharges");
        })
    </script>
}



@if (Model.JobInvoiceRateAmendmentLineId <= 0)
{
    <script type="text/javascript">
        $("#acorders").focusout(function () {

            if (!$(this).val()) {
                $("#acorders").val("");
                $('#JobInvoiceLineId').val("").trigger('change');
                DeAssignValues();
            }

            if ($("#acorders").val() == "") {
                $('#JobInvoiceLineId').val("").trigger('change');
                DeAssignValues();
            }

            if ($('#JobInvoiceLineId').val() != "" && $('#JobInvoiceLineId').val() != 0) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetLineDetail"))",
                    data: { LineId: $("#JobInvoiceLineId").val() },
                    success: function (data) {

                        AssignValues(data);
                        $("#JobInvoiceLineId").trigger('change');

                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
            else if ($('#JobInvoiceLineId').val() == "") {
                DeAssignValues();
            }
        }
        );



        $("#acorders").autocomplete({
            delay: 500,
            minLength: 3,
            source: function (request, response) {

                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetPendingInvoices"))",
                    data: { HeaderId: $("#JobInvoiceAmendmentHeaderId").val(), term: request.term, Limit: 20 },
                    success: function (data) {

                        var cachearray = data.error ? [] : $.map(data, function (m) {
                            return {
                                value: m.DocNo,
                                key: m.JobInvoiceLineId,
                                dim1: m.Dimension1Name,
                                dim2: m.Dimension2Name,
                                dim3: m.Dimension3Name,
                                dim4: m.Dimension4Name,
                                prod: m.ProductName,
                                balqty: m.BalanceQty,
                                barcode: m.ProductUidName,
                            };
                        });
                        response(cachearray);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Invoices.' + thrownError);
                    }
                });

            },
            appendTo: $("#myModalContent"),
            select: function (event, ui) {
                // prevent autocomplete from updating the textbox
                // navigate to the selected item's url
                if ($("#acorders").val() == "") {
                    $('#JobInvoiceLineId').val("");
                }
                else
                    $("#JobInvoiceLineId").val(ui.item.key);

            },

        }).data("ui-autocomplete")._renderItem = function (ul, item) {
            var $a = $("<a></a>");
            $("<strong></strong>").text(item.value).appendTo($a);
            (item.prod == null) ? ("") : ($("<br /><span class='small' style='font-weight:bold'></span>").text(item.prod).appendTo($a));
            (item.dim1 == null) ? ("") : ($("<br /><span class='small'></span>").text(item.dim1 + ",").appendTo($a));
            (item.dim2 == null) ? ("") : ($("<span class='small'></span>").text(item.dim2).appendTo($a));
            (item.balqty == null) ? ("") : ($("<br /><span class='small'></span>").text("Qty:" + item.balqty).appendTo($a));
            (item.barcode == null) ? ("") : ($("<br /><span class='small'></span>").text("ProductUId:" + item.barcode).appendTo($a));
            return $("<li></li>").append($a).appendTo(ul);
        }


        $("#acorders").bind("focus", function () {
            $(this).keydown();
        })

        $('#ProductUidName').change(function () {


            if (($('#ProductUidName').val()) > 0) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetLineDetailFromUId"))",
                    data: { UID: $("#ProductUidName").val(), HeaderId: $('#JobInvoiceAmendmentHeaderId', '.modal-body').val() },
                    success: function (data) {

                        if (!data.success) {
                            $("#ProductUidName")
                            .popover({
                                trigger: 'manual',
                                container: '.modal-body',
                                'delay': { "hide": "1000" },
                                html: true,
                                content: "<ul class='list-group'>  <li class='list-group-item active'> Validation Detail </li>    <li class='list-group-item'>Message: No Pending Barcode found</li>   </ul>"
                            });

                            $('#ProductUidName').popover('show');
                            setTimeout(function () { $('#ProductUidName').popover('destroy'); if (!$('#ProductId').val()) { $('#ProductUidName').val('') } else { $('#ProductId').trigger('change'); } }, 10000);
                            DeAssignValues();
                        }
                        else {
                            AssignValues(data.LineDetail);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
            else {
                DeAssignValues();
            }

        });

        $('#JobInvoiceLineId').change(function () {


            if (($('#JobInvoiceLineId').val()) > 0) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("ValidateJobInvoice"))",
                    data: { LineId: $("#JobInvoiceLineId").val(), HeaderId: $('#JobInvoiceAmendmentHeaderId').val() },
                    success: function (data) {

                        if (!data) {
                            $('#submit', '.modal-body').attr('disabled', 'disabled');
                            if ($('#acorders').closest('div.form-horizontal').find('span#cerror').length == 0) {
                                $('#acorders').parents('.form-horizontal').prepend("<span class='text-danger' id='Joerror'>Already Exists</span>")
                            }
                        }
                        else {
                            $('#submit', '.modal-body').removeAttr('disabled');
                            if ($('#acorders').closest('div.form-horizontal').find('span#Joerror').length > 0) {
                                $('#acorders').closest('.form-horizontal').find('span#Joerror').remove();
                            }
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
            else {
                $('#submit', '.modal-body').removeAttr('disabled');
                if ($('#acorders').closest('div.form-horizontal').find('span#Joerror').length > 0) {
                    $('#acorders').closest('.form-horizontal').find('span#Joerror').remove();
                }
            }

        });


        function DeAssignValues() {
            $('#Qty').val("");
            $("#ProductId").select2("val", "");
            $('#Specification').val("");
            $('#Dimension1Name').val("");
            $('#Dimension2Name').val("");
            $('#Dimension3Name').val("");
            $('#Dimension4Name').val("");
            $('#LotNo').val("");
            $('#DealQty').val("");
            $('#UnitName').val("");
            $('#DealUnitName').val("");
            $('#UnitConversionMultiplier').val("");
            $('#JobInvoiceRate').val("");
            $('#AmendedRate').val("");
            $('#JobWorkerId').select2("val", "").removeAttr("readonly");
            $('#AmendedRate').val(0);
            $('#Amount').val(0);
            $('#Rate').val(0);
        }


        function AssignValues(data) {
            $('#Qty').val(data.Qty);
            $('#JobInvoiceLineId').val(data.JobInvoiceLineId);
            $('#ProductId').select2("data", { id: data.ProductId, text: data.ProductName }).attr("readonly", "true");
            $('#DealQty').val(data.DealQty);
            $('#Specification').val(data.Specification);
            $("#Dimension1Name").val(data.Dimension1Name);
            $("#Dimension2Name").val(data.Dimension2Name);
            $("#Dimension3Name").val(data.Dimension3Name);
            $("#Dimension4Name").val(data.Dimension4Name);
            $('#LotNo').val(data.LotNo);
            $('#UnitName').val(data.UnitName);
            $('#DealUnitName').val(data.DealUnitName);
            $('#UnitConversionMultiplier').val(data.UnitConversionMultiplier);
            $('#JobInvoiceRate').val(data.Rate);
            $('#AmendedRate').val(data.AmendedRate);
            $('#JobWorkerId').select2("data", { id: data.JobWorkerId, text: data.JobWorkerName }).attr("readonly", "true");
        }




    </script>
}






<script type="text/javascript">

    var AmountRoundOff = '@Model.JobInvoiceSettings.AmountRoundOff';

    $(function () {
        CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', 'Enter Product Name', false, 3);
        CustomSelectFunction($("#JobWorkerId"), '/ComboHelpList/GetJobWorkers', '/ComboHelpList/SetSinglePerson', 'Enter JobWorker Name', false, 3);
    });

    var id = '@Model.JobInvoiceRateAmendmentLineId';
    if (id > 0) {
        var order = '@Model.JobInvoiceDocNo';
        $('#acorders').val(order).attr('disabled', 'disabled');
        $('#ProductId').attr('readonly', 'true');
        $('#ProductUidName').attr('readonly', 'true');

    }

    $('#delete', '.modal-content').click(function (e) {
        if (id > 0) {
            var url = '/JobInvoiceRateAmendmentLine/DeletePost';
            $('form#modform').attr('action', url);
            DeletingProductCharges();
            return;
        }
        else {
            return false;
        }
    })
    $('#AmendedRate').keyup(function () {
        if (((parseInt($('#AmendedRate').val())) <= 0 || (parseInt($('#AmendedRate').val())) == $('#OrderRate').val())) {
            $('#submit', '.modal-body').attr('disabled', 'disabled');
            if ($(this).closest('div.col-md-7 col-sm-10').find('span#cerror').length == 0) {
                $(this).parents('.col-md-7 col-sm-10').append("<span class='text-danger' id='cerror'>Invalid Rate</span>")
            }
        }
        else if ($('#AmendedRate').val()) {

            $('#Rate').val(($('#AmendedRate').val() - $('#JobInvoiceRate').val()).toFixed(2));



            if (AmountRoundOff)
                $('#Amount').val(($('#Rate').val() * $('#DealQty').val()).toFixed(AmountRoundOff));
            else
                $('#Amount').val(($('#Rate').val() * $('#DealQty').val()).toFixed(2));

            $('#submit', '.modal-body').removeAttr('disabled');
            if ($(this).closest('div.col-md-7 col-sm-10').find('span#cerror').length > 0) {
                $(this).closest('.col-md-7 col-sm-10').find('span#cerror').remove();
            }

            ChargeCalculation();
        }
    })

    var IsSaved = false;
    var ValidationCount = 0;

    $('#modform').bind('submit', function (event) {

        if (!IsSaved) {
            if (!ValidateData()) {
                return false;
            }
            IsSaved = true;
            $('button:submit').attr('disabled', 'disabled');
            return IsSaved;
        }
        else {
            return false;
        }


    });

    function ValidateData() {
        var ValidationMessage = "";

        //Client Side Validaion.....

        return (ValidationMessage == "");

    }

</script>