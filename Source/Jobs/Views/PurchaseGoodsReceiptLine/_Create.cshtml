@model Model.ViewModel.PurchaseGoodsReceiptLineViewModel
@using Core.Common

<style type="text/css">
    .ui-autocomplete {
        max-height: 250px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Products</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "PurchaseGoodsReceiptLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
           @Html.ValidationLog((string)TempData["CSEXCL"])
            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.PurchaseGoodsReceiptLineId)
                @Html.HiddenFor(m => m.PurchaseGoodsReceiptHeaderId)
                @Html.HiddenFor(m => m.PurchaseOrderLineId)
                @Html.HiddenFor(m => m.SupplierId)
                @Html.HiddenFor(m => m.OrderBalanceQty)
                @Html.HiddenFor(m => m.DealunitDecimalPlaces)
                @Html.HiddenFor(m => m.OrderDealQty)
                @Html.HiddenFor(m => m.OrderQty)
                @Html.HiddenFor(m => m.ProductUidId)
                @Html.HiddenFor(m => m.GodownId)
                @Html.HiddenFor(m => m.PurchGoodsReceiptSettings.isPostedInStockVirtual)

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-6" style="display:@(Model.PurchGoodsReceiptSettings.isVisibleProductUID ? "" : "none")">
                        @Html.HiddenFor(m => m.PurchGoodsReceiptSettings.isVisibleProductUID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductUidId, "ProductUId", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductUidName, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductUidId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PurchaseOrderLineId, "Purchase Order", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBox(" ", " ", new { @class = "form-control", @id = "autocompleteorder" })
                                @Html.ValidationMessageFor(model => model.PurchaseOrderLineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.PurchGoodsReceiptSettings.isVisibleLotNo ? "" : "none")">
                        @Html.HiddenFor(m => m.PurchGoodsReceiptSettings.isVisibleLotNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LotNo, "Lot No", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.PurchGoodsReceiptSettings.isVisibleDimension1 ? "" : "none")">
                        @Html.HiddenFor(m => m.PurchGoodsReceiptSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, (Model.DocumentTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.PurchGoodsReceiptSettings.isVisibleDimension2 ? "" : "none")">
                        @Html.HiddenFor(m => m.PurchGoodsReceiptSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, (Model.DocumentTypeSettings.Dimension2Caption ?? "Dimension2"), new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DocQty, "DocQty", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DocQty, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.DocQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px;">
                            <div class="col-xs-7" style="padding-right:0px;">
                                @Html.TextBoxFor(model => model.Qty, new { @class = "form-control required cusrightnormal" })
                                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-5" style="padding-left:0px">
                                @Html.TextBoxFor(m => m.UnitId, new { @class = "form-control col-xs-2 cusleftnormal", @readonly = "true" })
                            </div>
                                </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rate, "Rate", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>







                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealUnitId, "Deal Unit& Multiplier", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px;">
                            <div class="col-xs-7" style="padding-right:0px">
                                @Html.DropDownListFor(model => model.DealUnitId, new SelectList(ViewBag.DeliveryUnitList as System.Collections.IEnumerable, "UnitId", "UnitName"), string.Empty, new { @class = "form-control height cusrightnormal required" })
                                @Html.ValidationMessageFor(model => model.DealUnitId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-5" style="padding-left:0px">
                                @Html.TextBoxFor(model => model.UnitConversionMultiplier, new { @class = "form-control cusleftnormal required" })
                                @Html.ValidationMessageFor(model => model.UnitConversionMultiplier, "", new { @class = "text-danger" })
                            </div>
                                </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealQty, "Deal Qty", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.DealQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DebitNoteReason, "Debit Note Reason", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DebitNoteReason, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.DebitNoteReason, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DebitNoteAmount, "Debit Note Amount", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DebitNoteAmount, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.DebitNoteAmount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label  col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextAreaFor(model => model.Remark, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>


                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}

                </div>
            </div>
        }
    </div>
</div>

<script type="text/javascript">


    $(document).ready(function () {
        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', 'Enter Product', false, 3);
        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', ' ', false, 1);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', ' ', false, 1);



        var URL = '/ComboHelpList/GetCustomProducts/';
        $("#ProductId").select2({
            minimumInputLength: 1,
            multiple: false,
            ajax: {
                url: URL,
                dataType: 'json',
                type: "GET",
                quietMillis: 1000,
                data: function (term) {
                    return {
                        term: term,
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.PropFirst,
                                id: item.Id
                            }
                        })

                    };
                }
            },
            initSelection: function (element, callback) {

                var xval = element.val();
                if (xval != 0) {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "/ComboHelpList/SetSingleProducts",
                        data: { Ids: element.val() },
                        success: function (data) {
                            callback(data);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to Retrive Qty' + thrownError);
                        }
                    })
                }
                //callback([{ id: "1", text: "arpit" }, { id: "2", text: "akash" }]);
            }


        });


        var IsSaved=false;
        var ValidationCount=0;

        $('#modform').bind('submit',function(event){

            if(!IsSaved)
            {
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                $('button:submit').attr('disabled','disabled');
                return IsSaved;
            }
            else
            {
                return false;
            }


        });

        function ValidateData() {
            var ValidationMessage = "";

            //Client Side Validaion.....

            return  (ValidationMessage=="");

        }


        $("#ProductId").select2("focus");


        $('#ProductUidName').on('change',function(e){


            var data=InitializePopover(this,$("#ProductUidName").val(),true,$('#SupplierId').val(),TransactionTypeConstantsEnum.Receive);


            if(!data.status)
            {
                $(this).popover('show');
                setTimeout(function() {$('#ProductUidName').popover('destroy');if(!$('#ProductId').val()){ $('#ProductUidName').val('') }else{$('#ProductId').trigger('change');  }},10000);
                $('#PurchaseOrderLineId').val(0);
                $('#autocompleteorder').val("").removeAttr('disabled');
            }
            else
            {
                $('#PurchaseOrderLineId').val(data.data.GenLineId);
                $('#autocompleteorder').val(data.data.GenDocNo).attr('disabled', 'disabled');
            }


        })


        var id=@Model.PurchaseGoodsReceiptLineId;
        if(id>0)
        {
            var order = '@Model.PurchaseGoodsReceiptHeaderDocNo';
            $('#autocompleteorder').val(order).attr('disabled', 'disabled');
            $('#ProductId').attr('readonly', 'true');
            $('#Dimension1Id').attr('readonly', 'true');
            $('#Dimension2Id').attr('readonly', 'true');
            $('#ProductUidName').attr('readonly', 'true');
            if($('#ProductUidId').val())
            {
                $('#Qty').attr('readonly','true');
                $('#LotNo').attr('readonly', 'true');
            }
        }
        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/PurchaseGoodsReceiptLine/DeletePost';
                $('form#modform').attr('action',url);
                return;
            }
            else
            {
                return false;
            }
        })
    });

</script>

@if (Model.PurchaseGoodsReceiptLineId <= 0)
{
    <script type="text/javascript">

        $( "#autocompleteorder" ).autocomplete({
            change: function( event, ui ) {
                //alert(ui.item);
                //alert(ui.item.value);
                //alert($("#autocompleteorder").val());
                //alert($('#PurchaseOrderLineId').val());
                if (ui.item== null || ui.item.value == undefined) {
                    $("#autocompleteorder").val("");
                    $('#PurchaseOrderLineId').val("");
                }


                if($("#autocompleteorder").val()=="")
                {
                    $('#PurchaseOrderLineId').val("");
                }

                if($('#PurchaseOrderLineId').val()!="")
                {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetOrderDetail"))",
                        data: { OrderId: $("#PurchaseOrderLineId").val() },
                        success: function (data) {
                            $('#Qty').val(data.Qty);
                            $('#DocQty').val(data.Qty);
                            $('#Specification').val(data.Specification);
                            $('#Specification').attr('readonly','true')
                            $('#LotNo').val(data.LotNo);
                            $("#UnitId").val(data.UnitId);
                            $("#DealUnitId").val(data.DealUnitId);
                            $('#UnitConversionMultiplier').val(data.UnitConversionMultiplier);
                            $('#DealunitDecimalPlaces').val(data.DealunitDecimalPlaces);
                            $('#DealQty').val(data.DealQty);
                            $('#Rate').val(data.Rate);
                            $('#OrderBalanceQty').val(data.Qty);
                            $('#OrderDealQty').val(data.OrderDealQty);
                            $('#OrderQty').val(data.OrderQty);

                            (data.Dimension1Id==null)?(1==1):($("#Dimension1Id").select2("data", {id: data.Dimension1Id, text: data.Dimension1Name}))
                            //(data.Dimension2Id==null)?(1==1):($("#Dimension2Id").select2("data", {id: data.Dimension2Id, text: data.Dimension2Name}))
                            if(data.Dimension2Id!=null)
                            {
                                $("#Dimension2Id").select2("data", {id: data.Dimension2Id, text: data.Dimension2Name})
                            }
                            $("#Dimension1Id").attr('readonly','true');
                            $("#Dimension2Id").attr('readonly','true');

                            if(!data.DealQty)
                            {
                                $('#Qty').trigger('keyup');
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve product details.' + thrownError);
                        }
                    });
                }
                else if($('#PurchaseOrderLineId').val()=="")
                {
                    $('#LotNo').val('');
                    $('#DealunitDecimalPlaces').val('');
                    $('#UnitConversionMultiplier').val(0);
                    $('#Qty').val(0);
                    $('#DealQty').val(0);
                    $('#OrderDealQty').val(0);
                    $('#OrderQty').val(0);
                    $('#OrderBalanceQty').val(0);
                    $('#Rate').val(0);
                    $('#DocQty').val(0);
                    $("#Dimension1Id").removeAttr('readonly');
                    $("#Dimension2Id").removeAttr('readonly');
                    $('#Specification').val("");
                    $('#Specification').removeAttr('readonly');
                    $("#Dimension1Id").select2("val", "");
                    $("#Dimension2Id").select2("val", "");
                }
            }
        });





        $(function() {
            $("#autocompleteorder").autocomplete({
                source: function(request,response){
                    var matcher = new RegExp( $.ui.autocomplete.escapeRegex( request.term ), "i" );

                    //if (  request.term in cachearray ) {
                    //    response( cache[ term ] );
                    //    return;
                    //}

                    //else
                    //    {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetPendingOrders"))",
                        data: { ProductId:$('#ProductId').val(),PurchaseGoodsReceiptHeaderId:$("#PurchaseGoodsReceiptHeaderId",".modal-body").val() },
                        success: function (data) {
                            if(data.length>0){
                                var cachearray = data.error ? [] : $.map(data, function(m) {

                                    return {
                                        value: m.DocNo,
                                        key: m.PurchaseOrderLineId,
                                        dim1: m.Dimension1Name,
                                        dim2:m.Dimension2Name,

                                    };
                                });
                                response(cachearray);
                            }
                            else
                            {
                                var dimensions = { width: 10};
                                var cachearray=$.map(dimensions,function(value,key){
                                    return{
                                        value:"No Record Found!",
                                        key:null
                                    }
                                })
                                response(cachearray);
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve Pending Orders.' + thrownError);
                        }

                    });


                    //}

                },
                appendTo : $("#myModalContent"),
                select: function(event, ui) {
                    // prevent autocomplete from updating the textbox
                    // navigate to the selected item's url
                    if($("#autocompleteorder").val()=="")
                    {
                        $('#PurchaseOrderLineId').val("");
                    }
                    else
                        $("#PurchaseOrderLineId").val(ui.item.key);

                },

            }).data("ui-autocomplete")._renderItem = function(ul, item) {
                var $a = $("<a></a>");
                $("<strong></strong>").text(item.value).appendTo($a);
                $("<br />").appendTo($a);
                (item.dim1==null)?(""):($("<span class='small'></span>").text(item.dim1+",").appendTo($a));
                (item.dim2==null)?(""):($("<span class='small'></span>").text(item.dim2).appendTo($a));

                return $("<li></li>").append($a).appendTo(ul);
            }
        });


    </script>
}

<script type="text/javascript">






    $(function () {
        $("#DealQty,#Qty,#DocQty,#UnitConversionMultiplier").keyup(Calculation);
        $("#DealUnitId").change(GetUnitConversionMultiplier);
        $("#ProductId").change(GetProductDetail);

        var id=@Model.PurchaseGoodsReceiptLineId;
        if(id>0)
        {
            var tex='@Model.PurchaseOrderDocNo';
            $("#autocompleteorder").val(tex);
        }

        function GetProductDetail() {
            var ProcessProgress = $("#Product detail loading progress");
            ProcessProgress.show();
            if ($("#ProductId").val() != 0 && $("#ProductId").val() != null) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProductDetailJson"))",
                    data: { ProductId: $("#ProductId").val()},
                    success: function (data) {
                        $("#UnitId").val(data[0].UnitId);
                        if($("#PurchaseOrderLineId").val()){
                            GetLineDetail();}
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
        }

        function GetLineDetail(){
            if( $("#PurchaseOrderLineId").val()){
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetOrderDetail"))",
                    data: { OrderId: $("#PurchaseOrderLineId").val() },
                    success: function (data) {
                        $("#DealUnitId").val(data.DealUnitId);
                        $('#UnitConversionMultiplier').val(data.UnitConversionMultiplier);
                        $('#OrderBalanceQty').val(data.Qty);
                        GetUnitConversionMultiplier.call();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
        }

        function GetUnitConversionMultiplier() {

            if ($("#UnitId").val() == $("#DealUnitId").val()) {
                $("#UnitConversionMultiplier").val(1);
                Calculation.call();
            }

            else {

                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetUnitConversionDetailJson"))",
                    data: { ProductId: $("#ProductId").val(), UnitId: $("#UnitId").val(), DeliveryUnitId: $("#DealUnitId").val() },

                    success: function (data) {
                        $("#UnitConversionMultiplier").val(data[0].Value);
                        $("#DealunitDecimalPlaces").val(data[1].Value);
                        Calculation.call();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Unit conversion details.' + thrownError);
                        ProcessProgress.hide();
                    }
                });
            }
        }


        function Calculation() {
            if ($('#UnitConversionMultiplier').val() != 0) {
                $('#DealQty').val($('#DocQty').val() * $('#UnitConversionMultiplier').val())
            }
        }

    });



    $('#Qty,#DocQty').keyup(function () {

        if($('#PurchaseOrderLineId').val() && !$('#ProductUidId').val()){

            if ( (($('#OrderBalanceQty').val() - $('#DocQty').val()) < 0) ) {
                if (!$('#modform').find('.modal-body #errormsg').length) {
                    $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >Qty exceeding Order Qty</span></div>")
                }
            }
            else if((($('#DocQty').val() - $('#Qty').val()) < 0)){
                if (!$('#modform').find('.modal-body #errormsg').length) {
                    $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >Qty exceeding DocQty</span></div>")
                    $('#submit','#modform').attr('disabled','disabled');
                }
            }
            else
            {
                if ($('#modform').find('.modal-body #errormsg').length) {
                    $('#modform').find('#errormsg').parent().remove();
                }
                $('#submit','#modform').removeAttr('disabled');
            }
            //else
            //{
            //    if ($('#modform').find('.modal-body #errormsg').length) {
            //        $('#modform').find('#errormsg').parent().remove();
            //    }
            //}


        }
        else if ($('#PurchaseOrderLineId').val() && $('#ProductUidId').val())
        {
            if($("#Qty").val() > 1 || $("#DocQty").val() > 1){
                if (!$('#modform').find('.modal-body #errormsg').length) {
                    $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >Qty exceeding balanceQty</span></div>")
                    $('#submit','#modform').attr('disabled','disabled');
                }
            }
            else
            {
                if ($('#modform').find('.modal-body #errormsg').length) {
                    $('#modform').find('#errormsg').parent().remove();
                }
                $('#submit','#modform').removeAttr('disabled');
            }
        }
    })

</script>
