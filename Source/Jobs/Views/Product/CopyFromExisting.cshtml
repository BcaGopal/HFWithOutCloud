@model Model.ViewModels.CopyFromExistingProductViewModel


@using Core.Common

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span>Copy From Product</span>
        </h3>
    </div>
    <div>


        @using (Html.BeginForm("CopyFromExisting", "Product", FormMethod.Post, new { @class = "modal-form", id = "modform" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.ProductId)    

            <div class="form-horizontal modal-body">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <h4 class="col-md-12 black">
                    <span class="glyphicon glyphicon-align-justify"></span>
                    1.Product Detail
                </h4>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.FromProductId, "Copy From", new { @class = "control-label col-xs-5" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.FromProductId, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.FromProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>                       
                    </div>
                    <div class="col-md-6" style="display:@(Model.ProductId == null ?"":"none")">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.ProductName, "Product Name", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.ProductName, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.ProductName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <h4 class="col-md-12 black">
                    <span class="glyphicon glyphicon-align-justify"></span>
                    2.Consumption Detail
                </h4>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.BomProductId, "Product", new { @class = "control-label col-xs-5 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.BomProductId, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.BomProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group" style="margin-top:15px">
                            @Html.LabelFor(model => model.ReplacingBomProductId, "Replace With", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.ReplacingBomProductId, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.ReplacingBomProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row" style="display:@(Model.ProductTypeSettings.isApplicableDimension1?"":"none")">
                    <div class="col-md-6">
                        @Html.HiddenFor(m => m.ProductTypeSettings.isApplicableDimension1)
                        @Html.HiddenFor(m => m.ProductTypeSettings.Dimension1Caption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.BomDimension1Id, (Model.ProductTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label col-xs-5" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.BomDimension1Id, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.BomDimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ReplacingBomDimension1Id, "Replace With", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.ReplacingBomDimension1Id, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.ReplacingBomDimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row" style="display:@(Model.ProductTypeSettings.isApplicableDimension2?"":"none")">
                    <div class="col-md-6">
                        @Html.HiddenFor(m => m.ProductTypeSettings.isApplicableDimension2)
                        @Html.HiddenFor(m => m.ProductTypeSettings.Dimension2Caption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.BomDimension2Id, (Model.ProductTypeSettings.Dimension2Caption ?? "Dimension2"), new { @class = "control-label col-xs-5 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.BomDimension2Id, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.BomDimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ReplacingBomDimension2Id, "Replace With", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.ReplacingBomDimension2Id, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.ReplacingBomDimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row" style="display:@(Model.ProductTypeSettings.isApplicableDimension3?"":"none")">
                    <div class="col-md-6">
                        @Html.HiddenFor(m => m.ProductTypeSettings.isApplicableDimension3)
                        @Html.HiddenFor(m => m.ProductTypeSettings.Dimension3Caption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.BomDimension3Id, (Model.ProductTypeSettings.Dimension3Caption ?? "Dimension3"), new { @class = "control-label col-xs-5 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.BomDimension3Id, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.BomDimension3Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ReplacingBomDimension3Id, "Replace With", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.ReplacingBomDimension3Id, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.ReplacingBomDimension3Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row" style="display:@(Model.ProductTypeSettings.isApplicableDimension4?"":"none")">
                    <div class="col-md-6">
                        @Html.HiddenFor(m => m.ProductTypeSettings.isApplicableDimension4)
                        @Html.HiddenFor(m => m.ProductTypeSettings.Dimension4Caption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.BomDimension4Id, (Model.ProductTypeSettings.Dimension4Caption ?? "Dimension4"), new { @class = "control-label col-xs-5 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.BomDimension4Id, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.BomDimension4Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ReplacingBomDimension4Id, "Replace With", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.ReplacingBomDimension4Id, null, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(m => m.ReplacingBomDimension4Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 5px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom right" name="Command:submit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>
                </div>
            </div>
        }
    </div>
</div>


<script type="text/javascript">
    CustomSelectFunction($("#FromProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0);
    CustomSelectFunction($("#BomProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0);
    CustomSelectFunction($("#ReplacingBomProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0);
    CustomSelectFunction($("#BomDimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1s', ' ', false, 0);
    CustomSelectFunction($("#ReplacingBomDimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', ' ', false, 0);
    CustomSelectFunction($("#BomDimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', ' ', false, 0);
    CustomSelectFunction($("#ReplacingBomDimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', ' ', false, 0);
    CustomSelectFunction($("#BomDimension3Id"), '/ComboHelpList/GetDimension3', '/ComboHelpList/SetSingleDimension3', ' ', false, 0);
    CustomSelectFunction($("#ReplacingBomDimension3Id"), '/ComboHelpList/GetDimension3', '/ComboHelpList/SetSingleDimension3', ' ', false, 0);
    CustomSelectFunction($("#BomDimension4Id"), '/ComboHelpList/GetDimension4', '/ComboHelpList/SetSingleDimension4', ' ', false, 0);
    CustomSelectFunction($("#ReplacingBomDimension4Id"), '/ComboHelpList/GetDimension4', '/ComboHelpList/SetSingleDimension4', ' ', false, 0);



    $(":submit").on("click", function () {
        var tes;
        tes = $('#ProductName').DuplicateCheckForCreate({ name: 'Product', value: $('#ProductName').val(), doctype: 0 });
        if (tes) {
            return false;
        }
        else
        {
            return;
        }
    });

</script>