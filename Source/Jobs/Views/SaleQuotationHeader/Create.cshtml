@model Model.ViewModels.SaleQuotationHeaderViewModel
@using Core.Common
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- modal placeholder-->
<div id='myModal' class='modal fade in'>
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

<!-- modal placeholder For Print -->
<div id='myModal1' class='modal fade in'>
    <div class="modal-dialog">
        <div class="modal-content">
            <div id='myModalContent1'></div>
        </div>
    </div>
</div>

@using (Html.BeginForm("Post", "SaleQuotationHeader", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.SiteId)
    @Html.HiddenFor(m => m.Status)
    @Html.HiddenFor(m => m.DivisionId)
    @Html.HiddenFor(m => m.SaleQuotationHeaderId)
    @Html.HiddenFor(m => m.DocTypeId)
    @Html.HiddenFor(m => m.BuyerDocTypeId)
    @Html.HiddenFor(m => m.ProcessId)
    @Html.HiddenFor(m => m.CreatedDate)
    @Html.HiddenFor(m => m.CalculationFooterChargeCount)
    @Html.HiddenFor(m => m.SaleQuotationSettings.ProcessId)
    @Html.HiddenFor(m => m.SaleQuotationSettings.isUniqueCostCenter)
    @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleFromSaleEnquiry)

    <div class="panel panel-default">
        <div class="panel-heading">

            @CustomHelpers.RenderResHeaderInfo(ViewBag.transactionType, (int?)ViewBag.PendingToSubmit, (int?)ViewBag.PendingToReview, ViewBag.Name)

            @*@if (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue")
            {<h3 style="border-bottom:0px solid #e1dada;padding-bottom:0px;">
                <button type="submit" name="Command:Submit" class="btn btn-primary right" id="SubmitContinue" style="margin-left:5px;">Submit & Next<span class='badge'>@(ViewBag.PendingToSubmit != 0 ? ViewBag.PendingToSubmit : "")</span></button>
                <button type="submit" name="Command:Submit" class="btn btn-primary right">Submit</button>
                <input type="hidden" id="IsContinue" name="IsContinue" value="" />
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>Submit @ViewBag.Name</span>
            </h3>}
            else if (ViewBag.transactionType == "review" || ViewBag.transactionType == "ReviewContinue")
            {<h3 style="border-bottom:0px solid #e1dada;padding-bottom:0px;">
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span> Review @ViewBag.Name</span>
                <button type="submit" name="Command:Review" class="btn btn-primary right" style="margin-left:5px" id="ReviewContinue">Review & Next<span class='badge'>@(ViewBag.PendingToReview != 0 ? ViewBag.PendingToReview : "")</span></button>
                <button type="submit" class="btn btn-primary right" name="Command:Review">Review</button>
                <input type="hidden" id="IsContinue" name="IsContinue" value="" />
            </h3>}
            else if (ViewBag.transactionType == "detail")
            {
                <h3>
                    <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>@ViewBag.Name</span>
                </h3>
            }
            else
            {
                <h3 style="border-bottom:0px solid #e1dada;padding-bottom:0px;">
                    <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span> @ViewBag.Name</span>
                    <input type="submit" value="Save" class="btn btn-primary right" id="submit" style="width: 90px; background-color: #2980b9" />
                </h3>
            }*@

            <hr style="margin-top: 5px; margin-bottom: 5px; border-top: 1px solid #d8d5d5" />
            
            @*@if (Model.SaleQuotationSettings.isVisibleFromSaleEnquiry)
            {
            @Html.ActionLink("For Production Order", "_ForSaleEnquiry", "SaleQuotationLine", new { id = @Model.SaleQuotationHeaderId, jid = @Model.SaleToBuyerId }, new { data_modal = "", id = "btnCreateF", @class = "btn btn-primary borderradii", @title = "For ProductionOrder", @data_toggle = "tooltip", @data_detailDeleted = "true" })
            }
            <hr style="margin-top:0px;margin-bottom:0px" />*@

            @{
    string EditAction = "";
    if (Model.Status == (int)StatusConstants.Drafted || Model.Status == (int)StatusConstants.Import)
    {
        EditAction = "Modify";
    }
    else if ((Model.Status == (int)StatusConstants.Submitted || Model.Status == (int)StatusConstants.Modified))
    {
        EditAction = "ModifyAfter_Submit";
    }
    else
    {
        EditAction = "DetailInformation";
    }
            }

            <div class="panel-info">
                <div class="btn-group">
                    @Html.ActionLink(" ", "Create", "SaleQuotationHeader", new { @id = @ViewBag.id }, new { @class = "cbtn btn-circle glyphicon glyphicon-plus", @title = "Add New", @data_toggle = "tooltip", target = "" })
                    @if (Model.SaleQuotationHeaderId > 0)
                    {
                    @Html.ActionLink(" ", EditAction, "SaleQuotationHeader", new { @id = Model.SaleQuotationHeaderId, IndexType = ViewBag.IndexStatus }, new { @class = "cbtn btn-circle glyphicon glyphicon-edit", @title = "Edit", @data_toggle = "tooltip" })
                    }
                    @if (Model.SaleQuotationHeaderId > 0)
                    {
                    @Html.ActionLink(" ", "GeneratePrints", "SaleQuotationHeader", new { Ids = Model.SaleQuotationHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-print", @title = "Print", @data_toggle = "tooltip", @id = "PrintRecordC", target = "_blank" })
                    }
                    @Html.ActionLink(" ", "PrevPage", "SaleQuotationHeader", new { DocId = @Model.SaleQuotationHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-left", @title = "Prev Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "NextPage", "SaleQuotationHeader", new { DocId = @Model.SaleQuotationHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-right", @title = "Next Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Index", "SaleQuotationHeader", new { id = ViewBag.id, IndexType = ViewBag.IndexStatus }, new { @class = "cbtn btn-circle glyphicon glyphicon-list", @title = "List", @data_toggle = "tooltip" })
                </div>
                <div class="btn-group">
                    <a class="cbtn btn-circle glyphicon glyphicon-option-horizontal dropdown-toggle" title="More Option" aria-expanded="false" style="padding-top: 6px;padding-bottom: 6px;" href="#" data-toggle="dropdown" id="dropdownMenu1">
                    </a>
                    <ul class="dropdown-menu pull-right" aria-labelledby="dropdownMenu1">
                        @if (Model.SaleQuotationHeaderId > 0)
                        {
                        <li><a id="DocHistory" data-modal="" href="@Url.Action("GetHistory", "LogHistory", new { Ids = Model.SaleQuotationHeaderId, DocTypeId = Model.DocTypeId })"><span class="glyphicon glyphicon-user"> </span> History</a></li>
                        }
                        <li><a href="@Url.Action("Email", "SaleQuotationHeader")"><span class="glyphicon glyphicon-envelope"> </span> Email</a></li>
                        <li role="separator" class="divider"></li>
                        <li><a target="_blank" href="@Url.Action("Report", "SaleQuotationHeader", new { @ViewBag.id })"><span class="glyphicon glyphicon-th"> </span> Report</a></li>
                    </ul>
                </div>

            </div>
        </div>

        <div class="panel-info" style="padding-left:15px">

            <div class="form-horizontal">

                @Html.ValidationSummary(true)
                <div>
                    <div>
                        <div>
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocDate, "Quotation Date", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DocDate, "{0:dd/MMMM/yyyy}", new
                                   {
                                       @class = "datepickerWithNFD form-control col-xs-6 required updateDocNo",
                                       data_tabl = "SaleQuotationHeaders",
                                       data_doctype = Model.DocTypeId,
                                       data_divId = Model.DivisionId,
                                       data_sitId = Model.SiteId,
                                   })
                                        @Html.ValidationMessageFor(model => model.DocDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocNo, "Quotation No", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DocNo, null, new { @class = "form-control required" })
                                        @Html.ValidationMessageFor(m => m.DocNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SaleToBuyerId, (Model.DocumentTypeSettings.PartyCaption ?? "Party"), new { @class = "control-label col-md-4 col-sm-2" })
                                    @Html.HiddenFor(m => m.DocumentTypeSettings.PartyCaption)
                                    <div class="col-md-7 col-sm-10">
                                        <div class="col-xs-11" style="padding:0px;">
                                            @Html.TextBoxFor(m => m.SaleToBuyerId, null, new { @class = "form-control required" })
                                            @Html.ValidationMessageFor(m => m.SaleToBuyerId, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-xs-1" style="padding:0px">
                                            @Html.ActionLink("...", "_Create", "PersonCreation", new { id = "id", DocTypeId = Model.BuyerDocTypeId }, new { data_modalCustom2 = "", id = "CustomerDetail", @class = "btn btn-info btn-flat ", @title = "For Order", @data_toggle = "tooltip" })
                                        </div>
                                    </div>
                                </div>
                            </div>



                            @*<div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SaleToBuyerId, (Model.DocumentTypeSettings.PartyCaption ?? "Party"), new { @class = "control-label col-md-4 col-sm-2" })
                                    @Html.HiddenFor(m => m.DocumentTypeSettings.PartyCaption)
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.SaleToBuyerId, new { @class = "form-control required" })
                                        @Html.ValidationMessageFor(model => model.SaleToBuyerId, "", new { @class = "text-danger" })
                                        <span class="input-group-btn">
                                            @Html.ActionLink("...", "_Create", "PersonCreation", new { id = "id" }, new { data_modalCustom2 = "", id = "CustomerDetail", @class = "btn btn-default ", @title = "For Order", @data_toggle = "tooltip" })
                                        </span>
                                    </div>
                                </div>
                            </div>*@


                            @*<div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SaleToBuyerId, (Model.DocumentTypeSettings.PartyCaption ?? "Party"), new { @class = "control-label col-md-4 col-sm-2" })
                                    @Html.HiddenFor(m => m.DocumentTypeSettings.PartyCaption)
                                    <div class="col-md-7 col-sm-10">
                                        <div class="form-group">
                                            @Html.TextBoxFor(m => m.SaleToBuyerId, new { @class = "form-control col-xs-6" })
                                            @Html.ValidationMessageFor(m => m.SaleToBuyerId, "", new { @class = "text-danger" })
                                            <span class="input-group-btn">
                                                @Html.ActionLink("...", "_Create", "PersonCreation", new { id = "id" }, new { data_modalCustom2 = "", id = "CustomerDetail", @class = "btn btn-info btn-flat ", @title = "For Order", @data_toggle = "tooltip" })
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>*@


                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DueDate, "Due Date", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DueDate, "{0:dd/MMMM/yyyy}", new { @class = "datepicker form-control required" })
                                        @Html.ValidationMessageFor(model => model.DueDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ExpiryDate, "Expiry Date", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.ExpiryDate, "{0:dd/MMMM/yyyy}", new { @class = "datepicker form-control required" })
                                        @Html.ValidationMessageFor(model => model.ExpiryDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>



                            <div class="col-md-6" style='display:@(Model.SaleQuotationSettings.isVisibleCostCenter?"":"none")'>
                                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleCostCenter)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CostCenterName, (Model.DocumentTypeSettings.CostCenterCaption ?? "Cost Center"), new { @class = "control-label col-md-4 col-sm-2" })
                                    @Html.HiddenFor(m => m.DocumentTypeSettings.CostCenterCaption)
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.CostCenterName, new { @class = "form-control " })
                                        @Html.ValidationMessageFor(m => m.CostCenterName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style='display:@(Model.SaleQuotationSettings.isVisibleCreditDays?"":"none")'>
                                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleCreditDays)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CreditDays, "Credit Days", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.CreditDays, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.CreditDays, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.SaleQuotationSettings.isVisibleUnitConversionFor?"":"none")'>
                                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleUnitConversionFor)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.UnitConversionForId, "Unit Conversion For", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.DropDownListFor(m => m.UnitConversionForId, new SelectList(ViewBag.UnitConvForList as System.Collections.IEnumerable, "UnitConversionForId", "UnitConversionForName"), new { @class = "form-control height" })
                                        @Html.ValidationMessageFor(m => m.UnitConversionForId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.SaleQuotationSettings.isVisibleDeliveryTerms?"":"none")'>
                                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleDeliveryTerms)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DeliveryTermsId, "Price Mode", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DeliveryTermsId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.DeliveryTermsId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>



                            <div class="col-md-6" style='display:@(Model.SaleQuotationSettings.isVisibleCurrency?"":"none")'>
                                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleCurrency)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CurrencyId, "Currency", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.CurrencyId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.CurrencyId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style='display:@(Model.SaleQuotationSettings.isVisibleSalesTaxGroupPerson?"":"none")'>
                                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleSalesTaxGroupPerson)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SalesTaxGroupPersonId, "Sales Tax Group Person", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.SalesTaxGroupPersonId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.SalesTaxGroupPersonId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.SaleQuotationSettings.isVisibleShipMethod?"":"none")'>
                                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleShipMethod)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ShipMethodId, "Ship Method", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.ShipMethodId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.ShipMethodId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>



                            <div class="col-md-6" style='display:@(Model.SaleQuotationSettings.isVisibleAgent?"":"none")'>
                                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleAgent)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.AgentId, "Agent", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.AgentId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.AgentId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style='display:@(Model.SaleQuotationSettings.isVisibleFinancier?"":"none")'>
                                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleFinancier)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.FinancierId, "Financier", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.FinancierId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.FinancierId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style='display:@(Model.SaleQuotationSettings.isVisibleSalesExecutive?"":"none")'>
                                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleSalesExecutive)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SalesExecutiveId, "Sales Executive", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.SalesExecutiveId, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.SalesExecutiveId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>



                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TermsAndConditions, "Terms & Conditions", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextAreaFor(m => m.TermsAndConditions, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.TermsAndConditions, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            @if (Model.DocumentTypeHeaderAttributes != null)
                            {
                                for (int i = 0; i < Model.DocumentTypeHeaderAttributes.Count; i++)
                                {
                                    <div class="col-md-6">
                                        <div class="form-group">
                                            @Html.Label(Model.DocumentTypeHeaderAttributes[i].Name, new { @class = "control-label col-md-4 col-sm-2" })
                                            @Html.HiddenFor(m => Model.DocumentTypeHeaderAttributes[i].Name)
                                            @Html.HiddenFor(m => Model.DocumentTypeHeaderAttributes[i].DocumentTypeHeaderAttributeId)
                                            @if (Model.DocumentTypeHeaderAttributes[i].DataType == "List")
                                            {
                                                List<SelectListItem> tem = new List<SelectListItem>();
                                                foreach (string item in (Model.DocumentTypeHeaderAttributes[i].ListItem).Split(',').ToList())
                                                {
                                                    tem.Add(new SelectListItem { Text = item, Value = item, Selected = (Model.DocumentTypeHeaderAttributes[i].Value == item ? true : false) });
                                                }

                                                <div class="col-md-7 col-sm-10">
                                                    @Html.DropDownListFor(m => Model.DocumentTypeHeaderAttributes[i].Value, new SelectList(tem as System.Collections.IEnumerable, "Value", "Text", Model.DocumentTypeHeaderAttributes[i].Value), " ", new { @class = "form-control col-xs-6 height" })
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="col-md-7 col-sm-10">
                                                    @Html.TextBoxFor(m => Model.DocumentTypeHeaderAttributes[i].Value, new { @class = "form-control col-xs-6" })
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            }



                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextAreaFor(m => m.Remark, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.Remark, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style='display:@(Model.SaleQuotationSettings.isVisibleDoorDelivery?"":"none")'>
                                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisibleDoorDelivery)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.IsDoorDelivery, "Is Door Delivery", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.CheckBoxFor(m => m.IsDoorDelivery, new { @class = "checkbox col-xs-2" })
                                        @Html.ValidationMessageFor(m => m.IsDoorDelivery, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>
                </div>






                @Html.HiddenFor(m => m.SaleQuotationSettings.isVisiblePaymentTerms)
                @if (Model.SaleQuotationSettings.isVisiblePaymentTerms == true)
                {
                    <hr />
                    <div class="row">
                        <h4 class="col-md-12 black" style="margin-top:15px">
                            <span class="glyphicon glyphicon-align-justify"></span>
                            Payment Terms
                        </h4>
                    </div>

                    <div style="padding-right:15px">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayTermAdvancePer, "Advance %", new { @class = "control-label col-xs-8" })
                                    <div class="col-xs-4">
                                        @Html.TextBoxFor(m => m.PayTermAdvancePer, new { @class = "form-control col-xs-3" })
                                        @Html.ValidationMessageFor(m => m.PayTermAdvancePer, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayTermOnDeliveryPer, "On Delivery %", new { @class = "control-label col-xs-8" })
                                    <div class="col-xs-4">
                                        @Html.TextBoxFor(m => m.PayTermOnDeliveryPer, new { @class = "form-control col-xs-3" })
                                        @Html.ValidationMessageFor(m => m.PayTermOnDeliveryPer, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayTermOnDueDatePer, "On Due Date %", new { @class = "control-label col-xs-8" })
                                    <div class="col-xs-4">
                                        @Html.TextBoxFor(m => m.PayTermOnDueDatePer, new { @class = "form-control col-xs-3" })
                                        @Html.ValidationMessageFor(m => m.PayTermOnDueDatePer, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayTermCashPer, "Cash %", new { @class = "control-label col-xs-8" })
                                    <div class="col-xs-4">
                                        @Html.TextBoxFor(m => m.PayTermCashPer, new { @class = "form-control col-xs-3" })
                                        @Html.ValidationMessageFor(m => m.PayTermCashPer, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PayTermBankPer, "Bank %", new { @class = "control-label col-xs-8" })
                                    <div class="col-xs-4">
                                        @Html.TextBoxFor(m => m.PayTermBankPer, new { @class = "form-control col-xs-3" })
                                        @Html.ValidationMessageFor(m => m.PayTermBankPer, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }



                


                <hr />
                <div class="row">
                    <h4 class="col-md-12 black" style="margin-top:15px">
                        <span class="glyphicon glyphicon-shopping-cart"></span>
                        3.Products
                    </h4>
                </div>



                <div class="panel-info" style="height:40px">
                    <div class="btn-group" style="padding:5px 0 3px 0;margin:0px;font-weight:bold">
                        <span class="glyphicon glyphicon-plus-sign"></span>
                        @{string Action = "";
                        if (Model.Status == (int)StatusConstants.Drafted || Model.Status == (int)StatusConstants.Import)
                        { Action = "CreateLine"; }
                        else if (Model.Status == (int)StatusConstants.Submitted || Model.Status == (int)StatusConstants.Modified)
                        { Action = "CreateLineAfter_Submit"; }
                        }
                        @if (Model.SaleQuotationSettings.isVisibleFromSaleEnquiry)
                        {
                            @Html.ActionLink("For " + (Model.DocumentTypeSettings.ContraDocTypeCaption ?? "Enquiry") + "/", Action, "SaleQuotationLine", new { id = @Model.SaleQuotationHeaderId, IsRefBased = true }, new { data_modal = "", id = "btnCreate", @class = "toolbar", @title = "Add New", @data_toggle = "tooltip", @data_detailDisabled = "true" })
                        }
                        @Html.ActionLink("Add New Row ", Action, "SaleQuotationLine", new { id = @Model.SaleQuotationHeaderId, IsRefBased = false }, new { data_modal = "", id = "btnCreatePO", @class = "toolbar", @title = "Add New", @data_toggle = "tooltip", @data_detailDisabled = "true" })
                    </div>
                    <div class="btn-group right" style="padding-right:15px">
                        @if (Model.SaleQuotationSettings.isVisibleFromSaleEnquiry)
                        {
                            @Html.ActionLink(" ", "_ForSaleEnquiry", "SaleQuotationLine", new { id = @Model.SaleQuotationHeaderId, jid = @Model.SaleToBuyerId }, new { data_modal = "", id = "btnCreateF", @class = "cbtn btn-circle glyphicon glyphicon-link toolbar right", @title = "For Enquiry", @data_toggle = "tooltip", @data_detailDeleted = "true" })
                        }
                    </div>
                </div>

                <div style="padding-right:15px;">

                    <div class="panel panel-default" id="grid">

                        <div style="min-width: 700px;">

                            <div class="panel-info" id="gbody">

                            </div>
                        </div>
                    </div>


                    <div class="panel panel-default" id="gridcharges">

                    </div>
                </div>

                


            </div>
        </div>
    </div>
}


@if ((ViewBag.Mode == "Add") || (ViewBag.Mode == "Edit"))
{

    <script type="text/javascript">

        $('#SaleToBuyerId').change(function () {

            var cid = $("#SaleToBuyerId").val();
            var cdata = $('#SaleToBuyerId').select2('data').text;
            $("#BillToPartyId").select2('data', { id: cid, text: cdata });
            GetPersonDetail();
        });

        //Reloading the table contents on modal hide
        $('#myModal').on('hidden.bs.modal', function () {
            LoadProducts();
            var id='@Model.SaleQuotationHeaderId';
            var CalculationFooterChargeCount='@Model.CalculationFooterChargeCount';
            if (CalculationFooterChargeCount > 0)
            {
                LoadNewCharges(id,"Web.SaleQuotationHeaderCharges","Web.SaleQuotationLineCharges","/TaxCalculation/GetJOHeaderChargeForEdit");
            }
        });

        $(document).ready(function(){
            enableModalTransitions();
        })






        var IsSaved=false;
        var ValidationCount=0;
        var CostCenterUnique='@Model.SaleQuotationSettings.isUniqueCostCenter';

        $('form').submit(function(event){

            if(!IsSaved)
            {
                //if(!ValidateData() || !ValidateCostCenter())
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                return IsSaved;
            }
            else
            {
                return false;
            }


        });


        function ValidateData() {
            var DocId=@Model.SaleQuotationHeaderId;
            var TempValue;
            var ValidationMessage="";



            //Checking for dulicate key value
            if(DocId<=0)
            {
                TempValue= $('#DocNo').DuplicateCheckForCreate({ name: 'SaleQuotations', value: $('#DocNo').val(), doctype: $('#DocTypeId').val() });
                if (TempValue){ ValidationMessage=$('#DocNo').val() + " already exist <br />";}
            }
            else
            {
                TempValue = $('#DocNo').DuplicateCheckForEdit({ name: 'SaleQuotations', value: $('#DocNo').val(), doctype: $('#DocTypeId').val(),headerId:DocId });
                if (TempValue) {ValidationMessage+=$('#DocNo').val() + " already exist <br />";}
            }
            if(TempValue)
            {
                if($('#validationerrormsg').length==0){
                    $('.panel-info').filter(':eq(1)').before('<div class="alert alert-danger" role="alert" id="validationerrormsg">'+ValidationMessage+'</div>');}
                else
                {
                    $('#validationerrormsg').html(ValidationMessage);
                }
            }

            return  (ValidationMessage=="");

        }


        $('#CostCenterName').change(function(){
            var disv=$(this);
            if( $('#SaleToBuyerId').val() && $('#SaleToBuyerId').val() > 0 && ValidateCostCenter(disv) )
            {

            }
            else
            {

            }
        })

        function ValidateCostCenter(thisv) {
            var DocId=@Model.SaleQuotationHeaderId;
            var TempValue;
            var ValidationMessage="";

            //if(CostCenterUnique=="True")
            //{


            $.ajax({
                url:'/SaleQuotationHeader/ValidateCostCenter',
                data:{DocTypeId:$('#DocTypeId').val(),CostCenterName:thisv.val(),HeaderId:$('#SaleQuotationHeaderId').val(),SaleToBuyerId:$('#SaleToBuyerId').val()},
                async:false,
                success:function(data)
                {
                    ValidationMessage=data;
                }
            });

            if(ValidationMessage)
            {
                if($('#csvalidationerrormsg').length==0){
                    $('.panel-info').filter(':eq(1)').before('<div class="alert alert-danger" role="alert" id="csvalidationerrormsg">'+ValidationMessage+'</div>');}
                else
                {
                    $('#csvalidationerrormsg').html(ValidationMessage);
                }
            }
            else
            {
                $('#csvalidationerrormsg').remove();
            }

            return  (ValidationMessage=="");

        }


    </script>

}


<script type="text/javascript">


    $(document).ready(function () {
        var id=@Model.SaleQuotationHeaderId;
        if(id==null||id==0)
        {
            $(document).find('a#btnCreateF').removeAttr('href').removeAttr('data-modal');
            $(document).find('a#btnCreate').removeAttr('href').removeAttr('data-modal');
            $(document).find('a#btnCreatePO').removeAttr('href').removeAttr('data-modal');
        }

        $(document).ajaxStart(function () {
            if ($(':submit', 'div.modal-content').length)
                $(':submit', 'div.modal-content').attr("disabled", 'disabled');
            return;
        });

        $(document).ajaxStop(function () {
            if ($(':submit', 'div.modal-content').length)
                $(':submit', 'div.modal-content').removeAttr("disabled");
            return;
        });



        //CustomSelectFunction($("#SaleToBuyerId"), '/ComboHelpList/GetSaleToBuyersWithProcess', '/ComboHelpList/SetSingleSaleToBuyer', ' ', false, 1,$('#ProcessId').val());
        CustomSelectFunction($("#SaleToBuyerId"), '/SaleQuotationHeader/GetCustomPerson', '/ComboHelpList/SetSinglePerson', ' ', false, 0,$('#DocTypeId').val());
        CustomSelectFunction($("#OrderById"), '/ComboHelpList/GetEmployeeWithProcess', '/ComboHelpList/SetSingleEmployee', ' ', false, 0, $('#ProcessId').val());
        CustomSelectFunction($("#GodownId"), '/ComboHelpList/GetGodown', '/ComboHelpList/SetSingleGodown', ' ', false, 0);
        CustomSelectFunction($("#DeliveryTermsId"), '/ComboHelpList/GetDeliveryTerms', '/ComboHelpList/SetSingleDeliveryTerm', ' ', false, 0);
        CustomSelectFunction($("#ShipToAddressId"), '/ComboHelpList/GetAddresses', '/ComboHelpList/SetSingleAddress', ' ', false, 0);
        CustomSelectFunction($("#CurrencyId"), '/ComboHelpList/GetCurrencies', '/ComboHelpList/SetSingleCurrency', ' ', false, 0);
        CustomSelectFunction($("#SalesTaxGroupPersonId"), '/ComboHelpList/GetSalesTaxGroupPerson', '/ComboHelpList/SetSingleSalesTaxGroupPerson', ' ', false, 0);
        CustomSelectFunction($("#ShipMethodId"), '/ComboHelpList/GetShipMethods', '/ComboHelpList/SetSingleShipMethod', ' ', false, 0);
        CustomSelectFunction($("#DocumentShipMethodId"), '/ComboHelpList/GetDocumentShipMethods', '/ComboHelpList/SetSingleDocumentShipMethod', ' ', false, 0);
        CustomSelectFunction($("#TransporterId"), '/ComboHelpList/GetTransporters', '/ComboHelpList/SetSinglePerson', ' ', false, 0);
        CustomSelectFunction($("#AgentId"), '/ComboHelpList/GetAgents', '/ComboHelpList/SetSinglePerson', ' ', false, 0);
        CustomSelectFunction($("#FinancierId"), '/ComboHelpList/GetFinanciers', '/ComboHelpList/SetSinglePerson', ' ', false, 0, $('#ProcessId').val());
        CustomSelectFunction($("#SalesExecutiveId"), '/ComboHelpList/GetSalesExecutives', '/ComboHelpList/SetSinglePerson', ' ', false, 0);


        $('#SaleToBuyerId').select2('focus');
        //Calling the function to load the table data/ Line information
        LoadProducts();

        //Adding Hidden Input Fields
        AddFields();

        //Calling the function to load Consumption Details

        var id=@Model.SaleQuotationHeaderId;
        var CalculationFooterChargeCount='@Model.CalculationFooterChargeCount';
        if (CalculationFooterChargeCount > 0)
        {
            LoadNewCharges(id,"Web.SaleQuotationHeaderCharges","Web.SaleQuotationLineCharges","/TaxCalculation/GetJOHeaderChargeForEdit");
        }
    });



    function GetPersonDetail()
    {
        if ($("#SaleToBuyerId").val() != 0 && $("#SaleToBuyerId").val() != null) 
        {
            $.ajax({
                cache: false,
                async: false,
                type: "POST",
                url: "@(Url.Action("GetPersonDetail"))",
                data: { PersonId: $("#SaleToBuyerId").val() },
            success: function (data) {
                if (data != null)
                {
                    (data.SalesTaxGroupPartyId == null) ? (1 == 1) : ($("#SalesTaxGroupPersonId").select2("data", { id: data.SalesTaxGroupPartyId, text: data.SalesTaxGroupPartyName }));
                }
                else {
                    $("#SalesTaxGroupPersonId").select2("data", { id: '', text: '' })
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve Person Detail.' + thrownError);
                ProcessProgress.hide();
            }
        });
    }
        else {
            $("#SalesTaxGroupPersonId").select2("data", { id: '', text: '' })
            }
    }



    function LoadProducts() {

        var groupId=@Model.SaleQuotationHeaderId;
        var status='@Model.Status';

        var link="/SaleQuotationLine/_Index/";

        $.ajax({
            url: link,
            type: "GET",
            data:{id:groupId,status:status},
            success: function (data) {
                $("#gbody").html(data);
            },
            error: function (result) {
                alert("Error");
            }
        });
    };


    $(function () {

        $("a[data-modalCustom2]").on("click", function (e) {
            if (this.href == "") {
                return false;
            }

            var SaleToBuyerId =  $("#SaleToBuyerId").val()
            var NewUrl = this.href.replace("id",SaleToBuyerId);

            $.ajax({
                url: NewUrl,
                type: "POST",               
                success: function (result) {
                    $('#myModalContent').html(result);
                    $('#myModal').modal({
                        backdrop: 'static',
                        keyboard: true
                    }, 'show');

                    bindForm2('#myModalContent');
                },
            });
            return false;
        });


        function bindForm2(dialog) {
            $('#modformr2', dialog).submit(function () {
                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: $(this).serialize(),
                    success: function (result) {
                        if (result.success) {
                            $('#myModal').modal('hide');
                            //CustomSelectFunction($("#SaleToBuyerId"), '/ComboHelpList/GetPerson', '/ComboHelpList/SetSinglePerson', ' ', false, 0);
                            //$('#SaleToBuyerId').keydown();
                            $("#SaleToBuyerId").select2('data', { id: result.PersonId, text: result.Name });
                        } else {
                            $('#myModalContent').html(result);
                            bindForm();
                        }
                    }
                });
                return false;
            });
        }

    });

</script>


@if ((ViewBag.Mode != "Add") && (ViewBag.Mode != "Edit"))
{
    <script type="text/javascript">

        $(document).ready(function(){
            DisablePageNavigation();
        })

    </script>
}

@if ((Model.Status == (int)ActivityTypeContants.Modified || Model.Status == (int)ActivityTypeContants.Submitted)
    && (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue" || ViewBag.transactionType == "review" || ViewBag.transactionType == "ReviewContinue"))
{
    <script type="text/javascript">

        var TrancType='@ViewBag.transactionType'

        $(document).ready(function(){
            enableActivityLogReason(GatePassGen,GatePassId,TrancType);
        })



        

    </script>
}



@if (ViewBag.transactionType != null && (ViewBag.transactionType == "submitContinue" || ViewBag.transactionType == "ReviewContinue"))
{
    <script type="text/javascript">

        $(document).ready(function(){
            CreateTrasitionEffect();
        })


    </script>
}