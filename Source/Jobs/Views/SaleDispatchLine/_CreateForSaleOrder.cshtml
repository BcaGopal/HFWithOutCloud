@model Model.ViewModels.SaleDispatchLineViewModel
@using Core.Common

<style type="text/css">
    .cusleftnormal {
        border-bottom-left-radius: 0pc !important;
        border-top-left-radius: 0px !important;
    }

    .cusrightnormal {
        border-bottom-right-radius: 0px !important;
        border-top-right-radius: 0px !important;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Products</span>
        </h3>
    </div>
    <div>
        @Html.ValidationLog((string)TempData["CSEXCL"])
        @using (Html.BeginForm("_CreatePost", "SaleDispatchLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {

            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.SaleDispatchHeaderId)
                @Html.HiddenFor(m => m.SaleDispatchLineId)
                @Html.HiddenFor(m => m.PackingLineId)
                @Html.HiddenFor(m => m.DocTypeId)
                @Html.HiddenFor(m => m.UnitId)
                @Html.HiddenFor(m => m.SiteId)
                @Html.HiddenFor(m => m.DivisionId)
                @Html.HiddenFor(m => m.ProductUidId)
                @Html.HiddenFor(m => m.ProductId)
                @Html.HiddenFor(m => m.BalanceQty)
                @Html.HiddenFor(m => m.StockInBalanceQty)


                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SaleOrderLineId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-xs-4" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ProductCaption)
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.SaleOrderLineId, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.SaleOrderLineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SaleOrderHeaderDocNo, "Sale Order", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.SaleOrderHeaderDocNo, new { @class = "form-control", @readonly = "true" })
                                @Html.ValidationMessageFor(model => model.SaleOrderHeaderDocNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleStockIn ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleStockIn)
                        <div class="form-group">
                            @Html.LabelFor(model => model.StockInId, "Stock In", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(m => m.StockInId, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.StockInId, "", new { @class = "text-danger" })
                                <span id="ExcessStockQty"></span>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleSpecification ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleSpecification)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleDimension1 ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleDimension1)
                        @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension1Caption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, (Model.DocumentTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7", @readonly = "true" })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleDimension2 ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleDimension2)
                        @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension2Caption)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, (Model.DocumentTypeSettings.Dimension2Caption ?? "Dimension2"), new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control col-xs-7 ", @readonly = "true" })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleLotNo ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleLotNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LotNo, "Lot No", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleBaleNo ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleBaleNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.BaleNo, "Bale No", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.BaleNo, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.BaleNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.GodownId, "Godown", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.GodownId, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.GodownId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-4" style="padding-right:0px;">
                                @Html.TextBoxFor(model => model.Qty, new { @class = "form-control required cusrightnormal text-right" })
                                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-3" style="padding-left:0px">
                                @Html.TextBoxFor(m => m.UnitName, new { @class = "form-control col-xs-2 cusleftnormal", @readonly = "true"})
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PassQty, "Pass Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.PassQty, new { @class = "form-control col-xs-7 cusrightnormal text-right" })
                                @Html.ValidationMessageFor(model => model.PassQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.LossQty, "Loss Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.LossQty, new { @class = "form-control col-xs-7 cusrightnormal text-right" })
                                @Html.ValidationMessageFor(model => model.LossQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleFreeQty ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleFreeQty)
                        <div class="form-group">
                            @Html.LabelFor(model => model.FreeQty, "Free Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.FreeQty, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.FreeQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleDealUnit ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleDealUnit)
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealUnitId, "Deal Unit& Multiplier", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-4" style="padding-right:0px">
                                @Html.DropDownListFor(model => model.DealUnitId, new SelectList(ViewBag.DeliveryUnitList as System.Collections.IEnumerable, "UnitId", "UnitName"), new { @class = "form-control height cusrightnormal required" })
                                @Html.ValidationMessageFor(model => model.DealUnitId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-3" style="padding-left:0px">
                                @Html.TextBoxFor(model => model.UnitConversionMultiplier, new { @class = "form-control cusleftnormal required text-right" })
                                @Html.ValidationMessageFor(model => model.UnitConversionMultiplier, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleDealUnit ? "" : "none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealQty, "Deal Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control col-xs-7 required text-right" })
                                @Html.ValidationMessageFor(model => model.DealQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Remark, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}

                </div>

            </div>
        }
    </div>
</div>




<script type="text/javascript">

    //var cachearray={};

    function CustomSelectFunctionForStockIn(ElementId, GetAction, SetAction, placehold, IsMultiple,MinLength,SaleDispatchHeaderId,GodownId,ProductId,Dimension1Id,Dimension2Id) {
        var geturl = GetAction;
        //The url we will send our get request to
        var attendeeUrl = GetAction;
        var pageSize = 20;

        ElementId.select2(
        {

            placeholder: placehold,
            //Does the user have to enter any data before sending the ajax request
            minimumInputLength: MinLength,
            allowClear: true,
            multiple: IsMultiple,
            ajax: {
                //How long the user has to pause their typing before sending the next request
                quietMillis: 500,
                //The url of the json service
                url: attendeeUrl,
                dataType: 'jsonp',
                //Our search term and what page we are on
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term,
                        SaleDispatchHeaderId:SaleDispatchHeaderId,
                        GodownId:GodownId,
                        ProductId:ProductId,
                        Dimension1Id:Dimension1Id,
                        Dimension2Id:Dimension2Id,
                    };
                },
                results: function (data, page) {
                    //Used to determine whether or not there are more results available,
                    //and if requests for more data should be sent in the infinite scrolling
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            },
            initSelection: function (element, callback) {

                var xval = element.val();
                if (xval != 0)
                {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: SetAction,
                        data: { Ids: element.val() },
                        success: function (data) {
                            callback(data);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to Retrive Qty' + thrownError);
                        }
                    })
                }
                //callback([{ id: "1", text: "arpit" }, { id: "2", text: "akash" }]);
            }
        });
    }

    function CustomSelectFunctionForSaleOrder(ElementId, GetAction, SetAction, placehold, IsMultiple,MinLength,PersonId) {
        var geturl = GetAction;
        //The url we will send our get request to
        var attendeeUrl = GetAction;
        var pageSize = 20;

        ElementId.select2(
        {

            placeholder: placehold,
            //Does the user have to enter any data before sending the ajax request
            minimumInputLength: MinLength,
            allowClear: true,
            multiple: IsMultiple,
            ajax: {
                //How long the user has to pause their typing before sending the next request
                quietMillis: 500,
                //The url of the json service
                url: attendeeUrl,
                dataType: 'jsonp',
                //Our search term and what page we are on
                data: function (term, page) {
                    return {
                        pageSize: pageSize,
                        pageNum: page,
                        searchTerm: term,
                        PersonId:PersonId
                    };
                },
                results: function (data, page) {
                    //Used to determine whether or not there are more results available,
                    //and if requests for more data should be sent in the infinite scrolling
                    var more = (page * pageSize) < data.Total;
                    return { results: data.Results, more: more };
                }
            },
            initSelection: function (element, callback) {

                var xval = element.val();
                if (xval != 0)
                {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: SetAction,
                        data: { Ids: element.val() },
                        success: function (data) {
                            callback(data);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to Retrive Qty' + thrownError);
                        }
                    })
                }
                //callback([{ id: "1", text: "arpit" }, { id: "2", text: "akash" }]);
            }
        });
    }

    $(document).ready(function () {

        var DocID = $('#SaleDispatchHeaderId', '.modal-body').val();

        //CustomSelectFunction($("#ProductId"), '/SaleDispatchLine/GetCustomProducts', '/ComboHelpList/SetSingleProducts', ' ', false, 0, DocID);
        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', ' ', false, 0);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', ' ', false, 0);
        CustomSelectFunction($("#GodownId"), '/ComboHelpList/GetGodown', '/ComboHelpList/SetSingleGodown', ' ', false, 0);
        //CustomSelectFunction($("#SaleOrderLineId"), '/SaleDispatchLine/GetSaleOrderForProduct', '/SaleDispatchLine/SetSingleSaleOrderLine', ' ', false, 0);
        var SaleToBuyerId = $('#SaleToBuyerId').val();
        CustomSelectFunction($("#SaleOrderLineId"), '/SaleDispatchLine/GetSaleOrderForProduct', '/SaleDispatchLine/SetSingleSaleOrderLine', ' ', false, 0, DocID);
        //CustomSelectFunctionForStockIn($("#StockInId"), '/SaleDispatchLine/GetStockInForProduct', '/SaleDispatchLine/SetSingleStockIn', ' ', false, 0,SaleDispatchHeaderId,ProductId,Dimension1Id,Dimension1Id);
        CustomSelectFunctionForStockIn($("#StockInId"), '/SaleDispatchLine/GetStockInForProduct', '/SaleDispatchLine/SetSingleStockIn', ' ', false, 0,$("#SaleDispatchHeaderId").val(),$("#GodownId").val(),$("#ProductId").val(),$("#Dimension1Id").val(),$("#Dimension2Id").val());





        var IsSaved=false;
        var ValidationCount=0;

        $('#modform').bind('submit',function(event){

            if(!IsSaved)
            {
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                $('button:submit').attr('disabled','disabled');
                return IsSaved;
            }
            else
            {
                return false;
            }


        });

        function ValidateData() {
            var ValidationMessage = "";

            //Client Side Validaion.....

            return  (ValidationMessage=="");

        }






        $("#ProductId").select2("focus");

        var id=@Model.SaleDispatchLineId;
        if(id>0)
        {
            $('#ProductId').attr('readonly','true');
            $('#ProductUidName').attr('readonly','true');
            $('#SaleOrderLineId').attr('readonly','true');
            $('#StockInId').attr('readonly','true');
        }

        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/SaleDispatchLine/DeletePost';
                $('form#modform').attr('action',url);
                return;
            }
            else
            {
                return false;
            }
        })
    });


    $(function(){

        $("#DealQty,#Rate,#Amount,#Qty,#LossQty,#PassQty,#UnitConversionMultiplier,#DiscountPer").keyup(Calculation);
        $("#DealUnitId").change(GetUnitConversionMultiplier);


        function GetUnitConversionMultiplier() {

            if ($("#UnitId").val() == $("#DealUnitId").val()) {
                $("#UnitConversionMultiplier").val(1);
                Calculation.call();
            }
            else {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetUnitConversionDetailJson"))",
                    data: { ProductId: $("#ProductId").val(), UnitId: $("#UnitId").val(), DealUnitId: $("#DealUnitId").val(),SaleDispatchHeaderId: $("#SaleDispatchHeaderId",".modal-body").val()},

                    success: function (data) {
                        $("#UnitConversionMultiplier").val(data[0].Value);
                        Calculation.call();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Unit conversion details.' + thrownError);
                    }
                });
            }
        }

        $("#GodownId").change(function(){
            $("#StockInId").select2("data", { id: "", text: "" });
            CustomSelectFunctionForStockIn($("#StockInId"), '/SaleDispatchLine/GetStockInForProduct', '/SaleDispatchLine/SetSingleStockIn', ' ', false, 0,$("#SaleDispatchHeaderId").val(),$("#GodownId").val(),$("#ProductId").val(),$("#Dimension1Id").val(),$("#Dimension2Id").val());
        });

        $("#ProductUidName").change(function(){
            Validate_ProductUid();
        });

        $("#SaleOrderLineId").change(function(){
            Validate_SaleOrderLine();
        });

        $("#StockInId").change(function(){
            Validate_StockIn();
        });




        function Validate_SaleOrderLine() {
            var ProcessProgress = $("#Sale Order detail loading progress");
            ProcessProgress.show();
            if ($("#SaleOrderLineId").val() != "")
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetSaleOrderDetailJson"))",
                    data: { SaleOrderLineId: $("#SaleOrderLineId").val()},
                    success: function (data) {
                        if (data != null)
                        {
                            $("#SaleOrderHeaderDocNo").val(data.SaleOrderHeaderDocNo);
                            $("#ProductId").val(data.ProductId);
                            $("#Dimension1Id").select2("data", { id: data.Dimension1Id, text: data.Dimension1Name });
                            if (data.Dimension2Id != null && data.Dimension2Id != 0)
                            {
                                $("#Dimension2Id").select2("data", { id: data.Dimension2Id, text: data.Dimension2Name });
                            }
                            $("#Qty").val(data.BalanceQty);
                            $("#PassQty").val(data.BalanceQty);
                            $("#BalanceQty").val(data.BalanceQty);
                            $("#Rate").val(data.Rate);
                            $("#UnitId").val(data.UnitId);
                            $("#DealUnitId").val(data.DealUnitId);
                            $("#UnitConversionMultiplier").val(data.UnitConversionMultiplier);
                            $("#UnitName").val(data.UnitName);
                            $("#Specification").val(data.Specification);
                            Calculation();
                            CustomSelectFunctionForStockIn($("#StockInId"), '/SaleDispatchLine/GetStockInForProduct', '/SaleDispatchLine/SetSingleStockIn', ' ', false, 0,$("#SaleDispatchHeaderId").val(),$("#GodownId").val(),$("#ProductId").val(),$("#Dimension1Id").val(),$("#Dimension2Id").val());
                            GetFirstStockIn();


                        }
                        else{
                            $("#SaleOrderHeaderDocNo").val("");
                            $("#ProductId").val("");
                            $("#ProductUidId").val("");
                            $("#Qty").val(0);
                            $("#PassQty").val(0);
                            $("#BalanceQty").val(0);
                            $("#Rate").val(0);
                            $("#Specification").val("");
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product Uid details.' + thrownError);
                        ProcessProgress.hide();
                    }
                });

            }
            else {
                $("#Qty").val(0);
                $("#PassQty").val(0);
                $("#Rate").val(0);
            }
        }

        function Validate_StockIn() {
            var ProcessProgress = $("#Sale Order detail loading progress");
            ProcessProgress.show();
            if ($("#StockInId").val() != "")
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetStockInDetailJson"))",
                    data: { StockInId: $("#StockInId").val()},
                    success: function (data) {
                        if (data != null)
                        {
                            $("#StockInBalanceQty").val(data.BalanceQty);

                            if ($("#BalanceQty").val() > $("#StockInBalanceQty").val())
                            {
                                $("#Qty").val(data.BalanceQty);
                                $("#PassQty").val(data.BalanceQty);
                            }

                            $("#LotNo").val(data.LotNo);
                            Calculation();

                            $.get('/SaleDispatchLine/GetStockInBalance', {StockInId:$('#StockInId').val()}).done(function(data){
                                $('#ExcessStockQty').text("Stock:"+data);
                            });
                        }
                        else{
                            //$("#Qty").val(0);
                            //$("#PassQty").val(0);
                            $("#StockInBalanceQty").val(0);
                            $("#LotNo").val("");
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Stock In details.' + thrownError);
                        ProcessProgress.hide();
                    }
                });

            }
            else {
                //$("#Qty").val(0);
                //$("#PassQty").val(0);
                $("#StockInBalanceQty").val(0);
                $("#LotNo").val("");
            }
        }


            function GetFirstStockIn() {
                var ProcessProgress = $("#Sale Order detail loading progress");
                ProcessProgress.show();
                if ($("#ProductId").val() != "")
                {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetFirstStockInForProduct"))",
                        data: { SaleDispatchHeaderId: $("#SaleDispatchHeaderId").val(), GodownId: $("#GodownId").val(), ProductId: $("#ProductId").val(), Dimension1Id: $("#Dimension1Id").val(), Dimension2Id: $("#Dimension2Id").val()},
                    success: function (data) {
                        if (data != null && data != "")
                        {
                            $("#StockInId").select2("data", { id: data.id, text: data.text });
                            Validate_StockIn();
                            $("#Specification").focus();
                        }
                        else{
                            $("#StockInId").select2("data", { id: "", text: "" });
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Stock In details.' + thrownError);
                        ProcessProgress.hide();
                    }
                });

            }
        }

        function Validate_ProductUid() {
            var ProcessProgress = $("#Product Uid detail loading progress");
            ProcessProgress.show();
            if ($("#ProductUidName").val() != "")
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProductUIDDetailJson"))",
                    data: { ProductUIDNo: $("#ProductUidName").val()},
                    success: function (data) {
                        if (Object.keys(data).length != 0) {
                            $("#ProductUidId").val(data[0].ProductUidId);
                            $("#ProductId").select2("data", { id: data[0].ProductId, text: data[0].ProductName });
                            $("#Qty").val(1);
                            $("#Qty").prop('readonly', true);
                            Validate_Product();
                            $('#ProductId').prop('readonly', true);
                            $('#ProductCode').prop('readonly', true);
                        }
                        else {
                            $("#ProductUidId").val("");
                            $("#ProductId").select2("data", { id: "", text: "" });
                            $("#Qty").val("");
                            $("#ProductCode").val("");
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product Uid details.' + thrownError);
                        ProcessProgress.hide();
                    }
                });

            }
            else {
                $("#ProductUidId").val("");
                $("#Qty").prop('readonly', false);
                $('#ProductId').prop('readonly', false);
                $('#ProductCode').prop('readonly', false);
            }
        }









        function Calculation() {
            var TempAmount = 0;
            var DiscountAmount = 0;
            var TempRate = 0;

            if ($("#UnitId").val() == $("#DealUnitId").val()) {
                $("#UnitConversionMultiplier").val(1);
            }

            if ($('#UnitConversionMultiplier').val() != 0) {
                $('#DealQty').val(($('#Qty').val() * $('#UnitConversionMultiplier').val()).toFixed(3))
            }

            //if ($('#LossQty').val() != null && $('#LossQty').val() != "")
            //{
            //    $('#PassQty').val(parseFloat($('#Qty').val()) + parseFloat($('#LossQty').val()));
            //}
            //else{
            //    $('#PassQty').val($('#Qty').val());
            //}

            $('#LossQty').val(parseFloat($('#PassQty').val() - $('#Qty').val()).toFixed(2));
            //alert($('#LossQty').val());


            //$('#Amount').val(($('#DealQty').val() * $('#Rate').val()).toFixed(2));

            TempAmount = ($('#DealQty').val() * $('#Rate').val())

            if ($('#CalculateDiscountOnRate').val() != 0 &&  $('#CalculateDiscountOnRate').val() != null) {
                TempRate = $('#Rate').val() - ($('#Rate').val() * $('#DiscountPer').val() / 100)
                $('#Amount').val(($('#DealQty').val() * TempRate).toFixed(2));
            }
            else{
                DiscountAmount = TempAmount * $('#DiscountPer').val() / 100;
                $('#Amount').val((TempAmount - DiscountAmount).toFixed(2));
            }



        }

        $('#PassQty').keyup(function () {
            if($('#SaleOrderLineId').val() != 0 && $('#SaleOrderLineId').val() != null){
                if ( (($('#BalanceQty').val() - $('#PassQty').val()) < 0) )
                {
                    if (!$('#modform').find('.modal-body #errormsg').length) {
                        $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >Qty exceeding Order Qty</span></div>")
                        $('#submit','#modform').attr('disabled','disabled');
                    }
                }
                else
                {
                    if ($('#modform').find('.modal-body #errormsg').length)
                    {
                        $('#modform').find('#errormsg').parent().remove();
                    }
                    $('#submit','#modform').removeAttr('disabled');
                }
            }
        })
    })

</script>