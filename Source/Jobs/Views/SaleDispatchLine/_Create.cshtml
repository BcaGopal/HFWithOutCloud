@model Model.ViewModels.SaleDispatchLineViewModel
@using Core.Common

<style type="text/css">
    .cusleftnormal {
        border-bottom-left-radius: 0pc !important;
        border-top-left-radius: 0px !important;
    }

    .cusrightnormal {
        border-bottom-right-radius: 0px !important;
        border-top-right-radius: 0px !important;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Products</span>
        </h3>
    </div>
    <div>
        @Html.ValidationLog((string)TempData["CSEXCL"])
        @using (Html.BeginForm("_CreatePost", "SaleDispatchLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {

            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.SaleDispatchHeaderId)
                @Html.HiddenFor(m => m.SaleDispatchLineId)
                @Html.HiddenFor(m => m.SaleOrderLineId)
                @Html.HiddenFor(m => m.PackingLineId)
                @Html.HiddenFor(m => m.DocTypeId)
                @Html.HiddenFor(m=>m.UnitId)
                @Html.HiddenFor(m => m.SiteId)
                @Html.HiddenFor(m => m.DivisionId)
                @Html.HiddenFor(m => m.ProductUidId)


                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleProductUID ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleProductUID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductUidName, "Product Uid", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.ProductUidName, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.ProductUidName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleProductCode ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleProductCode)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductCode, "Product Code", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.ProductCode, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>                   

                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleSpecification ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleSpecification)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleDimension1 ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, (Model.DocumentTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleDimension2 ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, (Model.DocumentTypeSettings.Dimension2Caption ?? "Dimension2"), new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleLotNo ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleLotNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LotNo, "Lot No", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleBaleNo ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleBaleNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.BaleNo, "Bale No", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.BaleNo, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.BaleNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.GodownId, "Godown", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.GodownId, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.GodownId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-4" style="padding-right:0px;">
                                @Html.TextBoxFor(model => model.Qty, new { @class = "form-control required cusrightnormal text-right" })
                                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-3" style="padding-left:0px">
                                @Html.TextBoxFor(m => m.UnitName, new { @class = "form-control col-xs-2 cusleftnormal", @readonly = "true" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.LossQty, "Loss Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.LossQty, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.LossQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PassQty, "Pass Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.PassQty, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.PassQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleFreeQty ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleFreeQty)
                        <div class="form-group">
                            @Html.LabelFor(model => model.FreeQty, "Free Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.FreeQty, new { @class = "form-control col-xs-7" })
                                @Html.ValidationMessageFor(model => model.FreeQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleDealUnit ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleDealUnit)
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealUnitId, "Deal Unit& Multiplier", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-4" style="padding-right:0px">
                                @Html.DropDownListFor(model => model.DealUnitId, new SelectList(ViewBag.DeliveryUnitList as System.Collections.IEnumerable, "UnitId", "UnitName"), new { @class = "form-control height cusrightnormal required" })
                                @Html.ValidationMessageFor(model => model.DealUnitId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-3" style="padding-left:0px">
                                @Html.TextBoxFor(model => model.UnitConversionMultiplier, new { @class = "form-control cusleftnormal required text-right" })
                                @Html.ValidationMessageFor(model => model.UnitConversionMultiplier, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleDealUnit ? "" : "none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealQty, "Deal Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control col-xs-7 required text-right" })
                                @Html.ValidationMessageFor(model => model.DealQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.SaleDispatchSettings.isVisibleWeight ? "" : "none")">
                        @Html.HiddenFor(m => m.SaleDispatchSettings.isVisibleWeight)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Weight, "Weight", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Weight, new { @class = "form-control col-xs-7 text-right" })
                                @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>




                    
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Remark, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}

                </div>

            </div>
        }
    </div>
</div>




<script type="text/javascript">

    //var cachearray={};

    $(document).ready(function () {
        var DocID = $('#SaleDispatchHeaderId', '.modal-body').val();

        CustomSelectFunction($("#ProductId"), '/SaleDispatchLine/GetCustomProducts', '/ComboHelpList/SetSingleProducts', 'Enter Products', false, 0, DocID);
        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', 'Enter Dimension1', false, 1);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', 'Enter Dimension2', false, 1);
        CustomSelectFunction($("#GodownId"), '/ComboHelpList/GetGodown', '/ComboHelpList/SetSingleGodown', 'Enter Godown', false, 1);

        

        var IsSaved=false;
        var ValidationCount=0;

        $('#modform').bind('submit',function(event){

            if(!IsSaved)
            {
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                $('button:submit').attr('disabled','disabled');
                return IsSaved;
            }
            else
            {
                return false;
            }


        });

        function ValidateData() {
            var ValidationMessage = "";

            //Client Side Validaion.....

            return  (ValidationMessage=="");

        }



        $("#ProductId").select2("focus");

        var id=@Model.SaleDispatchLineId;
        if(id>0)
        {
            $('#ProductId').attr('readonly','true');
            $('#ProductCode').attr('readonly','true');
            $('#ProductUidName').attr('readonly','true');
        }

        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/SaleDispatchLine/DeletePost';
                $('form#modform').attr('action',url);
                return;
            }
            else
            {
                return false;
            }
        })
    });


    $(function(){

        $("#DealQty,#Rate,#Amount,#Qty,#UnitConversionMultiplier,#DiscountPer").keyup(Calculation);
        $("#DealUnitId").change(GetUnitConversionMultiplier);


        function GetUnitConversionMultiplier() {

            if ($("#UnitId").val() == $("#DealUnitId").val()) {
                $("#UnitConversionMultiplier").val(1);
                Calculation.call();
            }
            else {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetUnitConversionDetailJson"))",
                    data: { ProductId: $("#ProductId").val(), UnitId: $("#UnitId").val(), DealUnitId: $("#DealUnitId").val(),SaleDispatchHeaderId: $("#SaleDispatchHeaderId",".modal-body").val()},

                    success: function (data) {
                        $("#UnitConversionMultiplier").val(data[0].Value);
                        Calculation.call();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Unit conversion details.' + thrownError);
                    }
                });
            }
        }

        $('#ProductId').change(function(){
            Validate_Product();
        })

        $('#ProductCode').change(function(){
            Validation_ProductCode();
        })

        $("#ProductUidName").change(function(){
            Validate_ProductUid();
        });



        function Validation_ProductCode()
        {
            if ($("#ProductCode").val()) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProductCodeDetailJson"))",
                    data: { ProductCode: $("#ProductCode").val(),SaleDispatchHeaderId:$("#SaleDispatchHeaderId","#modform").val()},
                    success: function (data) {
                        if (data != null && data != "")
                        {
                            $("#ProductId").select2("data", { id: data.ProductId, text: data.ProductName });
                            Validate_Product();
                        }
                        else
                        {
                            $("#ProductId").select2("data", { id: "", text: "" });
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
        }


        function Validate_Product()
        {
            if ($("#ProductId").val()) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProductDetailJson"))",
                    data: { ProductId: $("#ProductId").val(),SaleDispatchHeaderId:$("#SaleDispatchHeaderId","#modform").val()},
                    success: function (data) {
                        $("#ProductCode").val(data.ProductCode);
                        $("#Rate").val(data.StandardCost);
                        $("#UnitId").val(data.UnitId);
                        $("#DealUnitId").val(data.DealUnitId);
                        $("#UnitName").val(data.UnitName);
                        $("#Specification").val(data.Specification);
                        GetUnitConversionMultiplier();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
        }





        function Validate_ProductUid() {
            var ProcessProgress = $("#Product Uid detail loading progress");
            ProcessProgress.show();
            if ($("#ProductUidName").val() != "")
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetProductUIDDetailJson"))",
                    data: { ProductUIDNo: $("#ProductUidName").val()},
                    success: function (data) {
                        if (Object.keys(data).length != 0) {
                            $("#ProductUidId").val(data[0].ProductUidId);
                            $("#ProductId").select2("data", { id: data[0].ProductId, text: data[0].ProductName });
                            $("#Qty").val(1);
                            $("#Qty").prop('readonly', true);
                            Validate_Product();
                            $('#ProductId').prop('readonly', true);
                            $('#ProductCode').prop('readonly', true);
                        }
                        else {
                            $("#ProductUidId").val("");
                            $("#ProductId").select2("data", { id: "", text: "" });
                            $("#Qty").val("");
                            $("#ProductCode").val("");
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product Uid details.' + thrownError);
                        ProcessProgress.hide();
                    }
                });

            }
            else {
                $("#ProductUidId").val("");
                $("#Qty").prop('readonly', false);
                $('#ProductId').prop('readonly', false);
                $('#ProductCode').prop('readonly', false);
            }
        }

        function Calculation() {
            var TempAmount = 0;
            var DiscountAmount = 0;
            var TempRate = 0;

            if ($("#UnitId").val() == $("#DealUnitId").val()) {
                $("#UnitConversionMultiplier").val(1);
            }

            $('#PassQty').val($('#Qty').val() + $('#LossQty').val() )

            if ($('#UnitConversionMultiplier').val() != 0) {
                $('#DealQty').val(($('#Qty').val() * $('#UnitConversionMultiplier').val()).toFixed(2))
            }

            //$('#Amount').val(($('#DealQty').val() * $('#Rate').val()).toFixed(2));

            TempAmount = ($('#DealQty').val() * $('#Rate').val())

            if ($('#CalculateDiscountOnRate').val() != 0 &&  $('#CalculateDiscountOnRate').val() != null) {
                TempRate = $('#Rate').val() - ($('#Rate').val() * $('#DiscountPer').val() / 100)
                $('#Amount').val(($('#DealQty').val() * TempRate).toFixed(2));
            }
            else{
                DiscountAmount = TempAmount * $('#DiscountPer').val() / 100;
                $('#Amount').val((TempAmount - DiscountAmount).toFixed(2));
            }




        }

    })


</script>