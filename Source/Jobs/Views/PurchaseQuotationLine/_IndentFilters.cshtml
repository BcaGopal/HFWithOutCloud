@model Model.ViewModel.PurchaseQuotationLineFilterViewModel
@using Core.Common

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Filters</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_FilterPostIndents", "PurchaseQuotationLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {


            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.SupplierId)
                @Html.HiddenFor(model => model.PurchaseQuotationHeaderId)
                @Html.HiddenFor(m => m.PurchaseQuotationSettings.isMandatoryRate)
                @Html.HiddenFor(m => m.PurchaseQuotationSettings.isEditableRate)

                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                <div class="row">
                    <h4 class="col-md-12 black">
                        <span class="glyphicon glyphicon-align-justify"></span>
                        1.Filters
                    </h4>
                    <div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PurchaseIndentHeaderId, "Purchase Indents", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-7">
                                        @Html.TextBoxFor(model => model.PurchaseIndentHeaderId, new { @class = "form-control col-xs-7 required" })
                                        @Html.ValidationMessageFor(model => model.PurchaseIndentHeaderId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductId, "Product ", new { @class = "control-label col-xs-4 " })
                                    <div class="col-xs-7">
                                        @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                        @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                        <span id="status" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductGroupId, "Product Group", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-7">
                                        @Html.TextBoxFor(model => model.ProductGroupId, new { @class = "form-control col-xs-7 required" })
                                        @Html.ValidationMessageFor(model => model.ProductGroupId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <hr style="margin-bottom:0px" />
                <div class="row">
                    <h4 class="col-md-12 black">
                        <span class="glyphicon glyphicon-align-justify"></span>
                        2.Default Values
                    </h4>
                    <div>
                        <div class="row">

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DealUnitId, "Deal Unit", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-7">
                                        @Html.DropDownListFor(model => model.DealUnitId, new SelectList(ViewBag.DeliveryUnitList as System.Collections.IEnumerable, "UnitId", "UnitName"), string.Empty, new { @class = "form-control height cusrightnormal required" })
                                        @Html.ValidationMessageFor(model => model.DealUnitId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Rate, "Rate", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-7">
                                        @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7 required" })
                                        @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom" name="Command:Edit" type="submit"><h2 style="margin:0px" id="submit" title="Proceed"><span class="glyphicon glyphicon-arrow-right black"></span> </h2></button>
                </div>

            </div>

        }
    </div>
</div>


<script type="text/javascript">


    $(document).ready(function () {
        $("#ProductId").select2("focus");
        CustomSelectFunction($("#ProductGroupId"), '/ComboHelpList/GetProductGroup', '/ComboHelpList/SetProductGroup', 'Enter Group Name', true, 1);
    });

    var DocID = $('#PurchaseQuotationHeaderId', '.modal-body').val();
    var URL = '/PurchaseQuotationLine/GetPurchaseIndents/' + DocID;
    $("#PurchaseIndentHeaderId").select2({
        minimumInputLength: 0,
        multiple: true,
        ajax: {
            url: URL,
            dataType: 'json',
            type: "GET",
            quietMillis: 1000,
            data: function (term) {
                return {
                    term: term,
                };
            },
            results: function (data) {
                return {
                    results: $.map(data, function (item) {
                        return {
                            text: item.DocNo,
                            id: item.PurchaseIndentHeaderId
                        }
                    })

                };
            }
        },
        initSelection: function (element, callback) {

            var xval = element.val();
            if (xval != 0) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: '/ComboHelpList/SetPurchaseIndents',
                    data: { Ids: element.val() },
                    success: function (data) {
                        callback(data);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to Retrive Qty' + thrownError);
                    }
                })
            }
        }

    });


    var URL = '/ComboHelpList/GetCustomProducts/';
    $("#ProductId").select2({
        minimumInputLength: 1,
        multiple: true,
        ajax: {
            url: URL,
            dataType: 'json',
            type: "GET",
            quietMillis: 1000,
            data: function (term) {
                return {
                    term: term,
                };
            },
            results: function (data) {
                return {
                    results: $.map(data, function (item) {
                        return {
                            text: item.PropFirst,
                            id: item.Id
                        }
                    })

                };
            }
        },
        initSelection: function (element, callback) {

            var xval = element.val();
            if (xval != 0) {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: '/ComboHelpList/SetProducts',
                    data: { Ids: element.val() },
                    success: function (data) {
                        callback(data);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to Retrive Qty' + thrownError);
                    }
                })
            }
            //callback([{ id: "1", text: "arpit" }, { id: "2", text: "akash" }]);
        }


    });

</script>