@{
    ViewBag.Title = "Sub Trial Balance";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<link href="~/Content/Slick/slick.grid.css" rel="stylesheet" />
<link href="~/Content/Slick/css/smoothness/jquery-ui-1.8.16.custom.css" rel="stylesheet" />
<link href="~/Content/Slick/slick-default-theme.css" rel="stylesheet" />

<style type="text/css">
    .slick-header-column.ui-state-default {
        background-color: #428bca;
        color: white;
        height: 35px;
        line-height: 35px;
    }

    .slick-row.ui-widget-content, .slick-cell {
        height: 30px;
              font-size:14px;
        line-height: 30px;
    }

    #myGrid * {
        box-sizing: content-box !important;
    }

    .hidden {
        display: none;
    }
        .Bold 
        {
            font-weight: bold;
            color:  black;
        }

      .totals {
      font-weight: bold;
      text-align:right;
              font-size:14px;
      color:  black;
    }
      .rightMargin {
      margin-right: 2px;
    }
</style>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-list black"></span> @ViewBag.Name</span>
            <span style="font-family: Calibri,sans-serif,Verdana;font-size:medium" class="black"> @ViewBag.FilterRemark </span> 
            @Html.ActionLink(" ", "Create", "TrialBalanceSetting", new { returnUrl = Request.RawUrl }, new { @class = "cbtn btn-circle glyphicon glyphicon-cog toolbar right rightMargin", @title = "List", @data_toggle = "tooltip" })
            @Html.ActionLink(" ", " ", " ", null, new { @class = "cbtn btn-circle glyphicon glyphicon-refresh toolbar right rightMargin", @title = "Refresh Page", @data_toggle = "tooltip", @id = "RefreshPage" })
            @Html.ActionLink(" ", "GeneratePrints", "TrialBalance", new { ActionName = "SubTrialBalanceSummary", LedgerAccountGroupId= @ViewBag.id }, new { @class = "cbtn btn-circle glyphicon glyphicon-print toolbar right rightMargin", @title = "Print", @data_toggle = "tooltip", @id = "PrintRecord" })
            <input type="text" id="txtSearch2" class="right toolbar small" placeholder="Search" style="height:25px;margin:5px;max-width:20%">
        </h3>
    </div>

    <div class="panel-info tab" style="padding-left:0px">
        <div style="width: 100%;">

            <div id="myGrid" style="width: 100%; height: 450px; font-size: 11px"></div>
        </div>
    </div>
</div>

<script src="~/Scripts/Slick/lib/jquery.event.drag-2.2.js"></script>
<script src="~/Scripts/Slick/slick.core.js"></script>
<script src="~/Scripts/Slick/slick.grid.js"></script>
<script src="~/Scripts/Slick/slick.dataview.js"></script>
<script src="~/Scripts/Slick/slick.rowselectionmodel.js"></script>
<script>

    var grid;
    var columns;
    var data;

    //Columns Specification
    columns = [
   { id: "LedgerAccName", name: "Ledger A/C", field: "LedgerAccountName", headerCssClass: "Bold", width: 300, minWidth: 150, hasTotalName: true },
   { id: "Opening", name: "Opening", field: "Opening", cssClass: "text-right", headerCssClass: "text-right Bold", width: 150, minWidth: 100, hasTotal: true, formatter: DecimalFormatter },
   { id: "OpeningTyp", name: "", field: "OpeningType", headerCssClass: "Bold", width: 30, minWidth: 30 },
   { id: "ADr", name: "Amount Dr", field: "AmtDr", cssClass: "text-right", headerCssClass: "text-right Bold", width: 150, minWidth: 100, hasTotal: true, formatter: DecimalFormatter },
   { id: "ACr", name: "Amount Cr", field: "AmtCr", cssClass: "text-right", headerCssClass: "text-right Bold", width: 150, minWidth: 100, hasTotal: true, formatter: DecimalFormatter },
   { id: "Balance", name: "Balance", field: "Balance", cssClass: "text-right", headerCssClass: "text-right Bold", width: 150, minWidth: 100, hasTotal: true, formatter: DecimalFormatter },
    { id: "BalanceTyp", name: "", field: "BalanceType", headerCssClass: "Bold", width: 30, minWidth: 30 },
    ];

    function DecimalFormatter(row, cell, value, columnDef, dataContext) {

        if (value == null || value == "") {

            return "";

        } else {

            return Number(value).toFixed(2);

        }

    }

    //Options Initialization
    var options = {
        editable: false,
        enableCellNavigation: true,
        enableColumnReorder: false,
        forceFitColumns: true,
        showFooterRow: true,
        explicitInitialization: true
    };

    //Creating Custom FilterFunction that can be passed to slickgrid for search
    var searchString = "";
    function myFilter(item, args) {
        if (args.searchString != "" && (item["LedgerAccountName"]).toLowerCase().indexOf(args.searchString.toLowerCase()) == -1) {
            return false;
        }
        return true;
    }


    //Instantiating the Grid
    var dataView = new Slick.Data.DataView({ inlineFilters: true });
    grid = new Slick.Grid("#myGrid", dataView, columns, options);

    //Adding Grid functionalities
    grid.setSelectionModel(new Slick.RowSelectionModel());


    //Functionality for adding Totals on cell render
    //Functionality for adding Totals on cell render
    grid.onFooterRowCellRendered.subscribe(function (e, args) {
        if (args.column.hasTotal) {
            $(args.node).empty();
            $("<span></span>").text((getColumnTotal(args.column.field, grid.getData())).toFixed(2))
               .appendTo(args.node);
            $(args.node).addClass("totals");
        }
        else if (args.column.hasTotalName) {
            $(args.node).empty();
            $("<span></span>").text("Total")
               .appendTo(args.node);
            $(args.node).addClass("totals");
        }
    });

    //Functionality for Enter key navigation
    grid.onKeyDown.subscribe(function (e) {
        if (e.which == 13) {
            var id = grid.getDataItem(grid.getSelectedRows()).LedgerAccountId;
            window.location.href = '/TrialBalance/GetLedgerBalance/' + id;
        }
    });


    //Functionality for search events
    $("#txtSearch,#txtSearch2").keyup(function (e) {
        Slick.GlobalEditorLock.cancelCurrentEdit();
        // clear on Esc
        if (e.which == 27) {
            this.value = "";
        }
        searchString = this.value;
        updateFilter();
    });
    function updateFilter() {
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.refresh();
    }


    // wire up model events to drive the grid
    dataView.onRowCountChanged.subscribe(function (e, args) {
        grid.updateRowCount();
        grid.render();
    });

    dataView.onRowsChanged.subscribe(function (e, args) {
        grid.invalidateRows(args.rows);
        grid.render();
    });


    //Data Fetching
    var url = '@Url.Action("GetSubTrlBalSummary", "TrialBalance", new { id = @ViewBag.id })';

    $.ajax({
        url: url,
        async: true,
        success: function (rest) {
            data = rest.data;
            InitializeGrid();
        },
        error: function () {
            onError(fromPage, toPage)
        }
    });

    //Initializing the Grid
    function InitializeGrid() {
        // initialize the model after all the events have been hooked up
        dataView.beginUpdate();
        dataView.setItems(data, "LedgerAccountId");
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.setFilter(myFilter);
        dataView.endUpdate();

        // if you don't want the items that are not visible (due to being filtered out
        // or being on a different page) to stay selected, pass 'false' to the second arg
        dataView.syncGridSelection(grid, true);

        grid.init();

    }

    $('#myGrid').on('dblclick', '.ui-widget-content.slick-row', function () {
        var id = grid.getDataItem(grid.getSelectedRows()).LedgerAccountId;
        window.location.href = '/TrialBalance/GetLedgerBalance/' + id;
    });

    $(window).resize(function (e) {
        grid.resizeCanvas();
    })

    function getColumnTotal(columns, data) {
        var rowIdx = data.getLength();
        var total = 0;
        var dataArr = data.getItems();
        console.log(rowIdx);
        while (rowIdx--) {

            total += (parseFloat(dataArr[rowIdx][columns]) || 0);

        }
        console.log(total);
        return total;
    }

</script>