@{
    ViewBag.Title = "Balance Sheet";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<link href="~/Content/Slick/slick.grid.css" rel="stylesheet" />
<link href="~/Content/Slick/css/smoothness/jquery-ui-1.8.16.custom.css" rel="stylesheet" />
<link href="~/Content/Slick/slick-default-theme.css" rel="stylesheet" />

<style type="text/css">
    .slick-header-column.ui-state-default {
        background-color: #428bca;
        color: white;
        height: 35px;
        line-height: 35px;
    }

    .Bold 
        {
            font-weight: bold;
            color:  black;
        }

        .LineHight 
        {
         
        height: 150px;
        }

    .Row_Total
   {
    font-weight: bold;
    font-size:larger;
    color:  black;
    }

      .totals {
      font-weight: bold;
      text-align:right;
      font-size:larger;
      color:  black;
    }

    .slick-row.ui-widget-content, .slick-cell {
        height: 30px;
        line-height: 30px;
    }

    #myGrid * {
        box-sizing: content-box !important;
    }

    .hidden {
        display: none;
    }

    .sml {
        width: 10% !important;
    }

    .md {
        width: 15% !important;
    }

   .toggle {
      height: 9px;
      width: 9px;
      display: inline-block;
    }
    .toggle.expand {
        background: url(../images/minus.gif) no-repeat center center;
        
    }
    .toggle.collapse {
      background: url(../images/plus.gif) no-repeat center center;
    }



</style>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-list black"></span> Balance Sheet</span>
            @Html.ActionLink(" ", " ", " ", null, new { @class = "glyphicon glyphicon-refresh toolbar right small", @title = "Refresh Page", @data_toggle = "tooltip", @id = "RefreshPage", @style = "padding:10px 5px;" })
            @Html.ActionLink(" ", "Create", "TrialBalanceSetting", null, new { @class = "glyphicon glyphicon-cog toolbar right small", @title = "List", @data_toggle = "tooltip", @style = "padding:10px 5px;" })
            <input type="text" id="txtSearch2" class="right toolbar small" placeholder="Search" style="height:25px;max-width:20%">
        </h3>
    </div>

    <div class="panel-info tab" style="padding-left:0px">
        <div style="width: 100%;">
            <div id="myGrid" style="width: 100%; height: 450px; font-size: 11px; "></div>
        </div>
    </div>
</div>

<script src="~/Scripts/Slick/lib/jquery.event.drag-2.2.js"></script>
<script src="~/Scripts/Slick/slick.core.js"></script>
<script src="~/Scripts/Slick/slick.grid.js"></script>
<script src="~/Scripts/Slick/slick.dataview.js"></script>
<script src="~/Scripts/Slick/slick.rowselectionmodel.js"></script>

<script>


    var TaskNameFormatter = function (row, cell, value, columnDef, dataContext) {
        value = value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        var spacer = "<span style='display:inline-block;height:1px;width:" + (15 * dataContext["indent"]) + "px'></span>";
        var idx = dataView.getIdxById(dataContext.id);
        if (data[idx + 1] && data[idx + 1].indent > data[idx].indent) {
            if (dataContext._collapsed) {
                return spacer + " <span class='toggle expand'></span>&nbsp;" + value;
            } else {
                return spacer + " <span class='toggle collapse'></span>&nbsp;" + value;
            }
        } else {
            return spacer + " <span class='toggle'></span>&nbsp;" + value;
        }
    };

    var grid;
    var columns;
    var data;

    //Columns Specification
    columns =
   [
   { id: "LiabilityGroupName", name: "Liabilitis", field: "LiabilityGroupName", formatter: TaskNameFormatter, width: 200, minWidth: 200, hasTotalName: true },
   { id: "LiabilityAmount", name: "Amount", field: "LiabilityAmount", cssClass: "text-right", headerCssClass: "text-right", width: 150, minWidth: 100, hasTotal: true },
   { id: "AssetGroupName", name: "Assets", field: "AssetGroupName", width: 200, minWidth: 200 },
   { id: "AssetAmount", name: "Amount", field: "AssetAmount", cssClass: "text-right", headerCssClass: "text-right", width: 150, minWidth: 100, hasTotal: true },
    ];


    //Options Initialization
    var options = {
        editable: false,
        enableCellNavigation: true,
        enableColumnReorder: false,
        forceFitColumns: true,
        showFooterRow: true,
        explicitInitialization: true
    };

    //Creating Custom FilterFunction that can be passed to slickgrid for search
    var searchString = "";
    function myFilter(item, args) {
        if (args.searchString != "" && (item["DrParticular"]).toLowerCase().indexOf(args.searchString.toLowerCase()) == -1) {
            return false;
        }
        return true;
    }

    //Instantiating the Grid
    var dataView = new Slick.Data.DataView({ inlineFilters: true });


    grid = new Slick.Grid("#myGrid", dataView, columns, options);

    //Adding Grid functionalities
    grid.setSelectionModel(new Slick.RowSelectionModel());

    //Functionality for adding Totals on cell render
    grid.onFooterRowCellRendered.subscribe(function (e, args) {
        if (args.column.hasTotal) {
            $(args.node).empty();
            $("<span></span>").text((getColumnTotal(args.column.field, grid.getData())).toFixed(2))
               .appendTo(args.node);
            $(args.node).addClass("totals");
        }
        else if (args.column.hasTotalName) {
            $(args.node).empty();
            $("<span></span>").text("Total")
               .appendTo(args.node);
            $(args.node).addClass("totals");
        }

    });


    //Functionality for search events
    $("#txtSearch,#txtSearch2").keyup(function (e) {
        Slick.GlobalEditorLock.cancelCurrentEdit();
        // clear on Esc
        if (e.which == 27) {
            this.value = "";
        }
        searchString = this.value;
        updateFilter();
    });
    function updateFilter() {
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.refresh();
    }

    // wire up model events to drive the grid
    dataView.onRowCountChanged.subscribe(function (e, args) {
        grid.updateRowCount();
        grid.render();
    });

    dataView.onRowsChanged.subscribe(function (e, args) {
        grid.invalidateRows(args.rows);
        grid.render();
    });


    //Data Fetching
    $.ajax({
        url: "/TrialBalance/_BalanceSheet",
        async: true,
        success: function (rest) {
            data = rest.data;
            InitializeGrid();
        },
        error: function () {
            onError(fromPage, toPage)
        }
    });


    //Initializing the Grid
    function InitializeGrid() {
        // initialize the model after all the events have been hooked up
        dataView.beginUpdate();
        dataView.setItems(data, "Sr");
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.setFilter(myFilter);
        dataView.endUpdate();

        // if you don't want the items that are not visible (due to being filtered out
        // or being on a different page) to stay selected, pass 'false' to the second arg
        dataView.syncGridSelection(grid, true);

        grid.init();

    }

    $('#myGrid').on('dblclick', '.ui-widget-content.slick-row', function ()
    {
        var cell = grid.getActiveCell();
        var c = grid.getColumns()[cell.cell];
       // alert(c.field.toString());
        var id=0;
        if (c.field.toString() == "LiabilityGroupName" || c.field.toString() == "LiabilityAmount")
        {
            id = grid.getDataItem(grid.getSelectedRows()).LiabilityGroupId;
        }
        else if (c.field.toString() == "AssetGroupName" || c.field.toString() == "AssetAmount")
        {
            id = grid.getDataItem(grid.getSelectedRows()).AssetGroupId;
        }
        if (id != 0)
        {
            window.location.href = '/TrialBalance/GetLedgerGroupBalance/' + id;
        }
    });


    grid.onCellChange.subscribe(function (e, args) {
        dataView.updateItem(args.item.id, args.item);
    });

    grid.onAddNewRow.subscribe(function (e, args) {
        var item = {
            "Sr": "new_" + (Math.round(Math.random() * 10000)),
            "LiabilityGroupName": "New task",
            "LiabilityAmount": "1 day",
            "AssetAmount": 0,
            "AssetGroupName": "01/01/2009"
        };
        $.extend(item, args.item);
        dataView.addItem(item);
    });

    grid.onClick.subscribe(function (e, args) {
        alert('1');
        //if ($(e.target).hasClass("toggle")) {
            var item = dataView.getItem(args.row);
            alert(item.toString());
            if (item) {
                if (!item._collapsed) {
                    item._collapsed = true;
                } else {
                    item._collapsed = false;
                }
                dataView.updateItem(item.id, item);
            }
            e.stopImmediatePropagation();
        //}
    });

    $(window).resize(function (e) {
        grid.resizeCanvas();
    })

    function getColumnTotal(columns, data) {
        var rowIdx = data.getLength();
        var total = 0;
        var dataArr = data.getItems();
        console.log(rowIdx);
        while (rowIdx--) {

            total += (parseFloat(dataArr[rowIdx][columns]) || 0);

        }
        console.log(total);
        return total;
    }


</script>