@model Model.ViewModel.PurchaseGoodsReceiptHeaderViewModel
@using Core.Common
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
    .ui-autocomplete .m-name {
        display: block;
        margin-right: 1em;
        font-size: small;
    }

    .ui-autocomplete .m-year {
        display: block;
        font-size: small;
    }

    .ui-autocomplete .rt-bar span {
        display: block;
        height: 1em;
    }

    /*.ui-autocomplete span {
        background-color: #C91B22;
    }*/
    .ui-widget {
        font-family: Tahoma;
    }
    /*.ui-autocomplete li {
        background-color: #94B13C;
    }*/
</style>
<!-- modal placeholder-->
<div id='myModal' class='modal fade in'>
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

@using (Html.BeginForm("Post", "PurchaseGoodsReceiptHeader", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.SiteId)
    @Html.HiddenFor(m => m.DivisionId)
    @Html.HiddenFor(m => m.GateInId)
    @Html.HiddenFor(m => m.RoadPermitFormId)
    @Html.HiddenFor(m => m.PurchaseGoodsReceiptHeaderId)
    @Html.HiddenFor(m => m.PurchaseWaybillId)
    @Html.HiddenFor(m => m.DocTypeId)
    @Html.HiddenFor(m => m.CreatedDate)
    @Html.HiddenFor(m => m.Status)

    <div class="panel panel-default">
        <div class="panel-heading">

            @CustomHelpers.RenderHeaderInfo(ViewBag.transactionType, (int?)ViewBag.PendingToSubmit, (int?)ViewBag.PendingToReview, ViewBag.Name)

            @*@if (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue")
            {<h3 style="border-bottom:1px solid #e1dada;padding-bottom:10px;">
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>Submit @ViewBag.Name</span>
                <button type="submit" name="Command:Submit" class="btn btn-primary right" id="SubmitContinue" style="margin-left:5px;">Submit & Next<span class='badge'>@(ViewBag.PendingToSubmit != 0 ? ViewBag.PendingToSubmit : "")</span></button>
                <input type="submit" value="Submit" name="Command:Submit" class="btn btn-primary right" style="width: 90px; background-color: #2980b9" />
                <input type="hidden" id="IsContinue" name="IsContinue" value="" />
            </h3>}
            else if (ViewBag.transactionType == "review" || ViewBag.transactionType == "ReviewContinue")
            {<h3 style="border-bottom:0px solid #e1dada;padding-bottom:0px;">
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span> Review @ViewBag.Name</span>
                 <button type="submit" name="Command:Review" class="btn btn-primary right" style="margin-left:5px" id="ReviewContinue">Review & Next<span class='badge'>@(ViewBag.PendingToReview != 0 ? ViewBag.PendingToReview : "")</span></button>
                <button type="submit" class="btn btn-primary right" name="Command:Review">Review</button>
                 <input type="hidden" id="IsContinue" name="IsContinue" value="" />
            </h3>}
            else if (ViewBag.transactionType == "detail")
            {
                <h3>
                    <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>@ViewBag.Name</span>
                </h3>
            }

            else
            {
                <h3 style="border-bottom:1px solid #e1dada;padding-bottom:10px;">
                    <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>@ViewBag.Name</span>
                    <input type="submit" value="Save" class="btn btn-primary right" id="submit" style="width: 90px; background-color: #2980b9" />
                </h3>                
            }*@

            

            <hr style="margin-top:10px;margin-bottom:0px" />

            <div class="panel-info">
               
                <div class="btn-group">
                    @Html.ActionLink(" ", "Create", "PurchaseGoodsReceiptHeader", new { @id = ViewBag.id }, new { @class = "cbtn btn-circle glyphicon glyphicon-plus toolbar", @title = "Add New", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "GeneratePrints", "PurchaseGoodsReceiptHeader", new { Ids = Model.PurchaseGoodsReceiptHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-print toolbar", @title = "Print", @data_toggle = "tooltip", @id = "PrintRecordC", target = "_blank" })
                    @Html.ActionLink(" ", "PrevPage", "PurchaseGoodsReceiptHeader", new { DocId = @Model.PurchaseGoodsReceiptHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-left toolbar", @title = "Prev Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "NextPage", "PurchaseGoodsReceiptHeader", new { DocId = @Model.PurchaseGoodsReceiptHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-right toolbar", @title = "Next Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Index", "PurchaseGoodsReceiptHeader", new { @id = ViewBag.id, IndexType = ViewBag.IndexStatus }, new { @class = "cbtn btn-circle glyphicon glyphicon-list", @title = "List", @data_toggle = "tooltip" })
                </div>
                <div class="btn-group">
                    <a class="cbtn btn-circle glyphicon glyphicon-option-horizontal dropdown-toggle" title="More Option" aria-expanded="false" style="padding-top: 6px;padding-bottom: 6px;" href="#" data-toggle="dropdown" id="dropdownMenu1">
                    </a>
                    <ul class="dropdown-menu pull-right" aria-labelledby="dropdownMenu1">
                        <li><a id="DocHistory" data-modal="" href="@Url.Action("GetHistory", "LogHistory", new { Ids = Model.PurchaseGoodsReceiptHeaderId, DocTypeId = Model.DocTypeId })"><span class="glyphicon glyphicon-user"> </span> History</a></li>
                        <li><a href="@Url.Action("Email", "PurchaseGoodsReceiptHeader")"><span class="glyphicon glyphicon-envelope"> </span> Email</a></li>
                        <li role="separator" class="divider"></li>
                        <li><a target="_blank" href="@Url.Action("Report", "PurchaseGoodsReceiptHeader", new { @ViewBag.id })"><span class="glyphicon glyphicon-stats"> </span> Report</a></li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="panel-info" style="padding-left:15px">
            <div class="form-horizontal">
                @Html.ValidationSummary(true)

                <div>
                    <h4 class="col-md-12 black">
                        <span class="glyphicon glyphicon-align-justify"></span>
                        1.Document Details
                    </h4>
                    <div>
                        <div>
                            @*<div class="col-md-6">
                                    <div class="form-group" style="margin-top:15px">
                                        @Html.LabelFor(model => model.DocTypeId, "Receipt Type", new { @class = "control-label col-xs-4" })
                                        <div class="col-xs-6">
                                            @Html.DropDownListFor(model => model.DocTypeId, new SelectList(ViewBag.DocTypeList as System.Collections.IEnumerable, "DocumentTypeId", "DocumentTypeName"), new { @class = "form-control height required" })
                                        </div>
                                    </div>
                                </div>*@
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocDate, "Receipt Date", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DocDate, "{0:dd/MMMM/yyyy}", new { @class = "datepickerWithNFD form-control required updateDocNo",
                                       data_tabl = "PurchaseGoodsReceiptHeaders",
                                       data_doctype = Model.DocTypeId,
                                       data_divId = Model.DivisionId,
                                       data_sitId = Model.SiteId,
                                   })
                                        @Html.ValidationMessageFor(model => model.DocDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocNo, "Receipt No", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DocNo, null, new { @class = "form-control required" })
                                        @Html.ValidationMessageFor(m => m.DocNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SupplierId, "Supplier", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.SupplierId, null, new { @class = "form-control required" })
                                        @Html.ValidationMessageFor(m => m.SupplierId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PurchaseWaybillId, "Way Bill", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBox(" ", " ", new { @class = "form-control", @id = "acwaybills" })
                                        @Html.ValidationMessageFor(m => m.PurchaseWaybillId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>


                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SupplierDocNo, "Supplier Dispatch No", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.SupplierDocNo, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.SupplierDocNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.SupplierDocDate, "Supplier Dispatch Date", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.SupplierDocDate, "{0:dd/MMMM/yyyy}", new { @class = "datepicker form-control" })
                                        @Html.ValidationMessageFor(m => m.SupplierDocDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.RoadPermitFormId, "Road Permit Form", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBox(" ", " ", new { @class = "form-control", @id = "acroadpermitforms" })
                                        @Html.ValidationMessageFor(m => m.RoadPermitFormId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.GodownId, "Godown", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.GodownId, new { @class = "form-control required" })
                                        @Html.ValidationMessageFor(m => m.GodownId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.GateInId, "Gate In", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBox(" ", " ", new { @class = "form-control", @id = "acgatein" })
                                        @Html.ValidationMessageFor(m => m.GateInId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.UnitConversionForId, "Unit Conversion For", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.DropDownListFor(m => m.UnitConversionForId, new SelectList(ViewBag.UnitConvForList as System.Collections.IEnumerable, "UnitConversionForId", "UnitConversionForName"), new { @class = "form-control height" })
                                        @Html.ValidationMessageFor(m => m.UnitConversionForId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                        </div>
                        <div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextAreaFor(m => m.Remark, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => m.Remark, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                <hr />
                <div class="row">
                    <h4 class="col-md-12 black" style="margin-top:15px">
                        <span class="glyphicon glyphicon-shopping-cart"></span>
                        2.Products
                    </h4>
                </div>

                <div class="panel-info" style="height:40px;">
                    <div class="btn-group" style="padding:5px 0 3px 0;margin:0px;font-weight:bold">
                        <span class="glyphicon glyphicon-plus-sign"></span>
                        @{string Action = "";
                            if (Model.Status == (int)StatusConstants.Drafted || Model.Status == (int)StatusConstants.Import)
                            { Action = "CreateLine";
                            }
                            else if (Model.Status == (int)StatusConstants.Submitted || Model.Status == (int)StatusConstants.Modified)
                            { Action = "CreateLineAfter_Submit";
                            }

                        }
                        @Html.ActionLink("Add New Row ", Action, "PurchaseGoodsReceiptLine", new { id = @Model.PurchaseGoodsReceiptHeaderId, sid = @Model.SupplierId }, new { data_modal = "", id = "btnCreate", @class = "toolbar", @title = "Add New", @data_toggle = "tooltip", @data_detailDisabled = "true" })
                        </div>
                    <div class="btn-group right" style="padding-right:15px">
                        @Html.ActionLink(" ", "_ForOrder", "PurchaseGoodsReceiptLine", new { id = @Model.PurchaseGoodsReceiptHeaderId, sid = @Model.SupplierId }, new { data_modal = "", id = "btnCreateF", @class = "cbtn btn-circle glyphicon glyphicon-link toolbar right", @title = "For Order", @data_toggle = "tooltip", @data_detailDeleted = "true" })
                      </div>
                    </div>
                <div style="padding-right:15px">

                    @*<table class="table table-hover ctable">
                            <thead id="header">
                            </thead>

                            <tbody id="Result"></tbody>
                        </table>*@

                    <div class="panel panel-default" id="grid">
                        <div class="panel-heading headrow" style="background-image: -webkit-linear-gradient(top, #428bca 0%, #428bca 100%);color:white">
                            <div class="row grid-head">
                                <div class="col-xs-1 text-left">
                                    Srl.
                                </div>
                                <div class="col-xs-10">
                                    <div class="row">
                                        @*ProductInfo*@
                                        <div class="col-sm-3">
                                            Product Name

                                        </div>
                                        @*PopContext*@
                                        <div class="col-sm-2">
                                            OrderNo
                                        </div>
                                        @*Qty*@
                                        <div class="col-sm-2 text-right">
                                            Qty
                                        </div>
                                        <div class="col-sm-3 text-right">
                                            Deal Qty
                                        </div>

                                        @*Remark*@
                                        <div class="col-sm-2">
                                            Remark
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xs-1">

                                </div>
                            </div>

                        </div>
                        <div class="panel-info" id="gbody">


                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}



@if ((ViewBag.Mode == "Add") || (ViewBag.Mode == "Edit"))
{

    <script type="text/javascript">

        $("#DocNo").on("change", function () {
            $(this).DuplicateCheckForCreate({ name: 'PurchaseGoodsReceiptHeader', value: $(this).val(), doctype: $("#DocTypeId").val() });
        });


        @*$( "#acwaybills" ).autocomplete({
            change: function( event, ui ) {

                if (ui.item== null || ui.item.value == undefined) {
                    $("#acwaybills").val("");
                    $('#PurchaseWaybillId').val("");
                }


                if($("#acwaybills").val()=="")
                {
                    $('#PurchaseWaybillId').val("");
                }
            }
        });


        $("#acwaybills").autocomplete({
            source: function(request,response){
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetPendingRoadWayBills"))",
                    data: { SupplierId: $("#SupplierId").val() },
                    success: function (data) {

                        var cachearray = data.error ? [] : $.map(data, function(m) {
                            return {
                                value: m.DocNo,
                                key: m.RoadPermitFormId,
                            };
                        });
                        response(cachearray);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Pending Road Permit forms.' + thrownError);
                    }
                });
            },
            appendTo:$('body'),
            select: function(event, ui) {
                // prevent autocomplete from updating the textbox
                // navigate to the selected item's url
                if($("#acwaybills").val()=="")
                {
                    $('#PurchaseWaybillId').val("");
                }
                else
                    $("#PurchaseWaybillId").val(ui.item.key);

            },

        }).data("ui-autocomplete")._renderItem = function(ul, item) {
            var $a = $("<a></a>");
            $("<strong></strong>").text(item.value).appendTo($a);
            $("<br />").appendTo($a);

            return $("<li></li>").append($a).appendTo(ul);
        }

        $("#acwaybills").bind("focus",function(){
            $(this).keydown();
        })

        $( "#acwaybills" ).autocomplete({
            change: function( event, ui ) {

                if (ui.item== null || ui.item.value == undefined) {
                    $("#acwaybills").val("");
                    $('#RoadPermitFormId').val("");
                }


                if($("#acwaybills").val()=="")
                {
                    $('#RoadPermitFormId').val("");
                }
            }
        });


        $("#acroadpermitforms").autocomplete({
            source: function(request,response){
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetPendingRoadPermitForms"))",
                    data: { SupplierId: $("#SupplierId").val() },
                    success: function (data) {

                        var cachearray = data.error ? [] : $.map(data, function(m) {
                            return {
                                value: m.DocNo,
                                key: m.RoadPermitFormId,
                            };
                        });
                        response(cachearray);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Pending Road Permit forms.' + thrownError);
                    }
                });
            },
            appendTo:$('body'),
            select: function(event, ui) {
                // prevent autocomplete from updating the textbox
                // navigate to the selected item's url
                if($("#acroadpermitforms").val()=="")
                {
                    $('#RoadPermitFormId').val("");
                }
                else
                    $("#RoadPermitFormId").val(ui.item.key);

            },

        }).data("ui-autocomplete")._renderItem = function(ul, item) {
            var $a = $("<a></a>");
            $("<strong></strong>").text(item.value).appendTo($a);
            $("<br />").appendTo($a);

            return $("<li></li>").append($a).appendTo(ul);
        }

        $("#acroadpermitforms").bind("focus",function(){
            $(this).keydown();
        })

        $( "#acgatein" ).autocomplete({
            change: function( event, ui ) {

                if (ui.item== null || ui.item.value == undefined) {
                    $("#acgatein").val("");
                    $('#GateInId').val("");
                }


                if($("#acgatein").val()=="")
                {
                    $('#GateInId').val("");
                }
            }
        });


        $("#acgatein").autocomplete({
            source: function(request,response){
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetPendingGateIns"))",
                    data: { SupplierId: $("#SupplierId").val() },
                    success: function (data) {

                        var cachearray = data.error ? [] : $.map(data, function(m) {
                            return {
                                value: m.DocNo,
                                key: m.GateInId,
                            };
                        });
                        response(cachearray);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Pending Orders.' + thrownError);
                    }
                });
            },
            appendTo:$('body'),
            select: function(event, ui) {
                // prevent autocomplete from updating the textbox
                // navigate to the selected item's url
                if($("#acgatein").val()=="")
                {
                    $('#GateInId').val("");
                }
                else
                    $("#GateInId").val(ui.item.key);

            },

        }).data("ui-autocomplete")._renderItem = function(ul, item) {
            var $a = $("<a></a>");
            $("<strong></strong>").text(item.value).appendTo($a);
            $("<br />").appendTo($a);

            return $("<li></li>").append($a).appendTo(ul);
        }

        $("#acgatein").bind("focus",function(){
            $(this).keydown();
        })

        $( "#acroadpermitforms" ).autocomplete({
            change: function( event, ui ) {

                if (ui.item== null || ui.item.value == undefined) {
                    $("#acroadpermitforms").val("");
                    $('#RoadPermitFormId').val("");
                }


                if($("#acroadpermitforms").val()=="")
                {
                    $('#RoadPermitFormId').val("");
                }
            }
        });


        $("#acroadpermitforms").autocomplete({
            source: function(request,response){
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetPendingRoadPermitForms"))",
                    data: { SupplierId: $("#SupplierId").val() },
                    success: function (data) {

                        var cachearray = data.error ? [] : $.map(data, function(m) {
                            return {
                                value: m.DocNo,
                                key: m.RoadPermitFormId,
                            };
                        });
                        response(cachearray);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Pending Road Permit forms.' + thrownError);
                    }
                });
            },
            appendTo:$('body'),
            select: function(event, ui) {
                // prevent autocomplete from updating the textbox
                // navigate to the selected item's url
                if($("#acroadpermitforms").val()=="")
                {
                    $('#RoadPermitFormId').val("");
                }
                else
                    $("#RoadPermitFormId").val(ui.item.key);

            },

        }).data("ui-autocomplete")._renderItem = function(ul, item) {
            var $a = $("<a></a>");
            $("<strong></strong>").text(item.value).appendTo($a);
            $("<br />").appendTo($a);

            return $("<li></li>").append($a).appendTo(ul);
        }

        $("#acroadpermitforms").bind("focus",function(){
            $(this).keydown();
        })*@

        //Reloading the table contents on modal hide
        $('#myModal').on('hidden.bs.modal', function () {
            LoadProducts();
        });

        $(document).ready(function () {
            enableModalTransitions();
        })


        ////To focus on the first element on modal load
        //$('#myModal').on('shown.bs.modal', function () {
        //    $("#ProductUidId").focus();
        //});

        ////For Populating Modal PopUp on DoubleClick Of Row
        //$('#gbody').on("dblclick",'.grid-body',function(){
        //    var text = $(this).find(".id").val();
        //    var editurl=$(this).find('a[edit]').attr('href');
        //    $('#myModalContent').load(editurl, function () {
        //        //alert('2');
        //        $('#myModal').modal({
        //            backdrop: 'static',
        //            keyboard: true
        //        }, 'show');

        //        bindForm1(this);
        //    });
        //});

        ////For Handling Modal PopUp on Clicking Delete Icon
        //$('#gbody').on("click",'a[Detail]', function (e) {
        //    $('#myModalContent').load(this.href, function (response, status, xhr) {
        //        //alert('2');
        //        if ( status == "error" ) {
        //            var msg = "Sorry but there was an error: ";
        //        }
        //        else
        //        {
        //            $('#myModal').modal({
        //                backdrop: 'static',
        //                keyboard: true
        //            }, 'show');

        //            bindForm1(this);}
        //    });
        //    return false;
        //});

        ////For Handling Modal PopUp on Clicking Delete Icon
        //$('#gbody').on("click",'a[delete]', function (e) {
        //    $('#myModalContent').load(this.href, function () {
        //        //alert('2');
        //        $('#myModal').modal({
        //            backdrop: 'static',
        //            keyboard: true
        //        }, 'show');

        //        bindForm1(this);
        //    });
        //    return false;
        //});


        ////For posting the data through ajax and render the contents sent back from the server
        //function bindForm1(dialog) {
        //    //alert("binding");
        //    $('form#modform', dialog).submit(function () {
        //        //alert(this.action);
        //        $.ajax({
        //            url: this.action,
        //            type: this.method,
        //            data: $(this).serialize(),
        //            success: function (result) {
        //                if (result.success) {
        //                    $('#myModal').modal('hide');
        //                    //Refresh
        //                    //location.reload();
        //                    //alert('Data Saved');
        //                }else if(!result.success)
        //                {
        //                    $('#myModalContent').html(result);
        //                    bindForm1();
        //                }
        //                else {
        //                    $('#myModalContent').html(result);
        //                    bindForm1();
        //                }
        //            }
        //        });
        //        return false;
        //    });

        //}

    </script>


}

<script type="text/javascript">
    $(document).ready(function () {

        //Calling the function to load the table data/ Line information
        LoadProducts();

        //Adding Hidden Input Fields
        AddFields();

    });


    //CustomSelectFunction($("#SupplierId"), '/ComboHelpList/GetSuppliers', '/ComboHelpList/SetSingleSupplier', ' ', false, 1);
    CustomSelectFunction($("#SupplierId"), '/PurchaseGoodsReceiptHeader/GetCustomPerson', '/ComboHelpList/SetSinglePerson', ' ', false, 1, $('#DocTypeId').val());
    CustomSelectFunction($("#GodownId"), '/ComboHelpList/GetSiteGodown', '/ComboHelpList/SetSingleGodown', ' ', false, 1);

    var id='@Model.PurchaseGoodsReceiptHeaderId';
    if(id==null||id==0)
    {
        $(document).find('a#btnCreate').removeAttr('href').removeAttr('data-modal');
        $(document).find('a#btnCreateF').removeAttr('href').removeAttr('data-modal');
        
        $("#btnCreateF").attr('disabled','disabled');
    }



    //Loading the Table data or Line Information
    function LoadProducts() {
        var DomainName='@System.Configuration.ConfigurationManager.AppSettings["AdminSetupDomain"]';
        var SelectedRecord='@ViewBag.DocLineId';
        var groupId='@Model.PurchaseGoodsReceiptHeaderId';
        var status='@Model.Status';
        var link="/PurchaseGoodsReceiptLine/Index/"+groupId;
        var QtyCount=0;
        var DQtyCount=0;
        var unit=true;
        var prevunit;
        var dunit=true;
        var prevdunit;
        var decimal=0;
        var ddecimal = 0;
        var LineEditUrl = "";
        var LineDeleteUrl = "";
        if (status == StatusContstantsEnum.Drafted || status == StatusContstantsEnum.Import)
        {
            LineEditUrl="/PurchaseGoodsReceiptLine/_ModifyLine/";
            LineDeleteUrl="/PurchaseGoodsReceiptLine/_DeleteLine/";
        }
        else if(status==StatusContstantsEnum.Submitted || status == StatusContstantsEnum.Modified)
        {
            LineEditUrl="/PurchaseGoodsReceiptLine/_ModifyLineAfterSubmit/";
            LineDeleteUrl="/PurchaseGoodsReceiptLine/_DeleteLine_AfterSubmit/";
        }
        else {
            LineEditUrl = "/PurchaseGoodsReceiptLine/_Detail/";
            LineDeleteUrl = "/PurchaseGoodsReceiptLine/_Detail/";
        }
        $.ajax({
            url: link,
            type: "GET",
            success: function (data) {
                var row = ""
                var srno=1;
                if(data.length!=0)
                {
                    $.each(data, function (index, item) {
                        var OrderUrl=DomainName+"/Redirect/RedirectToDocument?DocTypeId="+item.OrderDocTypeId+"&DocId="+item.OrderHeaderId+"&DocLineId="+item.PurchaseOrderLineId;

                        row += " <div class='row crow grid-body' style='margin-left:0px;margin-right:0px'  id='" + item.PurchaseGoodsReceiptLineId + "'><div class='col-xs-1 row-index'><a Detail='' href='/PurchaseGoodsReceiptLine/_Detail/" + item.PurchaseGoodsReceiptLineId + "'>" + srno + "</a><input type='hidden' class='id' value='" + item.PurchaseGoodsReceiptLineId + "' /></div><div class='col-xs-10'><div class='row'><div class='col-sm-3'>" + (item.ProductName == null ? " " : "<strong>" + item.ProductName + "</strong>") + "<br />" + (item.Specification == null ? " " : item.Specification) + "<p>" + (item.Dimension1Name == null ? " " : item.Dimension1Name + ",") + (item.Dimension2Name == null ? " " : item.Dimension2Name) + "</p><p>" + (item.ProductUidName == null ? " " : "Product UID : " + item.ProductUidName) + "</p></div><div class='col-sm-2'>" + (item.PurchaseOrderDocNo == null ? " " : "<a href='" + OrderUrl + "' style='color:black' class='nav'> <span class='small' style='font-weight:bold'>Order No:" + item.PurchaseOrderDocNo + "</span></a>") + "</div><div class='col-sm-2 text-right'>" + (item.Qty == null ? " " : item.Qty.toFixed(item.unitDecimalPlaces)) + "<br /> <div><small>" + (item.UnitName == null ? " " : item.UnitName) + "</small></div>   </div> <div class='col-sm-3 text-right'>" + (item.DealQty == null ? " " : item.DealQty.toFixed(item.DealunitDecimalPlaces)) + "<br /> <div><small>" + (item.DealUnitName == null ? " " : item.DealUnitName) + "</small></div></div> <div class='col-sm-2'>" + (item.Remark == null ? " " : item.Remark + "<br />") + (item.LotNo == null ? " " : "Lot-No:" + item.LotNo) + "</div></div></div><div class='col-xs-1'><a class='glyphicon glyphicon-trash icon-Cus-Size' data-modal='' data-detailDisabled='true' delete='' href='" + LineDeleteUrl + item.PurchaseGoodsReceiptLineId + "'></a>          <a  edit='' href='" + LineEditUrl + item.PurchaseGoodsReceiptLineId + "'></a></div></div><hr style='margin-top:0px;margin-bottom:0px'/></div>";
                        QtyCount+=item.Qty;
                        DQtyCount+=item.DealQty;
                        if(srno!=1)
                        {
                            if(item.UnitName==prevunit)
                            {}
                            else
                            {unit=false;}
                            if(item.DealUnitName==prevdunit)
                            {}
                            else
                            {dunit=false;}
                        }
                        if(decimal<item.unitDecimalPlaces){decimal=item.unitDecimalPlaces;}
                        if(ddecimal<item.DealunitDecimalPlaces){ddecimal=item.DealunitDecimalPlaces;}
                        srno++;
                        prevunit=item.UnitName;
                        prevdunit=item.DealUnitName;
                    });
                    row+="<div class='row tfooter' style='padding-top:10px;'><div class='col-xs-1'></div><div class='col-xs-10'><div class='row'>  <div class='col-sm-3'><strong>Total</strong></div><div class='col-sm-2'></div><div class='col-sm-2 text-right'><strong>"+ ((unit==true)?QtyCount.toFixed(decimal)+"<br /><small>"+prevunit:QtyCount.toFixed(decimal))+"</small></strong></div> <div class='col-sm-3 text-right'><strong>"+ ((dunit==true)?DQtyCount.toFixed(ddecimal)+"<br /><small>"+prevdunit:DQtyCount.toFixed(ddecimal))+"</small></strong></div> <div class=col-sm-2></div><div class='col-sm-2'></div></div></div><div class='col-xs-1'></div></div>"

                }
                else
                {

                }
                $("#gbody").html(row);
                if(SelectedRecord && SelectedRecord!=0)
                {
                    var Id="#"+SelectedRecord
                    NavigateToLineRecord(Id);}
            },
            error: function (result) {
                alert("Error");
            }
        });
    }

</script>



@if ((ViewBag.Mode != "Add") && (ViewBag.Mode != "Edit"))
{
    <script type="text/javascript">

        $(document).ready(function () {
            DisablePageNavigation();
        })

        //RemoveFields();

        //function RemoveFields(){
        //    //Disabling input fields
        //    $(':input:not(:submit,#IsContinue)').attr('disabled','disabled');

        //    //Removing all the events from the newly created lines
        //    $('#gbody').unbind();

        //    //Removing Add New Row ActionLink
        //    $('a#btnCreate').parents('h5')[0].remove();


        //    //Preventing the click event on newly created elements
        //    $(document).on('click','#gbody a:not(".nav")',function(event){
        //        event.preventDefault();
        //    })
        //    //Removing the action link from the form so that the request will be redirected to the Submit function in the controller instead of the hardcoded path
        //    $('form:last').prop('action','');
        //}


    </script>
}

@if ((Model.Status == (int)ActivityTypeContants.Modified || Model.Status == (int)ActivityTypeContants.Submitted)
    && (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue" || ViewBag.transactionType == "review" || ViewBag.transactionType == "ReviewContinue"))
{
    <script type="text/javascript">

        $(document).ready(function () {
            enableActivityLogReason();
        })

        //var href = '/ActivityLog/LogEditReason';
        //var $btnClicked;
        //$(':submit').bind('click', function () {
        //    $btnClicked = $(this);
        //    $('#myModalContent').load(href, function () {

        //        $('#myModal').modal({
        //            backdrop: 'static',
        //            keyboard: true
        //        }, 'show');

        //        bindForm1(this);
        //    });

        //    return false;
        //})

        //function bindForm1(dialog) {

        //    $('#modformr', dialog).submit(function () {

        //        $.ajax({
        //            url: this.action,
        //            type: this.method,
        //            data: $(this).serialize(),
        //            success: function (result) {
        //                if (result.success) {
        //                    $('#myModal').modal('hide');

        //                    $(':submit').unbind();

        //                    $('input[name="UserRemark"]').val(result.UserRemark);

        //                    $btnClicked.trigger('click');

        //                } else {
        //                    $('#myModalContent').html(result);
        //                    bindForm1();
        //                }
        //            }
        //        });
        //        return false;
        //    });

        //}

    </script>

}

@*<script type="text/javascript">
    $('a#PrintRecord').click(function (e) {

        var editiiid = $('#PurchaseGoodsReceiptHeaderId').val();

        var Status = $('#Status').val();

        var url;
        if (Status == StatusContstantsEnum.Drafted || Status == StatusContstantsEnum.Import) {
            url = '@Url.Action("Print", "PurchaseGoodsReceiptHeader")' + "/" + editiiid;
        }
        else if (Status == StatusContstantsEnum.Submitted || Status == StatusContstantsEnum.Modified ) {
            url = '@Url.Action("PrintAfter_Submit", "PurchaseGoodsReceiptHeader")' + "/" + editiiid;
        }
        else if ( Status == StatusContstantsEnum.Closed ) {
            url = '@Url.Action("PrintAfter_Approve", "PurchaseGoodsReceiptHeader")' + "/" + editiiid;
        }
        $(this).attr('href', url);
        return;
    })
</script>*@

@if (ViewBag.transactionType != null && (ViewBag.transactionType == "submitContinue" || ViewBag.transactionType == "ReviewContinue"))
{
    <script type="text/javascript">

        $(document).ready(function () {
            CreateTrasitionEffect();
        })

        //CreateTrasitionEffectForSubmit();

        //function CreateTrasitionEffectForSubmit(){

        //    //$('body').find('.container.body-content > div.row ').wrap("<div class='animsition' data-animsition-in='fade-in-right-lg' data-animsition-out='fade-out-left-lg' style='animation-duration: 1.5s; -webkit-animation-duration: 1.5s; opacity: 0;'> </div>");

        //    $('body').find('form').filter(":last").wrapInner("<div class='animsition' data-animsition-in='fade-in-right-lg' data-animsition-out='fade-out-left-lg' style='animation-duration: 1.5s; -webkit-animation-duration: 1.5s; opacity: 0;'> </div>");

        //    var script=document.createElement('script');

        //    script.setAttribute('type','text/javascript');

        //    script.text=" $(document).ready(function () {$('.animsition').animsition().one('animsition.start', function () {}).one('animsition.end', function () {$(this).find('.animsition-child').addClass('zoom-in').css({'opacity': 1});})});";

        //    $('body').append(script);

        //}
    </script>
}