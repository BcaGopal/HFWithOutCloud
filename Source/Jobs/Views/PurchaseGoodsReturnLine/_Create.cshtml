@model Model.ViewModel.PurchaseGoodsReturnLineViewModel
@using Core.Common

<style type="text/css">
    .cusleftnormal {
        border-bottom-left-radius: 0pc !important;
        border-top-left-radius: 0px !important;
    }

    .cusrightnormal {
        border-bottom-right-radius: 0px !important;
        border-top-right-radius: 0px !important;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Products</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "PurchaseGoodsReturnLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
            @Html.ValidationLog((string)TempData["CSEXCL"])
            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.PurchaseGoodsReturnHeaderId)
                @Html.HiddenFor(m => m.PurchaseGoodsReturnLineId)
                @Html.HiddenFor(m => m.PurchaseGoodsReceiptLineId)
                @Html.HiddenFor(m => m.ProductUidId)
                @Html.HiddenFor(m => m.SupplierId)
                @Html.HiddenFor(m => m.GoodsReceiptBalQty)
                @Html.HiddenFor(m=>m.DealUnitId)
                @Html.HiddenFor(m => m.UnitId)
                @Html.HiddenFor(m => m.GodownId)
                @Html.HiddenFor(m => m.PurchGoodsReceiptSettings.isPostedInStockVirtual)                
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                
                <div class="row">
                    <div class="col-md-6" style="display:@(Model.PurchGoodsReceiptSettings.isVisibleProductUID ? "" : "none")">
                        @Html.HiddenFor(m => m.PurchGoodsReceiptSettings.isVisibleProductUID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductUidId, "ProductUId", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductUidName, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductUidId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, "Product", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PurchaseGoodsReceiptLineId, "Purchase Receipt", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBox(" ", " ", new { @class = "form-control", @id = "acreceipts" })
                                @Html.ValidationMessageFor(model => model.PurchaseGoodsReceiptLineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                
                    <div class="col-md-6" style="display:@(Model.PurchGoodsReceiptSettings.isVisibleDimension1 ? "" : "none")">
                        @Html.HiddenFor(m => m.PurchGoodsReceiptSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Name, "Dimension1", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Name, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension1Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6" style="display:@(Model.PurchGoodsReceiptSettings.isVisibleDimension2 ? "" : "none")">
                        @Html.HiddenFor(m => m.PurchGoodsReceiptSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Name, "Dimension2", new { @class = "control-label col-xs-4" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Name, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension2Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>                  

                
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, "Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px;">
                                
                            <div class="col-xs-7" style="padding-right:0px;">
                                @Html.TextBoxFor(model => model.Qty, new { @class = "form-control required cusrightnormal" })
                                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-5" style="padding-left:0px">
                                @Html.TextBoxFor(m => m.UnitName, new { @class = "form-control col-xs-2 cusleftnormal", @readonly = "true" })
                            </div>
                                </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            <div ></div>
                            @Html.LabelFor(model => model.DealUnitId, "Deal Unit & Multiplier", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10" style="padding:0px;">
                                <div class="col-xs-7" style="padding-right:0px;">
                                    @Html.TextBoxFor(m => m.DealUnitName, new { @class = "form-control col-xs-2 cusleftnormal", @readonly = "true" })
                                    @Html.ValidationMessageFor(model => model.DealUnitId, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-5" style="padding-left:0px">
                                    @Html.TextBoxFor(model => model.UnitConversionMultiplier, new { @class = "form-control col-xs-7 required", @readonly = true })
                                </div>
                            </div>
                        </div>
                    </div>

                                

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealQty, "Deal Qty", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control required cusrightnormal", @readonly = true })
                                @Html.ValidationMessageFor(model => model.DealQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Weight, "Weight", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Weight, new { @class = "form-control required cusrightnormal", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextAreaFor(model => model.Remark, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>



                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}

                </div>

            </div>
        }
    </div>
</div>

<script type="text/javascript">

    //var cachearray={};

    $(document).ready(function () {

        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetSingleProducts', 'Enter Product', false, 3);

        var DocID = $('#PurchaseGoodsReturnHeaderId', '.modal-body').val();
        var URL = '/PurchaseGoodsReturnLine/GetCustomProducts/'+ DocID;
        $("#ProductId").select2({
            minimumInputLength: 1,
            multiple: false,
            ajax: {
                url: URL,
                dataType: 'json',
                type: "GET",
                quietMillis: 1000,
                data: function (term) {
                    return {
                        term: term,
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.PropFirst,
                                id: item.Id
                            }
                        })

                    };
                }
            },
            initSelection: function (element, callback) {

                var xval = element.val();
                if (xval != 0) {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "/ComboHelpList/SetSingleProducts",
                        data: { Ids: element.val() },
                        success: function (data) {
                            callback(data);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to Retrive Qty' + thrownError);
                        }
                    })
                }
                //callback([{ id: "1", text: "arpit" }, { id: "2", text: "akash" }]);
            }


        });


        $("#ProductId").select2("focus");




        $('#ProductUidName').on('change',function(e){
            var data=InitializePopover(this,$("#ProductUidName").val(),true,$('#GodownId').val(),TransactionTypeConstantsEnum.Issue);
            if(!data.status)
            {
                $(this).popover('show');
                setTimeout(function() {$('#ProductUidName').popover('destroy');if(!$('#ProductId').val()){ $('#ProductUidName').val('') }else{$('#ProductId').trigger('change');  }},10000);
                $('#PurchaseGoodsReceiptLineId').val(0);
                $('#acreceipts').val("").removeAttr('disabled');
            }
            else
            {
                //alert(data.data.GenLineId);
                //$('#PurchaseGoodsReceiptLineId').val(data.data.GenLineId);
                //$('#autocompleteorder').val(data.data.GenDocNo).attr('disabled', 'disabled');

                if($('#ProductUidId').val()!="" && $('#ProductUidId').val()!=null)
                {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetProductUidTransactionDetail"))",
                        data: { ProductUidId: $("#ProductUidId").val() },
                        success: function (data) {
                            $('#PurchaseGoodsReceiptLineId').val(data.DocLineId);
                            $('#acreceipts').val(data.DocNo).attr('disabled', 'disabled');
                            GetLineDetail();
                            //alert($('#PurchaseGoodsReceiptLineId').val())
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve product details.' + thrownError);
                        }
                    });
                }
                
            }
        })



        $('.datepicker').datepicker({
            format: 'dd/MM/yyyy',
            "setDate": new Date(),
            "autoclose": true
        })

        var id=@Model.PurchaseGoodsReturnLineId;
        if(id>0)
        {
            var tex='@Model.PurchaseGoodsReceiptHeaderDocNo';
            $("#acreceipts").val(tex);
            //LockFields();
            $('#ProductId').attr('readonly','true');
            $('#acreceipts').attr('disabled','disabled');
            $('#ProductUidName').attr('readonly', 'true');
            if($('#ProductUidId').val())
            {
                $('#Qty').attr('readonly','true');
                $('#LotNo').attr('readonly', 'true');
            }
        }

        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/PurchaseGoodsReturnLine/DeletePost';
                $('form#modform').attr('action',url);
                return;
            }
            else
            {
                return false;
            }
        })
    });

    function LockFields(){
        $("#Dimension1Name").attr('readonly','true');
        $("#Dimension2Name").attr('readonly','true');
        $('#Qty').attr('readonly','true');
        $('#LotNo').attr('readonly','true');
        $('#Specification').attr('readonly','true');
    }
    function UnLockFields(){
        $("#Dimension1Name").removeAttr('readonly');
        $("#Qty").removeAttr('readonly');
        $("#Dimension2Name").removeAttr('readonly');
        $("#LotNo").removeAttr('readonly');
        $("#Specification").removeAttr('readonly');
    }

    $( "#acreceipts" ).autocomplete({
        change: function( event, ui ) {
            if (ui.item== null || ui.item.value == undefined) {
                $("#acreceipts").val("");
                $('#PurchaseGoodsReceiptLineId').val("");
            }


            if($("#acreceipts").val()=="")
            {
                $('#PurchaseGoodsReceiptLineId').val("");
            }

            if($('#PurchaseGoodsReceiptLineId').val()!="")
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetReceiptDetail"))",
                    data: { ReceiptLineId: $("#PurchaseGoodsReceiptLineId").val() },
                    success: function (data) {
                        $('#Qty').val(data.Qty);
                        $('#UnitName').val(data.UnitName);
                        $('#GoodsReceiptBalQty').val(data.Qty);
                        $('#UnitConversionMultiplier').val(data.UnitConversionMultiplier);                        
                        $('#DealUnitId').val(data.DealUnitId);
                        $('#DealUnitName').val(data.DealUnitName);
                        $('#Specification').val(data.Specification);
                        $('#LotNo').val(data.LotNo);
                        $("#Dimension1Name").val(data.Dimension1Name)
                        $("#Dimension2Name").val(data.Dimension2Name)
                        CalculateRate();
                        //LockFields();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
            else if($('#PurchaseGoodsReceiptLineId').val()=="")
            {
                $('#Qty').val(0);
                $('#UnitConversionMultiplier').val(0);
                $('#Rate').val(0);
                $('#DealUnitId').val('');
                $('#DealUnitName').val('');
                $('#GoodsReceiptBalQty').val(0);
                $('#LotNo').val("");
                $('#UnitName').val('');
                $('#Specification').val("");
                $("#Dimension1Name").val("");
                $("#Dimension2Name").val("");
                //UnLockFields();
                CalculateRate();
            }
        }
    });





    $(function() {
        $("#acreceipts").autocomplete({
            source: function(request,response){
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetPendingReceipts"))",
                    data: { ProductId: $("#ProductId").val(),PurchaseGoodsReturnHeaderId:$("#PurchaseGoodsReturnHeaderId",".modal-body").val() },
                    success: function (data) {

                        var cachearray = data.error ? [] : $.map(data, function(m) {
                            return {
                                value: m.DocNo,
                                key: m.PurchaseGoodsReceiptLineId,
                                dim1: m.Dimension1Name,
                                dim2:m.Dimension2Name,

                            };
                        });
                        response(cachearray);
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Pending Receipts.' + thrownError);
                    }

                });


            },
            appendTo : $("#myModalContent"),
            select: function(event, ui) {
                // prevent autocomplete from updating the textbox
                // navigate to the selected item's url
                if($("#acreceipts").val()=="")
                {
                    $('#PurchaseGoodsReceiptLineId').val("");
                }
                else
                    $("#PurchaseGoodsReceiptLineId").val(ui.item.key);

            },

        }).data("ui-autocomplete")._renderItem = function(ul, item) {
            var $a = $("<a></a>");
            $("<strong></strong>").text(item.value).appendTo($a);
            $("<br />").appendTo($a);
            (item.dim1==null)?(""):($("<span class='small'></span>").text(item.dim1+",").appendTo($a));

            (item.dim2==null)?(""):($("<span class='small'></span>").text(item.dim2).appendTo($a));

            return $("<li></li>").append($a).appendTo(ul);
        }
    });

    $("#acreceipts").bind("focus",function(){
        $(this).keydown();
    })

    $('#Qty').keyup(function () {
        ValidateQty();
        CalculateRate();
    })


    function ValidateQty(){
        if (($('#GoodsReceiptBalQty').val() - $('#Qty').val()) < 0) {
            $('#submit', '.modal-body').attr('disabled', 'disabled');
            if ($('#Qty').closest('div.col-xs-4').find('span#cerror').length == 0)
            {
                $('#Qty').parents('.col-xs-4').append("<span class='text-danger' id='cerror'>Qty exceeding InvoiceQty</span>")
            }
        }
        else
        {
            $('#submit', '.modal-body').removeAttr('disabled');
            if ($('#Qty').closest('div.col-xs-4').find('span#cerror').length > 0)
            {
                $('#Qty').closest('.col-xs-4').find('span#cerror').remove();
            }
        }
    }

    function CalculateRate(){

        $('#DealQty').val($('#UnitConversionMultiplier').val()*$('#Qty').val());      

    }


    function GetLineDetail(){            
        if( $("#PurchaseGoodsReceiptLineId").val()){
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetReceiptDetail"))",
                data: { ReceiptLineId : $("#PurchaseGoodsReceiptLineId").val() },
                success: function (data) {    
                    
                        $("#DealUnitName").val(data.DealUnitName);
                        $("#DealUnitId").val(data.DealUnitId);
                        $("#UnitId").val(data.UnitId);
                        $("#UnitName").val(data.UnitName);
                        $('#UnitConversionMultiplier').val(data.UnitConversionMultiplier);   
                        $('#Qty').val(data.Qty);
                        $('#DealQty').val(data.DealQty);
                        GetUnitConversionMultiplier.call();   
                    
            },
            error: function (xhr, ajaxOptions, thrownError) {
                //alert('Failed to retrieve product details.' + thrownError);
                alert('Failed retrieving Receipt detail.');
            }
        });
    }
    }

    function GetUnitConversionMultiplier() {

        if ($("#UnitId").val() == $("#DealUnitId").val()) {
            $("#UnitConversionMultiplier").val(1);
            Calculation.call();
        }

        else {

            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetUnitConversionDetailJson"))",
                data: { ProductId: $("#ProductId").val(), UnitId: $("#UnitId").val(), DeliveryUnitId: $("#DealUnitId").val() },

            success: function (data) {
                $("#UnitConversionMultiplier").val(data[0].Value);
                $("#DealunitDecimalPlaces").val(data[1].Value);
                Calculation.call();
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve Unit conversion details.' + thrownError);
                ProcessProgress.hide();
            }
        });
    }
    }

    function Calculation() {            
        if ($('#UnitConversionMultiplier').val() != 0) {
            $('#DealQty').val($('#Qty').val() * $('#UnitConversionMultiplier').val())
        }
    }

</script>