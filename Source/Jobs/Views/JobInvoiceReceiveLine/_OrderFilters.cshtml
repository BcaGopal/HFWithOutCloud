@model Model.ViewModel.JobInvoiceLineFilterViewModel
@using Core.Common

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Filters</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_FilterPostOrders", "JobInvoiceReceiveLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
           
            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.JobInvoiceHeaderId)
                @Html.HiddenFor(m => m.JobWorkerId)


                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-6" style="display:@((Model.JobInvoiceSettings.isVisibleJobOrder == true && Model.JobInvoiceSettings.isVisibleJobReceive == false)  ? "" : "none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleJobOrder)
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobOrderHeaderId, "Order No.", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.JobOrderHeaderId, new { @class = "form-control " })
                                @Html.ValidationMessageFor(model => model.JobOrderHeaderId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleJobReceive ? "" : "none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleJobReceive)
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobReceiveHeaderId, "Receive No.", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.JobReceiveHeaderId, new { @class = "form-control " })
                                @Html.ValidationMessageFor(model => model.JobReceiveHeaderId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label  col-md-4 col-sm-2 " })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ProductCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control " })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                <span id="status" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleDimension1 ? "" : "none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, (Model.DocumentTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label  col-md-4 col-sm-2 " })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension1Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control " })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleDimension2 ? "" : "none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, (Model.DocumentTypeSettings.Dimension2Caption ?? "Dimension2"), new { @class = "control-label  col-md-4 col-sm-2 " })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension2Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control " })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleDimension3 ? "" : "none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension3)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension3Id, (Model.DocumentTypeSettings.Dimension3Caption ?? "Dimension3"), new { @class = "control-label  col-md-4 col-sm-2 " })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension3Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension3Id, new { @class = "form-control " })
                                @Html.ValidationMessageFor(model => model.Dimension3Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleDimension4 ? "" : "none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension4)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension4Id, (Model.DocumentTypeSettings.Dimension4Caption ?? "Dimension4"), new { @class = "control-label  col-md-4 col-sm-2 " })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.Dimension4Caption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension4Id, new { @class = "form-control " })
                                @Html.ValidationMessageFor(model => model.Dimension4Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductGroupId, (Model.DocumentTypeSettings.ProductGroupCaption ?? "Product Group"), new { @class = "control-label  col-md-4 col-sm-2" })
                            @Html.HiddenFor(m => m.DocumentTypeSettings.ProductGroupCaption)
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductGroupId, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.ProductGroupId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleJobReceive ? "" : "none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ReceiveAsOnDate, "As On Date", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(m => m.ReceiveAsOnDate, "{0:dd/MMMM/yyyy}", new { @class = "datepicker form-control required" })
                                @Html.ValidationMessageFor(model => model.ReceiveAsOnDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom" name="Command:Edit" type="submit"><h2 style="margin:0px" id="submit" title="Proceed"><span class="glyphicon glyphicon-arrow-right black"></span> </h2></button>
                </div>

            </div>

        }
    </div>
</div>


<script type="text/javascript">

    $(document).ready(function () {
        CustomSelectFunction($("#ProductGroupId"), '/ComboHelpList/GetProductGroup', '/ComboHelpList/SetProductGroup', ' ', true, 0);
        CustomSelectFunction($("#JobOrderHeaderId"), '/JobInvoiceReceiveLine/GetPendingJobOrders', '/ComboHelpList/SetJobOrders', ' ', true, 0, $('#JobInvoiceHeaderId', '.modal-body').val());
        CustomSelectFunction($("#JobReceiveHeaderId"), '/JobInvoiceReceiveLine/GetPendingJobReceives', '/ComboHelpList/SetJobReceive', ' ', true, 0, $('#JobInvoiceHeaderId', '.modal-body').val());
        CustomSelectFunction($("#ProductId"), '/JobInvoiceReceiveLine/GetPendingJobOrderProducts', '/ComboHelpList/SetJobOrders', ' ', true, 0, $('#JobInvoiceHeaderId', '.modal-body').val());

        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetSingleDimension1', ' ', false, 0);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetSingleDimension2', ' ', false, 0);
        CustomSelectFunction($("#Dimension3Id"), '/ComboHelpList/GetDimension3', '/ComboHelpList/SetSingleDimension3', ' ', false, 0);
        CustomSelectFunction($("#Dimension4Id"), '/ComboHelpList/GetDimension4', '/ComboHelpList/SetSingleDimension4', ' ', false, 0);



        $('.datepicker').datepicker({
            format: 'dd/MM/yyyy',
            "setDate": new Date(),
            "autoclose": true
        })

    });

</script>