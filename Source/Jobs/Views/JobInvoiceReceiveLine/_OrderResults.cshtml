@model Model.ViewModel.JobInvoiceMasterDetailModel
@using Core.Common


<style type="text/css">
    #gbody-modal {
        height: 300px;
        overflow-y: scroll;
        width: 100%;
    }
</style>


<div class="modal-content  Custom-modal">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Orders & Quantities</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_ResultsPost", "JobInvoiceReceiveLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
            @Html.ValidationLog((string)TempData["CSEXCL"])
            @Html.AntiForgeryToken()

            <div class="form-horizontal modal-body">

                <div style="padding-right:15px">
                    <div class="row">
                        <div class="form-horizontal">
                            @Html.HiddenFor(m => m.JobInvoiceSettings.ProcessId)
                            @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension1)
                            @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension2)
                            @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension3)
                            @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension4)
                            @Html.ValidationSummary(true)


                            <div class="panel panel-default" id="grid">
                                <div class="panel-heading headrow" style="background-image: -webkit-linear-gradient(top, #428bca 0%, #428bca 100%);color:white">
                                    <div class="row grid-head">
                                        <div class="block text-left" style="width:5%">
                                            Srl.
                                        </div>
                                        <div class="block" style="width:92%">
                                            <div class="row">

                                                <div class="block" style="width:25%">
                                                    Product Name
                                                </div>

                                                <div class="block" style="width:20%">
                                                    Job Order
                                                </div>

                                                <div class="text-right block" style="width:13%">
                                                    <a href="#" id="CJobQty" style="color:white">Job<br />Qty</a>
                                                </div>

                                                <div class="block text-right" style="width:13%">
                                                    Receive<br />Loss Qty
                                                </div>

                                                <div class="block text-right" style="width:13%">
                                                    Pass<br />Deal Qty
                                                </div>

                                                <div class="block text-right" style="width:13%">
                                                    Rate<br />Lot
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="panel-info" id="gbody-modal">

                                    @{
            decimal JobQty = 0;
            decimal ReceiptQty = 0;
            decimal LossQty = 0;
            decimal PassQty = 0;
            decimal DealQty = 0;
            int MaxUnitDecPlaces = 0;
            int MaxDealUnitDecPlaces = 0;
            decimal Amount = 0;
                                    }

                                    @for (int i = 0; i < Model.JobInvoiceLineViewModel.Count(); i++)
                                    {

                                        if (MaxDealUnitDecPlaces < Model.JobInvoiceLineViewModel[i].DealUnitDecimalPlaces)
                                        {
                                            MaxDealUnitDecPlaces = Model.JobInvoiceLineViewModel[i].DealUnitDecimalPlaces;
                                        }
                                        if (MaxUnitDecPlaces < Model.JobInvoiceLineViewModel[i].UnitDecimalPlaces)
                                        {
                                            MaxUnitDecPlaces = Model.JobInvoiceLineViewModel[i].UnitDecimalPlaces;
                                        }

                                        <div class='row crow grid-body' style='margin-left:0px;margin-right:0px'>


                                            <div class='block row-index' style='width:5%'>
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].ProductId)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].DealUnitId)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].ProductName)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].Specification)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].Dimension1Name)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].Dimension2Name)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].Dimension3Name)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].Dimension4Name)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].JobOrderLineId)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].JobOrderDocNo)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].OrderBalanceQty)
                                                @Html.HiddenFor(m => m.JobInvoiceLineViewModel[i].JobInvoiceHeaderId)
                                                @Html.HiddenFor(m => m.JobInvoiceLineViewModel[i].ProductUidId)
                                                @Html.HiddenFor(m => m.JobInvoiceLineViewModel[i].ProductUidName)
                                                @Html.HiddenFor(m => m.JobInvoiceLineViewModel[i].JobWorkerId)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].CostCenterId)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].UnitId)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].SalesTaxGroupProductId)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].SalesTaxGroupPersonId)
                                                @Html.HiddenFor(m => Model.JobInvoiceLineViewModel[i].UnitConversionMultiplier, new { @class = "UConv" })
                                                @Html.HiddenFor(m => m.JobInvoiceLineViewModel[i].UnitDecimalPlaces, new { @class = "UDec" })
                                                @Html.HiddenFor(m => m.JobInvoiceLineViewModel[i].DealUnitDecimalPlaces, new { @class = "DUDec" })

                                                @(i + 1)
                                            </div>
                                            <div class='block pull-middle' style='width:94%'>

                                                <div class='row'>

                                                    <div class='block' style='width:25%'>
                                                        <strong> @Model.JobInvoiceLineViewModel[i].ProductName</strong>

                                                        <div style="margin-bottom:0px">
                                                            @{
                                        var Dim1 = (string.IsNullOrEmpty(Model.JobInvoiceLineViewModel[i].Dimension1Name) || Model.JobInvoiceSettings.isVisibleDimension1 == false) ? "" : Model.JobInvoiceLineViewModel[i].Dimension1Name + ",";
                                        var Dim2 = (string.IsNullOrEmpty(Model.JobInvoiceLineViewModel[i].Dimension2Name) || Model.JobInvoiceSettings.isVisibleDimension2 == false) ? "" : Model.JobInvoiceLineViewModel[i].Dimension2Name + ",";
                                        var Dim3 = (string.IsNullOrEmpty(Model.JobInvoiceLineViewModel[i].Dimension3Name) || Model.JobInvoiceSettings.isVisibleDimension3 == false) ? "" : Model.JobInvoiceLineViewModel[i].Dimension3Name + ",";
                                        var Dim4 = (string.IsNullOrEmpty(Model.JobInvoiceLineViewModel[i].Dimension4Name) || Model.JobInvoiceSettings.isVisibleDimension4 == false) ? "" : Model.JobInvoiceLineViewModel[i].Dimension4Name;
                                                            }

                                                            @Dim1 @Dim2 @Dim3 @Dim4

                                                        </div>
                                                        <div>
                                                            ProductUId:<strong>@Model.JobInvoiceLineViewModel[i].ProductUidName</strong>
                                                        </div>

                                                    </div>
                                                    <div>
                                                        <div class='block' style='width:20%'>
                                                            @(Model.JobInvoiceLineViewModel[i].JobOrderDocNo)<br />
                                                            <a href="#" class="COrderBalanceQty"><span class="label label-warning ">Qty:@string.Format("{" + "0:0.".PadRight(@Model.JobInvoiceLineViewModel[i].UnitDecimalPlaces + 4, '0') + "}", Model.JobInvoiceLineViewModel[i].OrderBalanceQty)</span></a>
                                                            <input type="hidden" value="@Model.JobInvoiceLineViewModel[i].OrderBalanceQty" class="OrderBalanceQty" />
                                                            <div>
                                                                <small>@Model.JobInvoiceLineViewModel[i].OrderDocDate.ToString("dd/MMM/yyyy")</small>
                                                            </div>
                                                        </div>

                                                        <div class='block text-right pull-middle' style='width:13%'>
                                                            @Html.TextBoxFor(m => Model.JobInvoiceLineViewModel[i].JobQty, "{" + "0:0.".PadRight(@Model.JobInvoiceLineViewModel[i].UnitDecimalPlaces + 4, '0') + "}", new { @class = "form-control text-right JobQuantity multiple-modal" })
                                                            @Html.ValidationMessageFor(m => m.JobInvoiceLineViewModel[i].JobQty)
                                                            @{JobQty += Model.JobInvoiceLineViewModel[i].JobQty;}
                                                        </div>

                                                        <div class='block text-right pull-middle' style='width:13%'>
                                                            @Html.TextBoxFor(m => Model.JobInvoiceLineViewModel[i].ReceiveQty, "{" + "0:0.".PadRight(@Model.JobInvoiceLineViewModel[i].UnitDecimalPlaces + 4, '0') + "}", new { @class = "form-control text-right Quantity ReceiveQty multiple-modal", @style = "display:inline;margin-bottom:3px" })
                                                            @{ReceiptQty += Model.JobInvoiceLineViewModel[i].ReceiveQty;}
                                                            <br />
                                                            @Html.TextBoxFor(m => Model.JobInvoiceLineViewModel[i].LossQty, "{" + "0:0.".PadRight(@Model.JobInvoiceLineViewModel[i].UnitDecimalPlaces + 4, '0') + "}", new { @class = "form-control text-right Quantity LossQty multiple-modal", @style = "display:inline" })
                                                            @{LossQty += Model.JobInvoiceLineViewModel[i].LossQty;}
                                                        </div>
                                                        <div class='block text-right pull-middle' style='width:13%'>
                                                            @Html.TextBoxFor(m => Model.JobInvoiceLineViewModel[i].PassQty, "{" + "0:0.".PadRight(@Model.JobInvoiceLineViewModel[i].UnitDecimalPlaces + 4, '0') + "}", new { @class = "form-control text-right PassQty multiple-modal", @style = "display:inline;margin-bottom:3px" })
                                                            @{PassQty += Model.JobInvoiceLineViewModel[i].PassQty;}
                                                            <br />
                                                            @Html.TextBoxFor(m => Model.JobInvoiceLineViewModel[i].DealQty, "{" + "0:0.".PadRight(@Model.JobInvoiceLineViewModel[i].DealUnitDecimalPlaces + 4, '0') + "}", new { @class = "form-control text-right Quantity DealQty multiple-modal", @style = "display:inline" })
                                                            @{DealQty += Model.JobInvoiceLineViewModel[i].DealQty;}
                                                        </div>
                                                        <div class='block text-right pull-middle' style='width:13%'>
                                                            @Html.TextBoxFor(m => Model.JobInvoiceLineViewModel[i].Rate, new { @class = "form-control text-right Rate multiple-modal", @style = "display:inline;margin-bottom:3px" })
                                                            <br />
                                                            @Html.TextBoxFor(m => m.JobInvoiceLineViewModel[i].LotNo, new { @class = "form-control multiple-modal", @style = "display:inline" })
                                                        </div>
                                                        @{Amount += Model.JobInvoiceLineViewModel[i].Rate * Model.JobInvoiceLineViewModel[i].DealQty;}
                                                    </div>

                                                </div>

                                            </div>

                                        </div>
                                        <hr style='margin-top:0px;margin-bottom:0px' />

                                    }

                                </div>
                            </div>

                            <div class="row grid-head" style="margin-left:0px;margin-right:0px">
                                <div class="block text-left" style="width:5%">

                                </div>
                                <div class="block" style="width:92%">
                                    <div class="row">
                                        @*ProductInfo*@
                                        <div class='block' style='width:25%'>
                                            <strong>Total</strong>

                                        </div>
                                        <div class='block text-center' style='width:20%'>

                                        </div>
                                        @*Qty*@
                                        <div class='block text-right' style='width:13%'>
                                            <strong><span id="JobQty">@string.Format("{" + "0:0.".PadRight(MaxUnitDecPlaces + 4, '0') + "}", JobQty)</span></strong>
                                        </div>
                                        <div class='block text-right' style='width:13%'>
                                            <strong><span id="RecQty">@string.Format("{" + "0:0.".PadRight(MaxUnitDecPlaces + 4, '0') + "}", ReceiptQty)</span></strong><br />
                                            <strong><span id="LossQty">@string.Format("{" + "0:0.".PadRight(MaxUnitDecPlaces + 4, '0') + "}", LossQty)</span></strong>
                                        </div>
                                        <div class='block text-right' style='width:13%'>
                                            <strong><span id="PassQty">@string.Format("{" + "0:0.".PadRight(MaxUnitDecPlaces + 4, '0') + "}", PassQty)</span></strong><br />
                                            <strong><span id="DealQty">@string.Format("{" + "0:0.".PadRight(MaxUnitDecPlaces + 4, '0') + "}", DealQty)</span></strong>
                                        </div>
                                        <div class='block text-right' style='width:13%'>
                                            <strong><span id="Amount">@string.Format("{" + "0:0.".PadRight(2 + 4, '0') + "}", Amount)</span></strong>
                                        </div>
                                    </div>
                                </div>

                            </div>

                        </div>
                    </div>
                </div>
                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px" title="Proceed"><span class="glyphicon glyphicon-floppy-disk black black"></span> </h2></button>
                </div>
            </div>
        }
    </div>
</div>











<script type="text/javascript">

    var reset = false;
    var IsSaved = false;


    $('#modform').bind('submit', function (event) {

        if (!IsSaved) {
            if (!ValidateData()) {
                return false;
            }
            IsSaved = true;
            $('button:submit').attr('disabled', 'disabled');
            return IsSaved;
        }
        else {
            return false;
        }


    });


    function ValidateData() {
        var ValidationMessage = "";

        //Client Side Validaion.....

        return (ValidationMessage == "");

    }


    $('.JobQuantity').focusout(function () {

        var $Block = $(this).closest('div.row');
        var $HBlock = $(this).closest('div.row.crow');
        var DecPlaces = $HBlock.find('input.UDec:first').val();

        var qty = parseFloat($(this).val());
        $(this).val(qty.toFixed(DecPlaces));
        $Block.find('.ReceiveQty').val(qty.toFixed(DecPlaces));
        $Block.find('.PassQty').val(qty.toFixed(DecPlaces));
        Calculation(this);
        ValidateData(this);
    });


    $('.DealQty,.PassQty,.Rate,.JobQuantity,.ReceiveQty,.LossQty').keyup(function () {
        Calculation(this);
    });

    $('.DealQty,.PassQty,.ReceiveQty,.LossQty').focusout(function () {
        ValidateData(this);
    });


    //$('.Quantity').change(function () {

    //    var $Block = $(this).closest('div.row');
    //    var $HBlock = $(this).closest('div.row.crow');
    //    var DecPlaces = $HBlock.find('input.UDec:first').val();

    //    //if (parseFloat($Block.find('.ReceiveQty').val()) <= parseFloat($Block.find('.JobQuantity').val())) {
    //    $Block.find('.LossQty').val(parseFloat($Block.find('.JobQuantity').val() - $Block.find('.ReceiveQty').val()).toFixed(DecPlaces))

    //})

    function Calculation(obj) {
        var $Block = $(obj).closest('div.row');
        var $HBlock = $(obj).closest('div.row.crow');
        var DecPlaces = $HBlock.find('input.UDec:first').val();
        var DDecPlaces = $HBlock.find('input.DUDec:first').val();
        var UConveMul = $HBlock.find('input.UConv:first').val();

        $Block.find('.LossQty').val(parseFloat($Block.find('.JobQuantity').val() - $Block.find('.ReceiveQty').val()).toFixed(DecPlaces))

        if (UConveMul != 0) {
            $Block.find('.DealQty').val(parseFloat($Block.find('.PassQty').val() * UConveMul).toFixed(DDecPlaces));
        }
        CalculateTotalAmount();

    }


    $('.PassQty').change(function () {

        ValidateData(this);

    })



    function ValidateData(obj) {

        var $Block = $(obj).closest('div.row');
        var $HBlock = $(obj).closest('div.row.crow');
        var DecPlaces = $HBlock.find('input.UDec:first').val();
        var ValidationMessage = "";

        //Check that Pass Qty can not exceed Job Qty.
        if (parseFloat($Block.find('.JobQuantity').val() - $Block.find('.PassQty').val()) < 0) {

            ValidationMessage = "PassQty exceeding JobQty";

        }


        //Check that Receive Qty can not exceed Job Qty.
        if (parseFloat($Block.find('.JobQuantity').val() - $Block.find('.ReceiveQty').val()) < 0) {

            ValidationMessage = "ReceiveQty exceeding JobQty";

        }



        //Check that Job Qty can not exceed Order Balance Qty.
        if (($Block.find('.OrderBalanceQty').val() - $Block.find('.JobQuantity').val()) < 0) {

            ValidationMessage = "JobQty exceeding Order Balance Qty";

        }

        if (!ValidationMessage == "") {
            $('#submit', '.modal-body').attr('disabled', 'disabled');
            if (!$('#modform').find('.modal-body #errormsg').length) {
                $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >" + ValidationMessage + "</span></div>")
            }
            else
                $('#modform').find('.modal-body #errormsg').text(ValidationMessage);
        }
        else {
            $('#submit', '.modal-body').removeAttr('disabled');
            $('#modform').find('#errormsg').parent().remove();
        }

        return (ValidationMessage == "");

    }

    function CalculateTotalAmount() {
        var Amount = 0;
        var JobQty = 0;
        var ReceiveQty = 0;
        var LosttQty = 0;
        var PassQty = 0;
        var DealQty = 0;
        var UnitDecPlaces = 0;
        var DealUnitDecPlaces = 0;
        $('.row.crow.grid-body', '.modal-body').each(function () {

            if ($(this).find('input.Rate').val()) {
                Amount += (parseFloat($(this).find('input.Rate').val()) * parseFloat($(this).find('input.DealQty').val()));
            }
            JobQty += (parseFloat($(this).find('input.JobQuantity').val()));
            ReceiveQty += (parseFloat($(this).find('input.ReceiveQty').val()));
            LosttQty += (parseFloat($(this).find('input.LossQty').val()));
            PassQty += (parseFloat($(this).find('input.PassQty').val()));
            DealQty += (parseFloat($(this).find('input.DealQty').val()));

            if (parseFloat($('input.UDec').val()) > UnitDecPlaces)
                UnitDecPlaces = parseFloat($('input.UDec').val());
            if (parseFloat($('input.DUDec').val()) > DealUnitDecPlaces)
                DealUnitDecPlaces = parseFloat($('input.DUDec').val());

        })
        $('span#JobQty', '.modal-body').text(JobQty.toFixed(UnitDecPlaces));
        $('span#RecQty', '.modal-body').text(ReceiveQty.toFixed(UnitDecPlaces));
        $('span#LossQty', '.modal-body').text(LosttQty.toFixed(UnitDecPlaces));
        $('span#PassQty', '.modal-body').text(PassQty.toFixed(UnitDecPlaces));
        $('span#DealQty', '.modal-body').text(DealQty.toFixed(DealUnitDecPlaces));
        $('span#Amount', '.modal-body').text(Amount.toFixed(2));
    }

    var IsSaved = false;
    var ValidationCount = 0;

    $('#modform').bind('submit', function (event) {

        if (!IsSaved) {
            if (!ValidateData()) {
                return false;
            }
            IsSaved = true;
            $('button:submit').attr('disabled', 'disabled');
            return IsSaved;
        }
        else {
            return false;
        }

    });

    $('#CJobQty').click(function () {


        if (reset) {
            $('div.row.crow', "#gbody-modal.panel-info").each(function (index) {


                var $Hidiv = $(this);

                var unitDecPlaces = parseFloat($Hidiv.find('.UDec:first').val()) || 0;

                var OrderQty = parseFloat($Hidiv.find('.OrderBalanceQty').val()) || 0;

                $Hidiv.find('input.JobQuantity').val(OrderQty.toFixed(unitDecPlaces));
                $Hidiv.find('input.ReceiveQty').val(OrderQty.toFixed(unitDecPlaces));
                $Hidiv.find('input.PassQty').val(OrderQty.toFixed(unitDecPlaces));

                var DDecPlaces = $Hidiv.find('input.DUDec:first').val();
                var UConveMul = $Hidiv.find('input.UConv:first').val();

                $Hidiv.find('.LossQty').val(parseFloat($Hidiv.find('.JobQuantity').val() - $Hidiv.find('.ReceiveQty').val()).toFixed(unitDecPlaces))

                if (UConveMul != 0) {
                    $Hidiv.find('.DealQty').val(parseFloat($Hidiv.find('.PassQty').val() * UConveMul).toFixed(DDecPlaces));
                }


            })
            CalculateTotalAmount();
            reset = false;
        }
        else if (!reset) {
            $('div.row.crow', "#gbody-modal.panel-info").each(function (index) {

                var $Hidiv = $(this);

                $Hidiv.find('input.JobQuantity').val(0);
                $Hidiv.find('input.ReceiveQty').val(0);
                $Hidiv.find('input.PassQty').val(0);

                $Hidiv.find('.LossQty').val(0)
                $Hidiv.find('.DealQty').val(0);


            })
            CalculateTotalAmount();
            reset = true;
        }

        return false;
    });

    $('.COrderBalanceQty').click(function () {

        var $Block = $(this).closest('div.row');
        var $HBlock = $(this).closest('div.row.crow');
        var DecPlaces = $HBlock.find('input.UDec:first').val();

        var qty = parseFloat($Block.find('.OrderBalanceQty').val());
        if ($Block.find('.JobQuantity').val() && $Block.find('.JobQuantity').val() > 0) {
            $Block.find('.JobQuantity').val(0);
            $Block.find('.ReceiveQty').val(0);
            $Block.find('.PassQty').val(0);
        }
        else {
            $Block.find('.JobQuantity').val(qty.toFixed(DecPlaces));
            $Block.find('.ReceiveQty').val(qty.toFixed(DecPlaces));
            $Block.find('.PassQty').val(qty.toFixed(DecPlaces));
        }
        Calculation(this);
        //ValidateData(this);


        return false;
    })


</script>