@model Model.ViewModel.MaterialPlanForLineFilterViewModel
@using Core.Common

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> Filters</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_FilterPost", "MaterialPlanLineNew", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
            
            <div class="form-horizontal modal-body">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.MaterialPlanHeaderId)
                @Html.HiddenFor(m=>m.DocTypeId)

                @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, (Model.DocumentTypeSettings.ProductCaption ?? "Product"), new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                                <span id="status" class="text-danger"></span>
                            </div>
                        </div>
                    </div>                                                  
                
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SaleOrderHeaderId, "Sale Order", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.SaleOrderHeaderId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.SaleOrderHeaderId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>


                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" style="display:@(Model.MaterialPlanSettings.isVisibleDimension1?"":"none")">
                            @Html.LabelFor(model => model.Dimension1Id, (Model.DocumentTypeSettings.Dimension1Caption ?? "Dimension1"), new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension1Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                                <span id="status" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.MaterialPlanSettings.isVisibleDimension2 ? "" : "none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, (Model.DocumentTypeSettings.Dimension2Caption ?? "Dimension2"), new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension2Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>


                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group" style="display:@(Model.MaterialPlanSettings.isVisibleDimension3?"":"none")">
                            @Html.LabelFor(model => model.Dimension3Id, (Model.DocumentTypeSettings.Dimension3Caption ?? "Dimension3"), new { @class = "control-label col-md-4 col-sm-2 " })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension3Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension3Id, "", new { @class = "text-danger" })
                                <span id="status" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.MaterialPlanSettings.isVisibleDimension4 ? "" : "none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension4Id, (Model.DocumentTypeSettings.Dimension4Caption ?? "Dimension4"), new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.Dimension4Id, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.Dimension4Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>



                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductGroupId, (Model.DocumentTypeSettings.ProductGroupCaption ?? "Product Group"), new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.ProductGroupId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductGroupId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.BuyerId, "Buyer", new { @class = "control-label col-md-4 col-sm-2" })
                            <div class="col-md-7 col-sm-10">
                                @Html.TextBoxFor(model => model.BuyerId, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.BuyerId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    <button class="btn custom" name="Command:Edit" type="submit" id="submit" disabled="disabled"><h2 style="margin:0px" title="Proceed"><span class="glyphicon glyphicon-arrow-right black"></span> </h2></button>                  
                </div>

            </div>

        }
    </div>
</div>


<script type="text/javascript">


    $(document).ready(function () {
        $("#ProductId").select2("focus");
        var DocID = $('#MaterialPlanHeaderId', '.modal-body').val();

        //CustomSelectFunction($("#ProductId"), '/ComboHelpList/GetProducts', '/ComboHelpList/SetProducts', ' ', true, 3);
        CustomSelectFunction($("#ProductId"), '/MaterialPlanLineNew/GetCustomProducts', '/ComboHelpList/SetProducts', ' ', false, 0, DocID);
        //CustomSelectFunction($("#SaleOrderHeaderId"), '/ComboHelpList/GetSaleOrders', '/ComboHelpList/SetSaleOrders', 'Enter Product Name', true, 3);
        //CustomSelectFunction($("#ProductGroupId"), '/ComboHelpList/GetProductGroup', '/ComboHelpList/SetProductGroup', 'Enter Product Name', true, 3);
        CustomSelectFunction($("#ProductGroupId"), '/MaterialPlanLineNew/GetCustomProductGroups', '/ComboHelpList/SetProductGroup', ' ', false, 0, DocID);
        CustomSelectFunction($("#Dimension1Id"), '/ComboHelpList/GetDimension1', '/ComboHelpList/SetDimension1', ' ', true, 1);
        CustomSelectFunction($("#Dimension2Id"), '/ComboHelpList/GetDimension2', '/ComboHelpList/SetDimension2', ' ', true, 1);
        CustomSelectFunction($("#Dimension3Id"), '/ComboHelpList/GetDimension3', '/ComboHelpList/SetDimension3', ' ', true, 1);
        CustomSelectFunction($("#Dimension4Id"), '/ComboHelpList/GetDimension4', '/ComboHelpList/SetDimension4', ' ', true, 1);
        CustomSelectFunction($("#BuyerId"), '/ComboHelpList/GetBuyers', '/ComboHelpList/SetSingleBuyer', ' ', false, 0);





        var URL = '/MaterialPlanLineNew/GetSaleOrders/' + DocID;
        $("#SaleOrderHeaderId").select2({
            minimumInputLength: 0,
            multiple:true,
            ajax: {
                url: URL,
                dataType: 'json',
                type: "GET",
                quietMillis: 50,
                data: function (term) {
                    return {
                        term: term,
                    };
                },
                results: function (data) {
                    return {
                        results: $.map(data, function (item) {
                            return {
                                text: item.DocNo,
                                id: item.SaleOrderHeaderId
                            }
                        })

                    };
                }
            },

            initSelection: function (element, callback) {

                var xval = element.val();
                if (xval != 0) {
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "/ComboHelpList/SetSaleOrders",
                        data: { Ids: element.val() },
                        success: function (data) {
                            callback(data);
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            alert('Failed to Retrive Qty' + thrownError);
                        }
                    })
                }
                //callback([{ id: "1", text: "arpit" }, { id: "2", text: "akash" }]);
            }


        });


        $('input:text').change(function () {
            if ($(this).val() != "") {
                $('#submit').removeAttr("disabled");
            }
            else
                $('#submit').attr("disabled", "disabled");
        })


    });




    $("#SaleOrderHeaderId").on("change", function (e) {
       
        var id = $("#SaleOrderHeaderId").select2("val");
        $.ajax({
            cache: false,
            type: "POST",
           
            url: "@(Url.Action("ValidateSaleOrderHeaderId"))",
            data: { SOHeaderId: id },
        success: function (data) {
            if (!data.Success)
            {
                if (!$('#modform').find('.modal-body #errormsg').length)
                {
                    $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg > " + data.Error + "</span></div>")
                   
                }
                else
                {
                    $('#modform').find('.modal-body #errormsg').text(data.Error);
                }

                if ($('#modform').find('div.validation-summary-errors')) {
                    $('#modform').find('div.validation-summary-errors').remove();
                }

            }
            else
            {
                if ($('#modform').find('.modal-body #errormsg').length) {
                    $('#modform').find('.modal-body #errormsg').parent().remove();                    
                }

                if ($('#modform').find('div.validation-summary-errors')) {
                    $('#modform').find('div.validation-summary-errors').remove();
                }
            }
        },
        error: function (xhr, ajaxOptions, thrownError) {
            alert('Failed to retrieve Sale Order details.' + thrownError);
        }
    });

    });


    

</script>