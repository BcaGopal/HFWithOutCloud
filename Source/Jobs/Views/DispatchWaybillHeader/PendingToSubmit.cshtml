@using Surya.India.Core.Common;
@using Surya.India.Model.ViewModels;
@model IQueryable<Surya.India.Model.ViewModels.PackingHeaderViewModel>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style type="text/css">
    .ExcelImport {
        background: no-repeat url(/Images/te.jpg) 0 0;
        height: 32px;
        width: 32px;
        overflow: hidden;
        float: left;
        border: none;
        display: inline;
    }
</style>
<style type="text/css">
    .Settings {
        background: no-repeat url(/Images/settings.png) 0 0;
        height: 32px;
        width: 32px;
        overflow: hidden;
        float: left;
        border: none;
        display: inline;
    }
</style>


@helper RenderActionColumn(PackingHeaderViewModel s)
{
    if (s.Status == (int)StatusConstants.Submitted || s.Status == (int)StatusConstants.ModificationSubmitted)
    {
        @Html.ActionLink(" ", "Approve", "PackingHeader", new { id = s.PackingHeaderId }, new { @class = "rowApproveBlue", @title = " Approve", @data_toggle = "tooltip" });
    }
    if (s.Status == (int)StatusConstants.Drafted || s.Status == (int)StatusConstants.Modified)
    {
        @Html.ActionLink(" ", "Submit", "PackingHeader", new { id = s.PackingHeaderId }, new { @class = "rowSubmitBlue", @title = " Submit", @data_toggle = "tooltip" });

    }
}
@helper RenderStatus(Surya.India.Model.ViewModels.PackingHeaderViewModel s)
{
    if (s.Status == (int)StatusConstants.Submitted)
    {
        @Html.Raw("Submitted");
    }
    else if (s.Status == (int)StatusConstants.Approved)
    {
        @Html.Raw("Approved")
    }
    else if (s.Status == (int)StatusConstants.Drafted)
    {
        @Html.Raw("Drafted")}
    else if (s.Status == (int)StatusConstants.Modified)
    {
        @Html.Raw("Modified")
    }
    else if (s.Status == (int)StatusConstants.ModificationSubmitted)
    {
        @Html.Raw("Modification Submitted")
    }
}

<div class="panel panel-default">
    <div class="panel-heading">
        <h4>
            <span style="font-family: Calibri,sans-serif,Verdana">Packing List.</span>
        </h4>
        <hr style="margin-top:0px;margin-bottom:0px" />
        <div class="panel-info">
            <span style="font-family: Calibri,sans-serif,Verdana;font-size:large;">
                <u> @Html.ActionLink("Create", "Create", "PackingHeader", null, new { @class = "modal-link" })</u>
            </span>
            <br />
            <span style="font-family: Calibri,sans-serif,Verdana;font-size:small">
                <u> @Html.ActionLink("All", "Index", "SaleOrderHeader", new { @class = "modal-link" })</u>|
                <u>@Html.ActionLink("To Submit", "PendingToSubmit", "PackingHeader", new { @class = "modal-link" })</u>|
                <u>@Html.ActionLink("To Approve", "PendingToApprove", "PackingHeader", new { @class = "modal-link" })</u>
            </span>
        </div>
    </div>
    <div class="panel-info" style="padding-left:5px;padding-top:2px">
        @Html.Grid(Model).Columns(columns =>
           {
               columns.Add(m => m.PackingHeaderId, true);
               columns.Add(foo => foo.DocDate).Sortable(true).Titled("Packing Date").Format("{0:dd/MMM/yyyy}").Filterable(true);
               columns.Add(m => m.DocNo).Sortable(true).Titled("Packing No.").Filterable(true).Sortable(true);
               columns.Add(m => m.BuyerName).Titled("Buyer").Filterable(true).Sortable(true);
               columns.Add(m => m.Remark).Sortable(true).Filterable(true).Titled("Remark");
               columns.Add().Sanitized(false).Encoded(false).RenderValueAs(m => RenderStatus(m)).Titled("Status");
               columns.Add().Encoded(false).Sanitized(false).RenderValueAs(d => @Html.ActionLink(" ", "Index", "PackingLine", new { id = d.PackingHeaderId }, new { @class = "rowLineDetailBlue", @title = "Line Detail", @data_toggle = "tooltip" })).SetWidth(20);
               columns.Add().Encoded(false).Sanitized(false).RenderValueAs(m => RenderActionColumn(m)).SetWidth(20);
               columns.Add().Encoded(false).Sanitized(false).RenderValueAs(d => @Html.ActionLink(" ", "Detail", "PackingHeader", new { id = d.PackingHeaderId }, new { @class = "rowDetailBlue", @title = "Detail", @data_toggle = "tooltip" })).SetWidth(20);
               columns.Add().Encoded(false).Sanitized(false).RenderValueAs(m => @Html.ActionLink(" ", " ", " ", new { id = m.PackingHeaderId }, new { @class = "rowPrintBlue", @data_toggle = "tooltip", @title = "Print" })).SetWidth(20);
               columns.Add().Encoded(false).Sanitized(false).RenderValueAs(m => @Html.ActionLink(" ", "Edit", "PackingHeader", new { id = m.PackingHeaderId }, new { @class = "rowEditBlue", @title = "Edit", @data_toggle = "tooltip" })).SetWidth(20);
               columns.Add().Encoded(false).Sanitized(false).RenderValueAs(d => @Html.ActionLink(" ", "Delete", "PackingHeader", new { id = d.PackingHeaderId }, new { @class = "rowDeleteBlue", @title = "Delete", @data_toggle = "tooltip" })).SetWidth(20);
           }).WithPaging(25).EmptyText("No records found.")
    </div>
</div>