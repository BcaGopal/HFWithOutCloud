@model Model.ViewModel.LedgerHeaderViewModel
@using Core.Common
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- modal placeholder-->
<div id='myModal' class='modal fade in'>
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

@using (Html.BeginForm("Post", "LedgerHeader", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.SiteId)
    @Html.HiddenFor(m => m.Status)
    @Html.HiddenFor(m => m.LedgerSetting.IsAutoDocNo)
    @Html.HiddenFor(m => m.DivisionId)
    @Html.HiddenFor(m => m.LedgerHeaderId)
    @Html.HiddenFor(m => m.DocumentCategoryId)
    @Html.HiddenFor(m => m.DocTypeId)
    @Html.HiddenFor(m => m.CreatedDate)
    
    <div class="panel panel-default">
        <div class="panel-heading">
            @CustomHelpers.RenderResHeaderInfo(ViewBag.transactionType, (int?)ViewBag.PendingToSubmit, (int?)ViewBag.PendingToReview, ViewBag.Name + (Model.SiteName != null ? " [" + Model.SiteName + "]" : ""))
            @*@if (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue")
            {<h3>
                <button type="submit" name="Command:Submit" class="btn btn-primary right" id="SubmitContinue" style="margin-left:5px;">Submit & Next<span class='badge'>@(ViewBag.PendingToSubmit != 0 ? ViewBag.PendingToSubmit : "")</span></button>
                <button type="submit" name="Command:Submit" class="btn btn-primary right">Submit</button>
                <input type="hidden" id="IsContinue" name="IsContinue" value="" />
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>Submit @ViewBag.Name (@ViewBag.Nature)</span>
            </h3>}
            else if (ViewBag.transactionType == "review" || ViewBag.transactionType == "ReviewContinue")
            {<h3 style="border-bottom:0px solid #e1dada;padding-bottom:0px;">
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span> Review @ViewBag.Name</span>
                <button type="submit" name="Command:Review" class="btn btn-primary right" style="margin-left:5px" id="ReviewContinue">Review & Next<span class='badge'>@(ViewBag.PendingToReview != 0 ? ViewBag.PendingToReview : "")</span></button>
                <button type="submit" class="btn btn-primary right" name="Command:Review">Review</button>
                <input type="hidden" id="IsContinue" name="IsContinue" value="" />
            </h3>}
            else if (ViewBag.transactionType == "detail")
            {
                <h3>
                    <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>@ViewBag.Name</span>
                </h3>
            }
            else
            {
                <h3>
                    <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span> @ViewBag.Name (@ViewBag.Nature) </span>
                    <input type="submit" value="Save" class="btn btn-primary right" id="submit" style="width: 90px; background-color: #2980b9" />
                </h3>}*@


            <hr style="margin-top: 5px; margin-bottom: 5px; border-top: 1px solid #d8d5d5" />

            @{
                string EditAction = "";
                if (Model.Status == (int)StatusConstants.Drafted || Model.Status == (int)StatusConstants.Import)
                {
                    EditAction = "Modify";
                }
                else if ((Model.Status == (int)StatusConstants.Submitted || Model.Status == (int)StatusConstants.Modified))
                {
                    EditAction = "ModifyAfter_Submit";
                }
                else
                {
                    EditAction = "DetailInformation";
                }
            }

            <div class="panel-info">
                @*<h4 style="padding:5px 0 0 0;margin:0px">
                    @Html.ActionLink(" ", " ", " ", null, new { @class = "glyphicon glyphicon-refresh toolbar", @title = "Refresh Page", @data_toggle = "tooltip", @id = "RefreshPage" })
                    @Html.ActionLink(" ", "Create", "LedgerHeader", new { id = @ViewBag.id }, new { @class = "glyphicon glyphicon-plus toolbar", @title = "Add New", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "GetHistory", "LogHistory", new { Ids = Model.LedgerHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "glyphicon glyphicon-user toolbar", @title = "History", @data_toggle = "tooltip", @id = "DocHistory", @data_modal = "" })
                    @Html.ActionLink(" ", "GeneratePrints", "LedgerHeader", new { Ids = @Model.LedgerHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "glyphicon glyphicon-print toolbar", @id = "PrintRecordC", @title = "Print", @data_toggle = "tooltip", target = "_blank" })
                    @Html.ActionLink(" ", "Email", "LedgerHeader", null, new { @class = "glyphicon glyphicon-envelope toolbar", @title = "Email", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "PrevPage", "LedgerHeader", new { id = @Model.LedgerHeaderId, ptypeid = @ViewBag.id }, new { @class = "glyphicon glyphicon-arrow-left toolbar", @title = "Prev Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "NextPage", "LedgerHeader", new { id = @Model.LedgerHeaderId, ptypeid = @ViewBag.id }, new { @class = "glyphicon glyphicon-arrow-right toolbar", @title = "Next Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Index", "LedgerHeader", new { id = @ViewBag.id, IndexType = ViewBag.IndexStatus }, new { @class = "glyphicon glyphicon-list toolbar right", @title = "List", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Report", "LedgerHeader", null, new { @class = "glyphicon glyphicon-th toolbar right", @title = "Report", @data_toggle = "tooltip" })
                </h4>*@
                <div class="btn-group">
                    @Html.ActionLink(" ", "Create", "LedgerHeader", new { id = @ViewBag.id }, new { @class = "cbtn btn-circle glyphicon glyphicon-plus toolbar", @title = "Add New", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", EditAction, "LedgerHeader", new { @id = Model.LedgerHeaderId, IndexType = ViewBag.IndexStatus }, new { @class = "cbtn btn-circle glyphicon glyphicon-edit", @title = "Edit", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "GeneratePrints", "LedgerHeader", new { Ids = @Model.LedgerHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-print toolbar", @id = "PrintRecordC", @title = "Print", @data_toggle = "tooltip", target = "_blank" })
                    @Html.ActionLink(" ", "PrevPage", "LedgerHeader", new { id = @Model.LedgerHeaderId, ptypeid = @ViewBag.id }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-left toolbar", @title = "Prev Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "NextPage", "LedgerHeader", new { id = @Model.LedgerHeaderId, ptypeid = @ViewBag.id }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-right toolbar", @title = "Next Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Index", "LedgerHeader", new { id = @ViewBag.id, IndexType = ViewBag.IndexStatus }, new { @class = "cbtn btn-circle glyphicon glyphicon-list", @title = "List", @data_toggle = "tooltip" })
                </div>
                <div class="btn-group">
                    <a class="cbtn btn-circle glyphicon glyphicon-option-horizontal dropdown-toggle" aria-expanded="false" style="padding-top: 6px;padding-bottom: 6px;" href="#" data-toggle="dropdown" id="dropdownMenu1">
                    </a>
                    <ul class="dropdown-menu pull-right" aria-labelledby="dropdownMenu1">
                        <li><a href="@Url.Action("Email", "LedgerHeader")"><span class="glyphicon glyphicon-envelope"> </span> Email</a></li>
                        <li role="separator" class="divider"></li>
                        <li><a target="_blank" href="@Url.Action("Report", "LedgerHeader", new { id = @ViewBag.id })"><span class="glyphicon glyphicon-th"> </span> Report</a></li>
                        @*<li><a id="Cancel" data-modal="" href="@Url.Action("_CreateCancel", "LedgerHeader", new { id = Model.LedgerHeaderId })"><span class="glyphicon glyphicon-remove"> </span> Cancel</a></li>*@
                    </ul>
             </div>
            </div>
        </div>
        <div class="panel-info" style="padding-left:15px">
            <div class="form-horizontal">
                @Html.ValidationSummary(true)

                <div>
                    <h4 class="col-md-12 black">
                        <span class="glyphicon glyphicon-align-justify"></span>
                        1.Document Details
                    </h4>
                    <div>
                        <div>

                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocNo, "Voucher No", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DocNo, null, new { @class = "form-control col-xs-6 required" })
                                        @Html.ValidationMessageFor(m => m.DocNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocDate, "Voucher Date", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DocDate, "{0:dd/MMMM/yyyy}", new
                                   {
                                       @class = "datepickerWithNFD form-control col-xs-6 required updateDocNo",
                                       data_tabl = "LedgerHeaders",
                                       data_doctype = Model.DocTypeId,
                                       data_divId = Model.DivisionId,
                                       data_sitId = Model.SiteId,
                                   })
                                        @Html.ValidationMessageFor(model => model.DocDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style="display:@(Model.LedgerSetting.isVisibleHeaderCostCenter?"":"none")">
                                @Html.HiddenFor(m => m.LedgerSetting.isVisibleHeaderCostCenter)
                                @Html.HiddenFor(m => m.LedgerSetting.isMandatoryHeaderCostCenter)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CostCenterId, "Cost Center", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.CostCenterId, new { @class = "form-control" + (Model.LedgerSetting.isMandatoryHeaderCostCenter ? " required" : "") })
                                        @Html.ValidationMessageFor(model => model.CostCenterId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            @*<div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.LedgerAccountId, "Ledger A/C", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.LedgerAccountId, null, new { @class = "form-control col-xs-6 required" })
                                        @Html.ValidationMessageFor(m => m.LedgerAccountId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>*@

                            <div class="col-md-6" style="display:@(Model.LedgerSetting.isVisibleLineDrCr && Model.LedgerAccountId == null ? "none" : "")">
                                @Html.HiddenFor(m => m.LedgerSetting.isVisibleLineDrCr)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.LedgerAccountId, "Ledger A/C", new { @class = "control-label col-md-4 col-sm-2" })
                                    @if (Model.LedgerSetting.isVisibleDrCr)
                                    {
                                        <div class="col-md-7 col-sm-10">
                                            <div class="col-xs-9" style="padding:0px">
                                                @Html.TextBoxFor(m => m.LedgerAccountId, null, new { @class = "form-control col-xs-6 required" })
                                                @Html.ValidationMessageFor(m => m.LedgerAccountId, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-xs-3" style="padding:0px">
                                                @Html.DropDownListFor(m => m.DrCr, new SelectList(ViewBag.DrCrList as System.Collections.IEnumerable, "Value", "Text"), " ", new { @class = "form-control col-xs-6 height" })
                                                @Html.ValidationMessageFor(model => model.DrCr, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="col-md-7 col-sm-10">
                                            @Html.TextBoxFor(m => m.LedgerAccountId, null, new { @class = "form-control col-xs-6 required" })
                                            @Html.ValidationMessageFor(m => m.LedgerAccountId, "", new { @class = "text-danger" })
                                        </div>
                                    }
                                </div>
                            </div>

                            <div class="col-md-6" style="display:@(Model.LedgerSetting.isVisibleAdjustmentType?"":"none")">
                                @Html.HiddenFor(m => m.LedgerSetting.isVisibleAdjustmentType)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.AdjustmentType, "Adjustment Type", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.DropDownListFor(m => m.AdjustmentType, new SelectList(ViewBag.AdjustmentTypeList as System.Collections.IEnumerable, "Value", "Text"), "", new { @class = "form-control col-xs-6 height" })
                                        @Html.ValidationMessageFor(m => m.AdjustmentType, null, new { @class = "has-error" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style="display:@(Model.LedgerSetting.isVisiblePaymentFor?"":"none")">
                                @Html.HiddenFor(m => m.LedgerSetting.isVisiblePaymentFor)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PaymentFor, "Payment For", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.PaymentFor, "{0:dd/MMMM/yyyy}", new { @class = "datepickerWithNFD form-control col-xs-6" })
                                        @Html.ValidationMessageFor(model => model.PaymentFor, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style="display:@(Model.LedgerSetting.isVisiblePartyDocNo?"":"none")">
                                @Html.HiddenFor(m => m.LedgerSetting.isVisiblePartyDocNo)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PartyDocNo, (Model.LedgerSetting.PartyDocNoCaption ?? "Party Doc No"), new { @class = "control-label col-md-4 col-sm-2" })
                                    @Html.HiddenFor(m => m.LedgerSetting.PartyDocNoCaption)
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.PartyDocNo, new { @class = "form-control  col-xs-6" })
                                        @Html.ValidationMessageFor(model => model.PartyDocNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6" style="display:@(Model.LedgerSetting.isVisiblePartyDocDate?"":"none")">
                                @Html.HiddenFor(m => m.LedgerSetting.isVisiblePartyDocDate)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PartyDocDate, (Model.LedgerSetting.PartyDocDateCaption ?? "Party Doc Date"), new { @class = "control-label col-md-4 col-sm-2" })
                                    @Html.HiddenFor(m => m.LedgerSetting.PartyDocDateCaption)
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.PartyDocDate, "{0:dd/MMMM/yyyy}", new { @class = "datepickerWithNFD form-control col-xs-6" })
                                        @Html.ValidationMessageFor(model => model.PartyDocDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>


                            <div class="col-md-6" style="display:@(Model.LedgerSetting.isVisibleProcess?"":"none")">
                                @Html.HiddenFor(m => m.LedgerSetting.isVisibleProcess)
                                @Html.HiddenFor(m => m.LedgerSetting.isMandatoryProcess)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProcessId, "Process", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.ProcessId, new { @class = "form-control" + (Model.LedgerSetting.isMandatoryProcess ? " required" : "") })
                                        @Html.ValidationMessageFor(model => model.ProcessId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style="display:@(Model.LedgerSetting.isVisibleGodown?"":"none")">
                                @Html.HiddenFor(m => m.LedgerSetting.isVisibleGodown)
                                @Html.HiddenFor(m => m.LedgerSetting.isMandatoryGodown)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.GodownId, "Godown", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.GodownId, new { @class = "form-control" + (Model.LedgerSetting.isMandatoryGodown ? " required" : "") })
                                        @Html.ValidationMessageFor(model => model.GodownId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Narration, "Narration", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextAreaFor(m => m.Narration, new { @class = "form-control col-xs-6" })
                                        @Html.ValidationMessageFor(m => m.Narration, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>


                <hr />
                <div class="row">
                    <h4 class="col-md-12 black" style="margin-top:15px">
                        <span class="glyphicon glyphicon-shopping-cart"></span>
                        2.Line Detail
                    </h4>
                </div>

                @*<div class="panel-info">
                    <h5 style="padding:5px 0 3px 0;margin:0px;font-weight:bold">
                        <span class="glyphicon glyphicon-plus-sign"></span>
                        @{string Action = "";
                          if (Model.Status == (int)StatusConstants.Drafted || Model.Status == (int)StatusConstants.Import)
                        { Action = "CreateLine"; }
                        else if (Model.Status == (int)StatusConstants.Submitted || Model.Status == (int)StatusConstants.Modified)
                        { Action = "CreateLineAfter_Submit"; }                        
                        }
                        @Html.ActionLink("Add New Row ", Action, "LedgerLine", new { id = @Model.LedgerHeaderId, Laid = @Model.LedgerAccountId, catid = @ViewBag.id }, new { data_modal = "", id = "btnCreate", @class = "toolbar", @title = "Add New", @data_toggle = "tooltip" })
                    </h5>
                </div>*@
                <div class="panel-info" style="height:40px">
                    <div class="btn-group" style="padding:5px 0 3px 0;margin:0px;font-weight:bold">
                        <span class="glyphicon glyphicon-plus-sign"></span>
                        @{string Action = "";
                            if (Model.Status == (int)StatusConstants.Drafted || Model.Status == (int)StatusConstants.Import)
                            { Action = "CreateLine"; }
                            else if (Model.Status == (int)StatusConstants.Submitted || Model.Status == (int)StatusConstants.Modified)
                            { Action = "CreateLineAfter_Submit"; }
                        }
                        @Html.ActionLink("Add New Row ", Action, "LedgerLine", new { id = @Model.LedgerHeaderId, Laid = @Model.LedgerAccountId, catid = @ViewBag.id }, new { data_modal = "", id = "btnCreate", @class = "toolbar", @title = "Add New", @data_toggle = "tooltip" })
                        </div>
                    </div>
                    <div style="padding-right:15px">


                        <div class="panel panel-default" id="grid">
                            <div class="panel-heading headrow" style="background-image: -webkit-linear-gradient(top, #428bca 0%, #428bca 100%);color:white">
                                <div class="row grid-head">
                                    <div class="col-xs-1 text-left" style="width: 5%">
                                        Srl.
                                    </div>
                                    <div class="col-xs-10" style="width:88%">
                                        <div class="row">
                                            @*ProductInfo*@
                                            <div class="col-sm-4">
                                                Ledger Account
                                            </div>
                                            @*Qty*@

                                            @*Rate*@
                                            <div class="col-sm-2">
                                                Reference No.
                                            </div>
                                            <div class="col-sm-2">
                                                Cost Center
                                            </div>
                                            @*Amount*@
                                            <div class="col-sm-2 text-right">
                                                @(ViewBag.Nature == NatureConstants.Credit ? "Amount Dr" : (ViewBag.Nature == NatureConstants.Debit ? "Amount Cr" : "Amount"))
                                            </div>

                                            @*Remark*@
                                            @if (ViewBag.LedgerAccountNature == LedgerAccountTypeConstants.Bank)
                                            {

                                                <div class="col-sm-2 text-center">
                                                    Cheque No
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-xs-1" style="width: 5%">

                                    </div>
                                </div>

                            </div>
                            <div class="panel-info" id="gbody">


                            </div>
                        </div>
                    </div>
                </div>
        </div>
    </div>
}

@if ((ViewBag.Mode == "Add") || (ViewBag.Mode == "Edit"))
{

    <script type="text/javascript">



        //For Populating Modal PopUp on DoubleClick Of Row
        $('#gbody').on("dblclick",'.grid-body',function(){
            var text = $(this).find(".id").val();
            var editurl=$(this).find('a[edit]').attr('href');
            $('#myModalContent').load(editurl, function () {
                //alert('2');
                $('#myModal').modal({
                    backdrop: 'static',
                    keyboard: true
                }, 'show');

                bindForm1(this);
            });
        });

        //For Handling Modal PopUp on Clicking Delete Icon
        $('#gbody').on("click",'a[delete]', function (e) {
            $('#myModalContent').load(this.href, function () {
                //alert('2');
                $('#myModal').modal({
                    backdrop: 'static',
                    keyboard: true
                }, 'show');

                bindForm1(this);
            });
            return false;
        });

        //Reloading the table contents on modal hide
        $('#myModal').on('hidden.bs.modal', function () {
            LoadProducts();
        });


        
        $(document).ready(function(){
            enableModalTransitions();
        })

        //To focus on the first element on modal load
        //$('#myModal').on('shown.bs.modal', function () {
        //    $("#ProductId").select2("focus");
        //});

    </script>


}

@if (Model.LedgerSetting.isVisibleLineCostCenter)
{
    <script type="text/javascript">

        //To focus on the first element on modal load
        $('#myModal').on('shown.bs.modal', function () {
            $("#CostCenterId",".modal-body").select2("focus");
        });
    </script>
}
else
{
    <script type="text/javascript">
        //To focus on the first element on modal load
        $('#myModal').on('shown.bs.modal', function () {
            $("#LedgerAccountId",".modal-body").select2("focus");
        });
    </script>
}


<script type="text/javascript">
    var form_clean;

    $(document).ready(function () {


        CustomSelectFunction($("#LedgerAccountId"), '/LedgerHeader/GetLedgerAccount', '/ComboHelpList/SetSingleAccount', ' ', false, 0,$('#DocTypeId').val());
        CustomSelectFunction($("#CostCenterId"), '/LedgerHeader/GetCostCenters', '/ComboHelpList/SetSingleCostCenter', ' ', false, 0,$('#DocTypeId').val());
        CustomSelectFunction($("#GodownId"), '/ComboHelpList/GetGodown', '/ComboHelpList/SetSingleGodown', ' ', false, 0);
        CustomSelectFunction($("#ProcessId"), '/ComboHelpList/GetProcess', '/ComboHelpList/SetSingleProcess', ' ', false, 0);

        //Adding Hidden Input Fields
        AddFields();

        if ($("#LedgerSetting_IsAutoDocNo").val() == "True")
        {
            $("#DocNo").prop('readonly', true);
        }
        else{
            $("#DocNo").removeAttr("readonly");
        }

        //Calling the function to load the table data/ Line information
        var id=@Model.LedgerHeaderId;
        if(id>0)
            LoadProducts();
    });


    function AddFields(){
        $('form:last').append($("<input type='hidden' name='UserRemark'></input>"))
    }


    var id=@Model.LedgerHeaderId;
    if(id==null||id==0)
    {
        $(document).find('a#btnCreate').removeAttr('href').removeAttr('data-modal');
        $("#btnCreateF").attr('disabled','disabled');

    }


    $('#CostCenterId').change(function(){

        $.ajax({
            cache: false,
            type: "POST",
            url: "/LedgerLine/GetLedgerAcc",
            data: { CostCenterId:$('#CostCenterId').val() },
            success: function (data) {
                if(data.Success){
                    $('#LedgerAccountId').select2("data",{id:data.Id,text:data.Name}).attr('readonly','true');
                }
                else if(!data.Success){
                    $('#LedgerAccountId').removeAttr('readonly');
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve Ledger Accounts.' + thrownError);
            }

        });

    })







    function LoadProducts() {
        var groupId=@Model.LedgerHeaderId;
        var status='@Model.Status';
        var IsVisibleLedgerAdj='@Model.LedgerSetting.isVisibleLedgerAdj';
        var HeaderLegdgerAccountId='@Model.LedgerAccountId';
        var LineEditUrl;
        var LineDeleteUrl;
        var ColourDr="";
        var ColourCr="";
        if(status==StatusContstantsEnum.Drafted)
        {
            LineEditUrl="/LedgerLine/_ModifyLine/";
            LineDeleteUrl="/LedgerLine/_DeleteLine/";
        }
        else if(status==StatusContstantsEnum.Submitted || status == StatusContstantsEnum.Modified )
        {
            LineEditUrl="/LedgerLine/_ModifyLineAfterSubmit/";
            LineDeleteUrl="/LedgerLine/_DeleteLine_AfterSubmit/";
        }
        else
        {
            LineEditUrl="/LedgerLine/_Detail/";
            LineDeleteUrl="/LedgerLine/_Detail/";
        }
        var link="/LedgerLine/Index/"+groupId;
        var AmountCount=0;
        var unit=true;
        var prevunit;
        var decimal=0;
        var AmountSumDr=0;
        var AmountSumCr=0;
        $.ajax({
            url: link,
            type: "GET",
            success: function (data) {
                var row = ""
                var srno=1;

                if(data.length!=0)
                {
                    $.each(data, function (index, item) {
                        row += " <div class='row crow grid-body' style='margin-left:0px;margin-right:0px'><div class='col-xs-1 row-index' style='width: 5%'>"+srno+"<input type='hidden' class='id' value='"+item.LedgerHeaderId+"' /></div><div class='col-xs-10' style='width:88%'><div class='row'><div class='col-sm-4'>"+(item.LedgerAccountName==null?" ":"<strong>"+item.LedgerAccountName+"</strong>")+"  <div>  </div></div>            <div class='col-sm-2'>"+(item.ReferenceDocNo==null?" ":item.ReferenceDocNo)+"</div> <div class='col-sm-2'>"+(item.CostCenterName==null?" ":item.CostCenterName)+"</div>  <div class='col-sm-2 text-right number'  >"+(item.Amount==null?" ":item.Amount.toFixed(2))+ "</div>   <div class='col-sm-1'>"+(item.DrCr==null?" ":item.DrCr)+ "</div>       <div class='col-sm-2 text-center'>"+(item.ChqNo==null?" ":"ChqNo-"+item.ChqNo)+"<br /> "+(item.DueDate==null?" ":"ChqDt-"+formatDate('d/m/Y',new Date(parseInt(item.DueDate.substr(6)))))+" </div>                         </div></div><div class='col-xs-1' style='width: 5%'><a class='glyphicon glyphicon-trash ' delete='' href='"+LineDeleteUrl+item.LedgerLineId+"'></a><a  edit='' href='"+LineEditUrl+item.LedgerLineId+"'></a>"+(IsVisibleLedgerAdj=='False' ?" ":" <a  style='padding:3px;' class='glyphicon glyphicon-edit' data-modal='' delete='' href='/LedgerLine/_LedgerAdj_Single/"+item.LedgerLineId+"' ></a>")+"</div></div><hr style='margin-top:0px;margin-bottom:0px'/></div>";

                        AmountCount+=item.Amount;
                        srno++;

                        
                        if (item.DrCr == "Dr")
                        {
                            AmountSumDr+=item.Amount;
                        }
                        if (item.DrCr == "Cr")
                        {
                            AmountSumCr+=item.Amount;
                        }
                    });

                    if (AmountSumDr != AmountSumCr)
                    {
                        if (AmountSumDr > AmountSumCr)
                        {
                            ColourDr = "red";
                            ColourCr = "green";
                        }
                        if (AmountSumCr > AmountSumDr)
                        {
                            ColourCr = "red";
                            ColourDr = "green";
                        }
                    }
                    else{
                        ColourCr = "black";
                        ColourDr = "black";
                    }

                    if (HeaderLegdgerAccountId == null || HeaderLegdgerAccountId == '' || HeaderLegdgerAccountId == 0)
                    {
                        row+="<div class='row tfooter' style='padding-top:10px;'>"
                            +"  <div class='col-xs-1' style='width: 5%'>"
                            +"  </div>"
                            +"  <div class='col-xs-10' style='width:88%'>"
                            +"      <div class='row'> "
                            +"          <div class='col-sm-4'><strong>Total</strong>"
                            +"          </div>"
                            +"      <div class='col-sm-2 text-right'> "
                            +"      </div> "
                            +"      <div class='col-sm-2 text-right'>"
                            +"      </div> "
                            +"      <div class='col-sm-2 text-right' style='color:"+ ColourDr +"'>"
                            +"          <strong>Dr : </strong><strong class='number'>"+AmountSumDr.toFixed(2)+"</strong>"
                            +"      </div> "
                            +"      <div class='col-sm-2 text-right' style='color:"+ ColourCr +"'>"
                            +"          <strong>Cr : </strong><strong class='number'>"+AmountSumCr.toFixed(2)+"</strong>"
                            +"      </div>"
                            +"  </div>"
                            +"</div>"
                            +"<div class='col-xs-1' style='width:5%'></div>"
                    }
                    else{
                        row+="<div class='row tfooter' style='padding-top:10px;'>"
                            +"  <div class='col-xs-1' style='width: 5%'>"
                            +"  </div>"
                            +"  <div class='col-xs-10' style='width:88%'>"
                            +"      <div class='row'> "
                            +"          <div class='col-sm-4'><strong>Total</strong>"
                            +"          </div>"
                            +"      <div class='col-sm-2 text-right'> "
                            +"      </div> "
                            +"      <div class='col-sm-2 text-right'>"
                            +"      </div> "
                            +"      <div class='col-sm-2 text-right'>"
                            +"          <strong class='number'>"+AmountCount.toFixed(2)+"</strong>"
                            +"      </div>"
                            +"      <div class='col-sm-2 text-right'>"
                            +"      </div> "
                            +"  </div>"
                            +"</div>"
                            +"<div class='col-xs-1' style='width:5%'></div>"
                    }


                    $('#DocNo').attr('readonly','true');
                }
                else
                {
                    ;
                }
                $("#gbody").html(row);
                $('.number').addCommas();
            },
            error: function (result) {
                alert("Error");
            }
        });
    }


    //For posting the data through ajax and render the contents sent back from the server
    function bindForm1(dialog) {
        //alert("binding");
        $('form#modform', dialog).submit(function () {
            //alert(this.action);
            $.ajax({
                url: this.action,
                type: this.method,
                data: $(this).serialize(),
                success: function (result) {
                    if (result.success) {
                        $('#myModal').modal('hide');
                        //Refresh
                        //location.reload();
                        //alert('Data Saved');
                    }else if(!result.success)
                    {
                        $('#myModalContent').html(result);
                        bindForm1();
                    }
                    else {
                        $('#myModalContent').html(result);
                        bindForm1();
                    }
                }
            });
            return false;
        });

    } 

</script>


@if ((ViewBag.Mode != "Add") && (ViewBag.Mode != "Edit"))
{
    <script type="text/javascript">

        $(document).ready(function(){
            DisablePageNavigation();
        })        
        
        //RemoveFields();

        //function RemoveFields(){
        //    //Disabling input fields
        //    $(':input:not(:submit)').attr('disabled','disabled');

        //    //Removing all the events from the newly created lines
        //    $('#gbody').unbind();

        //    //Removing Add New Row ActionLink
        //    $('a#btnCreate').parents('h5')[0].remove();


        //    //Preventing the click event on newly created elements
        //    $(document).on('click','#gbody a',function(event){
        //        event.preventDefault();
        //    })
        //    //Removing the action link from the form so that the request will be redirected to the Submit function in the controller instead of the hardcoded path
        //    $('form:last').prop('action','');
        //}



    </script>
}

@if ((Model.Status == (int)ActivityTypeContants.Modified || Model.Status == (int)ActivityTypeContants.Submitted)
    && (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue" || ViewBag.transactionType == "review" || ViewBag.transactionType == "ReviewContinue"))
{
    <script type="text/javascript">

        var href = '/ActivityLog/LogEditReason'

        $(':submit').bind('click', function () {
            var Button=$(this);
            $('#myModalContent').load(href, function () {

                $('#myModal').modal({
                    backdrop: 'static',
                    keyboard: true
                }, 'show');

                bindForm1(this,Button);
            });

            return false;
        })

        function bindForm1(dialog,Button) {

            $('#modformr', dialog).submit(function () {

                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: $(this).serialize(),
                    success: function (result) {
                        if (result.success) {
                            $('#myModal').modal('hide');

                            $(':submit').unbind();

                            $('input[name="UserRemark"]').val(result.UserRemark);

                            $(Button).trigger('click');

                        } else {
                            $('#myModalContent').html(result);
                            bindForm1();
                        }
                    }
                });
                return false;
            });

        }

    </script>
}

@if (ViewBag.transactionType != null && (ViewBag.transactionType == "submitContinue" || ViewBag.transactionType == "approveContinue"))
{
    <script type="text/javascript">
        CreateTrasitionEffectForSubmit();

        function CreateTrasitionEffectForSubmit() {

            //$('body').find('.container.body-content > div.row ').wrap("<div class='animsition' data-animsition-in='fade-in-right-lg' data-animsition-out='fade-out-left-lg' style='animation-duration: 1.5s; -webkit-animation-duration: 1.5s; opacity: 0;'> </div>");

            $('body').find('form').filter(":last").wrapInner("<div class='animsition' data-animsition-in='fade-in-right-lg' data-animsition-out='fade-out-left-lg' style='animation-duration: 1.5s; -webkit-animation-duration: 1.5s; opacity: 0;'> </div>");

            var script = document.createElement('script');

            script.setAttribute('type', 'text/javascript');

            script.text = " $(document).ready(function () {$('.animsition').animsition().one('animsition.start', function () {}).one('animsition.end', function () {$(this).find('.animsition-child').addClass('zoom-in').css({'opacity': 1});})});";

            $('body').append(script);

        }
    </script>
}