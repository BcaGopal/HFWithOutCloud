@{
    ViewBag.Title = "Choose Recipe";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<link href="~/Content/Slick/slick.grid.css" rel="stylesheet" />
<link href="~/Content/Slick/css/smoothness/jquery-ui-1.8.16.custom.css" rel="stylesheet" />
<link href="~/Content/Slick/slick-default-theme.css" rel="stylesheet" />

<style type="text/css">
    .slick-header-column.ui-state-default {
        background-color: #428bca;
        color: white;
        height: 35px;
        line-height: 35px;
    }

    .slick-row.ui-widget-content, .slick-cell {
        height: 30px;
        line-height: 30px;
    }

    #myGrid * {
        box-sizing: content-box !important;
    }

    .hidden {
        display: none;
    }

    .sml {
        width: 10% !important;
    }

    .md {
        width: 15% !important;
    }
</style>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-list black"></span> Copy Recipe</span>
            @Html.ActionLink(" ", " ", " ", null, new { @class = "glyphicon glyphicon-refresh toolbar right small", @title = "Refresh Page", @data_toggle = "tooltip", @id = "RefreshPage", @style = "padding:10px 5px;" })
            <input type="text" id="txtSearch2" class="right toolbar small" placeholder="Search" style="height:25px;max-width:20%">
        </h3>
    </div>

    <div class="panel-info tab" style="padding-left:0px">
        <div style="width: 100%;">
            <div id="myGrid" style="width: 100%; height: 450px; font-size: 11px; "></div>
        </div>
    </div>
</div>

<script src="~/Scripts/Slick/lib/jquery.event.drag-2.2.js"></script>
<script src="~/Scripts/Slick/slick.core.js"></script>
<script src="~/Scripts/Slick/slick.grid.js"></script>
<script src="~/Scripts/Slick/slick.dataview.js"></script>
<script src="~/Scripts/Slick/slick.rowselectionmodel.js"></script>

<script>

    var grid;
    var columns;
    var data;

    //Columns Specification
    columns = [
       { id: "Dimension1Id", name: "Shade", field: "Dimension1Name", width: 300, minWidth: 150, hasTotalName: false },
       { id: "Dimension2Id", name: "Design", field: "Dimension2Name", width: 300, minWidth: 150, hasTotalName: false },
       { id: "ProductId", name: "Product", field: "ProductName", width: 300, minWidth: 150, hasTotalName: false },
       { id: "RecipeNo", name: "Recipe No", field: "RecipeNo", width: 300, minWidth: 150, hasTotalName: false },
       { id: "RecipeDate", name: "Recipe Date", field: "RecipeDate", width: 300, minWidth: 150, hasTotalName: false },
       { id: "LotNo", name: "Lot No", field: "LotNo", width: 300, minWidth: 150, hasTotalName: false },
    ];


    //Options Initialization
    var options = {
        editable: false,
        enableCellNavigation: true,
        enableColumnReorder: false,
        forceFitColumns: true,
        showFooterRow: true,
        explicitInitialization: true
    };

    //Creating Custom FilterFunction that can be passed to slickgrid for search
    var searchString = "";
    function myFilter(item, args) {
        if (args.searchString != "" && (item["RecipeNo"]).toLowerCase().indexOf(args.searchString.toLowerCase()) == -1) {
            return false;
        }
        return true;
    }

    //Instantiating the Grid
    var dataView = new Slick.Data.DataView({ inlineFilters: true });
    grid = new Slick.Grid("#myGrid", dataView, columns, options);

    //Adding Grid functionalities
    grid.setSelectionModel(new Slick.RowSelectionModel());


    //Functionality for adding Totals on cell render
    grid.onFooterRowCellRendered.subscribe(function (e, args) {
        if (args.column.hasTotal) {
            $(args.node).empty();
            $("<span></span>").text((getColumnTotal(args.column.field, grid.getData())).toFixed(2))
               .appendTo(args.node);
            $(args.node).addClass(args.column.headerCssClass);
        }
        else if (args.column.hasTotalName) {
            $(args.node).empty();
            $("<span></span>").text("Total")
               .appendTo(args.node);
            $(args.node).addClass(args.column.headerCssClass);
        }
    });

    //Functionality for Enter key navigation
    var JobOrderHeaderId = @ViewBag.JobOrderHeaderId;
    var HeaderTestingQty = @ViewBag.HeaderTestingQty;
    var HeaderQty = @ViewBag.HeaderQty;
    grid.onKeyDown.subscribe(function (e) {
        if (e.which == 13) {
            var CopyFromRecipeId = grid.getDataItem(grid.getSelectedRows()).JobOrderHeaderId;
            window.location.href = '/RecipeLine/RecipeDetail?JobOrderHeaderId=' + JobOrderHeaderId + '&CopyFromRecipeId= ' + CopyFromRecipeId + '&HeaderTestingQty= ' + HeaderTestingQty + '&HeaderQty= ' + HeaderQty;
            
        }
    });

    //Functionality for search events
    $("#txtSearch,#txtSearch2").keyup(function (e) {
        Slick.GlobalEditorLock.cancelCurrentEdit();
        // clear on Esc
        if (e.which == 27) {
            this.value = "";
        }
        searchString = this.value;
        updateFilter();
    });
    function updateFilter() {
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.refresh();
    }

    // wire up model events to drive the grid
    dataView.onRowCountChanged.subscribe(function (e, args) {
        grid.updateRowCount();
        grid.render();
    });

    dataView.onRowsChanged.subscribe(function (e, args) {
        grid.invalidateRows(args.rows);
        grid.render();
    });

    var Dimension1IdVal = @ViewBag.Dimension1Id;
    //Data Fetching
    $.ajax({
        url: "/RecipeLine/GetRecipes",
        data: { Dimension1Id: Dimension1IdVal },
        async: true,
        success: function (rest) {
            data = rest.data;
            InitializeGrid();
        },
        error: function () {
            onError(fromPage, toPage)
        }
    });


    //Initializing the Grid
    function InitializeGrid() {
        // initialize the model after all the events have been hooked up
        dataView.beginUpdate();
        dataView.setItems(data, "JobOrderHeaderId");
        dataView.setFilterArgs({
            searchString: searchString
        });
        dataView.setFilter(myFilter);
        dataView.endUpdate();

        // if you don't want the items that are not visible (due to being filtered out
        // or being on a different page) to stay selected, pass 'false' to the second arg
        dataView.syncGridSelection(grid, true);

        grid.init();

    }

    $('#myGrid').on('dblclick', '.ui-widget-content.slick-row', function () {
        var CopyFromRecipeId = grid.getDataItem(grid.getSelectedRows()).JobOrderHeaderId;
        window.location.href = '/RecipeLine/RecipeDetail?JobOrderHeaderId=' + JobOrderHeaderId + '&CopyFromRecipeId= ' + CopyFromRecipeId + '&HeaderTestingQty= ' + HeaderTestingQty + '&HeaderQty= ' + HeaderQty;
    });

    $(window).resize(function (e) {
        grid.resizeCanvas();
    })

</script>